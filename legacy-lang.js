(function(exports) {
    "use strict";
    function _M0() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var builtInFuncs = {
            "+": ["conjugate", "add"],
            "−": ["negate", "subtract"],
            "×": ["signOf", "multiply"],
            "÷": ["reciprocal", "divide"],
            "⌈": ["ceiling", "greaterOf"],
            "⌊": ["floor", "lesserOf"],
            "∣": ["absolute", "residue"],
            "⍳": ["indexGenerate", "indexOf"],
            "?": ["roll", "deal"],
            "⋆": ["exponentiate", "toThePowerOf"],
            "⍟": ["naturalLog", "logToTheBase"],
            "○": ["piTimes", "circularFuncs"],
            "!": ["factorial", "binomial"],
            "⌹": ["matrixInverse", "matrixDivide"],
            "<": [null, "lessThan"],
            "≤": [null, "lessThanOrEqual"],
            "=": [null, "equals"],
            ">": [null, "greaterThan"],
            "≥": [null, "greaterThanOrEqual"],
            "≠": [null, "notEqual"],
            "≡": ["depth", "match"],
            "≢": [null, "notMatch"],
            "∈": ["enlist", "membership"],
            "⍷": [null, "find"],
            "∪": ["unique", "union"],
            "∩": [null, "intersection"],
            "∼": ["not", "without"],
            "∨": [null, "or"],
            "∧": [null, "and"],
            "⍱": [null, "nor"],
            "⍲": [null, "nand"],
            "⍴": ["shapeOf", "reshape"],
            ",": ["ravel", "catenate"],
            "⍪": [null, "firstAxisCatenate"],
            "⌽": ["reverse", "rotate"],
            "⊖": ["axis1Reverse", "axis1Rotate"],
            "⍉": ["transpose", null],
            "↑": ["first", "take"],
            "↓": [null, "drop"],
            "⊂": ["enclose", "partitionWithAxis"],
            "⊃": ["diclose", "pick"],
            "⌷": [null, "index"],
            "⍋": ["gradeUp", null],
            "⍒": ["gradeDown", null],
            "⊤": ["encode", null],
            "⊥": ["decode", null],
            "⍕": ["format", "formatByExample"],
            "⍎": ["execute", null],
            "⊣": ["stop", "left"],
            "⊢": ["pass", "right"],
        };

        var isOperator = /[\.\/⌿⍀¨⍣]/;
        var isNiladic = /⍬/;
        var isFunction =
            /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
        var isArrow = /←/;
        var isComment = /[⍝#].*$/;

        var stringEater = function(type) {
            var prev;
            prev = false;
            return function(c) {
                prev = c;
                if (c === type) {
                    return prev === "\\";
                }
                return true;
            };
        };

        const apl = {
            startState: function() {
                return {
                    prev: false,
                    func: false,
                    op: false,
                    string: false,
                    escape: false,
                };
            },
            token: function(stream, state) {
                var ch;
                if (stream.eatSpace()) {
                    return null;
                }
                ch = stream.next();
                if (ch === '"' || ch === "'") {
                    stream.eatWhile(stringEater(ch));
                    stream.next();
                    state.prev = true;
                    return "string";
                }
                if (/[\[{\(]/.test(ch)) {
                    state.prev = false;
                    return null;
                }
                if (/[\]}\)]/.test(ch)) {
                    state.prev = true;
                    return null;
                }
                if (isNiladic.test(ch)) {
                    state.prev = false;
                    return "atom";
                }
                if (/[¯\d]/.test(ch)) {
                    if (state.func) {
                        state.func = false;
                        state.prev = false;
                    } else {
                        state.prev = true;
                    }
                    stream.eatWhile(/[\w\.]/);
                    return "number";
                }
                if (isOperator.test(ch)) {
                    return "operator";
                }
                if (isArrow.test(ch)) {
                    return "operator";
                }
                if (isFunction.test(ch)) {
                    state.func = true;
                    state.prev = false;
                    return builtInFuncs[ch]
                        ? "variableName.function.standard"
                        : "variableName.function";
                }
                if (isComment.test(ch)) {
                    stream.skipToEnd();
                    return "comment";
                }
                if (ch === "∘" && stream.peek() === ".") {
                    stream.next();
                    return "variableName.function";
                }
                stream.eatWhile(/[\w\$_]/);
                state.prev = true;
                return "keyword";
            },
        };

        exports.apl = apl;
    }
    _M0();
    function _M1() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function errorIfNotEmpty(stream) {
            var nonWS = stream.match(/^\s*\S/);
            stream.skipToEnd();
            return nonWS ? "error" : null;
        }

        const asciiArmor = {
            token: function(stream, state) {
                var m;
                if (state.state == "top") {
                    if (
                        stream.sol() &&
                        (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))
                    ) {
                        state.state = "headers";
                        state.type = m[1];
                        return "tag";
                    }
                    return errorIfNotEmpty(stream);
                } else if (state.state == "headers") {
                    if (stream.sol() && stream.match(/^\w+:/)) {
                        state.state = "header";
                        return "atom";
                    } else {
                        var result = errorIfNotEmpty(stream);
                        if (result) state.state = "body";
                        return result;
                    }
                } else if (state.state == "header") {
                    stream.skipToEnd();
                    state.state = "headers";
                    return "string";
                } else if (state.state == "body") {
                    if (
                        stream.sol() &&
                        (m = stream.match(/^-----END (.*)?-----\s*$/))
                    ) {
                        if (m[1] != state.type) return "error";
                        state.state = "end";
                        return "tag";
                    } else {
                        if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
                            return null;
                        } else {
                            stream.next();
                            return "error";
                        }
                    }
                } else if (state.state == "end") {
                    return errorIfNotEmpty(stream);
                }
            },
            blankLine: function(state) {
                if (state.state == "headers") state.state = "body";
            },
            startState: function() {
                return { state: "top", type: null };
            },
        };

        exports.asciiArmor = asciiArmor;
    }
    _M1();
    function _M2() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var atoms = ["exten", "same", "include", "ignorepat", "switch"],
            dpcmd = ["#include", "#exec"],
            apps = [
                "addqueuemember",
                "adsiprog",
                "aelsub",
                "agentlogin",
                "agentmonitoroutgoing",
                "agi",
                "alarmreceiver",
                "amd",
                "answer",
                "authenticate",
                "background",
                "backgrounddetect",
                "bridge",
                "busy",
                "callcompletioncancel",
                "callcompletionrequest",
                "celgenuserevent",
                "changemonitor",
                "chanisavail",
                "channelredirect",
                "chanspy",
                "clearhash",
                "confbridge",
                "congestion",
                "continuewhile",
                "controlplayback",
                "dahdiacceptr2call",
                "dahdibarge",
                "dahdiras",
                "dahdiscan",
                "dahdisendcallreroutingfacility",
                "dahdisendkeypadfacility",
                "datetime",
                "dbdel",
                "dbdeltree",
                "deadagi",
                "dial",
                "dictate",
                "directory",
                "disa",
                "dumpchan",
                "eagi",
                "echo",
                "endwhile",
                "exec",
                "execif",
                "execiftime",
                "exitwhile",
                "extenspy",
                "externalivr",
                "festival",
                "flash",
                "followme",
                "forkcdr",
                "getcpeid",
                "gosub",
                "gosubif",
                "goto",
                "gotoif",
                "gotoiftime",
                "hangup",
                "iax2provision",
                "ices",
                "importvar",
                "incomplete",
                "ivrdemo",
                "jabberjoin",
                "jabberleave",
                "jabbersend",
                "jabbersendgroup",
                "jabberstatus",
                "jack",
                "log",
                "macro",
                "macroexclusive",
                "macroexit",
                "macroif",
                "mailboxexists",
                "meetme",
                "meetmeadmin",
                "meetmechanneladmin",
                "meetmecount",
                "milliwatt",
                "minivmaccmess",
                "minivmdelete",
                "minivmgreet",
                "minivmmwi",
                "minivmnotify",
                "minivmrecord",
                "mixmonitor",
                "monitor",
                "morsecode",
                "mp3player",
                "mset",
                "musiconhold",
                "nbscat",
                "nocdr",
                "noop",
                "odbc",
                "odbc",
                "odbcfinish",
                "originate",
                "ospauth",
                "ospfinish",
                "osplookup",
                "ospnext",
                "page",
                "park",
                "parkandannounce",
                "parkedcall",
                "pausemonitor",
                "pausequeuemember",
                "pickup",
                "pickupchan",
                "playback",
                "playtones",
                "privacymanager",
                "proceeding",
                "progress",
                "queue",
                "queuelog",
                "raiseexception",
                "read",
                "readexten",
                "readfile",
                "receivefax",
                "receivefax",
                "receivefax",
                "record",
                "removequeuemember",
                "resetcdr",
                "retrydial",
                "return",
                "ringing",
                "sayalpha",
                "saycountedadj",
                "saycountednoun",
                "saycountpl",
                "saydigits",
                "saynumber",
                "sayphonetic",
                "sayunixtime",
                "senddtmf",
                "sendfax",
                "sendfax",
                "sendfax",
                "sendimage",
                "sendtext",
                "sendurl",
                "set",
                "setamaflags",
                "setcallerpres",
                "setmusiconhold",
                "sipaddheader",
                "sipdtmfmode",
                "sipremoveheader",
                "skel",
                "slastation",
                "slatrunk",
                "sms",
                "softhangup",
                "speechactivategrammar",
                "speechbackground",
                "speechcreate",
                "speechdeactivategrammar",
                "speechdestroy",
                "speechloadgrammar",
                "speechprocessingsound",
                "speechstart",
                "speechunloadgrammar",
                "stackpop",
                "startmusiconhold",
                "stopmixmonitor",
                "stopmonitor",
                "stopmusiconhold",
                "stopplaytones",
                "system",
                "testclient",
                "testserver",
                "transfer",
                "tryexec",
                "trysystem",
                "unpausemonitor",
                "unpausequeuemember",
                "userevent",
                "verbose",
                "vmauthenticate",
                "vmsayname",
                "voicemail",
                "voicemailmain",
                "wait",
                "waitexten",
                "waitfornoise",
                "waitforring",
                "waitforsilence",
                "waitmusiconhold",
                "waituntil",
                "while",
                "zapateller",
            ];

        function basicToken(stream, state) {
            var cur = "";
            var ch = stream.next();
            // comment
            if (state.blockComment) {
                if (ch == "-" && stream.match("-;", true)) {
                    state.blockComment = false;
                } else if (stream.skipTo("--;")) {
                    stream.next();
                    stream.next();
                    stream.next();
                    state.blockComment = false;
                } else {
                    stream.skipToEnd();
                }
                return "comment";
            }
            if (ch == ";") {
                if (stream.match("--", true)) {
                    if (!stream.match("-", false)) {
                        // Except ;--- is not a block comment
                        state.blockComment = true;
                        return "comment";
                    }
                }
                stream.skipToEnd();
                return "comment";
            }
            // context
            if (ch == "[") {
                stream.skipTo("]");
                stream.eat("]");
                return "header";
            }
            // string
            if (ch == '"') {
                stream.skipTo('"');
                return "string";
            }
            if (ch == "'") {
                stream.skipTo("'");
                return "string.special";
            }
            // dialplan commands
            if (ch == "#") {
                stream.eatWhile(/\w/);
                cur = stream.current();
                if (dpcmd.indexOf(cur) !== -1) {
                    stream.skipToEnd();
                    return "strong";
                }
            }
            // application args
            if (ch == "$") {
                var ch1 = stream.peek();
                if (ch1 == "{") {
                    stream.skipTo("}");
                    stream.eat("}");
                    return "variableName.special";
                }
            }
            // extension
            stream.eatWhile(/\w/);
            cur = stream.current();
            if (atoms.indexOf(cur) !== -1) {
                state.extenStart = true;
                switch (cur) {
                    case "same":
                        state.extenSame = true;
                        break;
                    case "include":
                    case "switch":
                    case "ignorepat":
                        state.extenInclude = true;
                        break;
                }
                return "atom";
            }
        }

        const asterisk = {
            startState: function() {
                return {
                    blockComment: false,
                    extenStart: false,
                    extenSame: false,
                    extenInclude: false,
                    extenExten: false,
                    extenPriority: false,
                    extenApplication: false,
                };
            },
            token: function(stream, state) {
                var cur = "";
                if (stream.eatSpace()) return null;
                // extension started
                if (state.extenStart) {
                    stream.eatWhile(/[^\s]/);
                    cur = stream.current();
                    if (/^=>?$/.test(cur)) {
                        state.extenExten = true;
                        state.extenStart = false;
                        return "strong";
                    } else {
                        state.extenStart = false;
                        stream.skipToEnd();
                        return "error";
                    }
                } else if (state.extenExten) {
                    // set exten and priority
                    state.extenExten = false;
                    state.extenPriority = true;
                    stream.eatWhile(/[^,]/);
                    if (state.extenInclude) {
                        stream.skipToEnd();
                        state.extenPriority = false;
                        state.extenInclude = false;
                    }
                    if (state.extenSame) {
                        state.extenPriority = false;
                        state.extenSame = false;
                        state.extenApplication = true;
                    }
                    return "tag";
                } else if (state.extenPriority) {
                    state.extenPriority = false;
                    state.extenApplication = true;
                    stream.next(); // get comma
                    if (state.extenSame) return null;
                    stream.eatWhile(/[^,]/);
                    return "number";
                } else if (state.extenApplication) {
                    stream.eatWhile(/,/);
                    cur = stream.current();
                    if (cur === ",") return null;
                    stream.eatWhile(/\w/);
                    cur = stream.current().toLowerCase();
                    state.extenApplication = false;
                    if (apps.indexOf(cur) !== -1) {
                        return "def";
                    }
                } else {
                    return basicToken(stream, state);
                }

                return null;
            },

            languageData: {
                commentTokens: {
                    line: ";",
                    block: { open: ";--", close: "--;" },
                },
            },
        };

        exports.asterisk = asterisk;
    }
    _M2();
    function _M3() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var reserve = "><+-.,[]".split("");
        /*
  comments can be either:
  placed behind lines

  +++    this is a comment

  where reserved characters cannot be used
  or in a loop
  [
  this is ok to use [ ] and stuff
  ]
  or preceded by #
*/
        const brainfuck = {
            startState: function() {
                return {
                    commentLine: false,
                    left: 0,
                    right: 0,
                    commentLoop: false,
                };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                if (stream.sol()) {
                    state.commentLine = false;
                }
                var ch = stream.next().toString();
                if (reserve.indexOf(ch) !== -1) {
                    if (state.commentLine === true) {
                        if (stream.eol()) {
                            state.commentLine = false;
                        }
                        return "comment";
                    }
                    if (ch === "]" || ch === "[") {
                        if (ch === "[") {
                            state.left++;
                        } else {
                            state.right++;
                        }
                        return "bracket";
                    } else if (ch === "+" || ch === "-") {
                        return "keyword";
                    } else if (ch === "<" || ch === ">") {
                        return "atom";
                    } else if (ch === "." || ch === ",") {
                        return "def";
                    }
                } else {
                    state.commentLine = true;
                    if (stream.eol()) {
                        state.commentLine = false;
                    }
                    return "comment";
                }
                if (stream.eol()) {
                    state.commentLine = false;
                }
            },
        };

        exports.brainfuck = brainfuck;
    }
    _M3();
    function _M4() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function Context(indented, column, type, info, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.info = info;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type, info) {
            var indent = state.indented;
            if (
                state.context &&
                state.context.type == "statement" &&
                type != "statement"
            )
                indent = state.context.indented;
            return (state.context = new Context(
                indent,
                col,
                type,
                info,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        function typeBefore(stream, state, pos) {
            if (state.prevToken == "variable" || state.prevToken == "type")
                return true;
            if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos)))
                return true;
            if (
                state.typeAtEndOfLine &&
                stream.column() == stream.indentation()
            )
                return true;
        }

        function isTopScope(context) {
            for (; ;) {
                if (!context || context.type == "top") return true;
                if (context.type == "}" && context.prev.info != "namespace")
                    return false;
                context = context.prev;
            }
        }

        function clike(parserConfig) {
            var statementIndentUnit = parserConfig.statementIndentUnit,
                dontAlignCalls = parserConfig.dontAlignCalls,
                keywords = parserConfig.keywords || {},
                types = parserConfig.types || {},
                builtin = parserConfig.builtin || {},
                blockKeywords = parserConfig.blockKeywords || {},
                defKeywords = parserConfig.defKeywords || {},
                atoms = parserConfig.atoms || {},
                hooks = parserConfig.hooks || {},
                multiLineStrings = parserConfig.multiLineStrings,
                indentStatements = parserConfig.indentStatements !== false,
                indentSwitch = parserConfig.indentSwitch !== false,
                namespaceSeparator = parserConfig.namespaceSeparator,
                isPunctuationChar =
                    parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/,
                numberStart = parserConfig.numberStart || /[\d\.]/,
                number =
                    parserConfig.number ||
                    /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,
                isOperatorChar =
                    parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/,
                isIdentifierChar =
                    parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/,
                // An optional function that takes a {string} token and returns true if it
                // should be treated as a builtin.
                isReservedIdentifier =
                    parserConfig.isReservedIdentifier || false;

            var curPunc, isDefKeyword;

            function tokenBase(stream, state) {
                var ch = stream.next();
                if (hooks[ch]) {
                    var result = hooks[ch](stream, state);
                    if (result !== false) return result;
                }
                if (ch == '"' || ch == "'") {
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                }
                if (numberStart.test(ch)) {
                    stream.backUp(1);
                    if (stream.match(number)) return "number";
                    stream.next();
                }
                if (isPunctuationChar.test(ch)) {
                    curPunc = ch;
                    return null;
                }
                if (ch == "/") {
                    if (stream.eat("*")) {
                        state.tokenize = tokenComment;
                        return tokenComment(stream, state);
                    }
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return "comment";
                    }
                }
                if (isOperatorChar.test(ch)) {
                    while (
                        !stream.match(/^\/[\/*]/, false) &&
                        stream.eat(isOperatorChar)
                    ) { }
                    return "operator";
                }
                stream.eatWhile(isIdentifierChar);
                if (namespaceSeparator)
                    while (stream.match(namespaceSeparator))
                        stream.eatWhile(isIdentifierChar);

                var cur = stream.current();
                if (contains(keywords, cur)) {
                    if (contains(blockKeywords, cur)) curPunc = "newstatement";
                    if (contains(defKeywords, cur)) isDefKeyword = true;
                    return "keyword";
                }
                if (contains(types, cur)) return "type";
                if (
                    contains(builtin, cur) ||
                    (isReservedIdentifier && isReservedIdentifier(cur))
                ) {
                    if (contains(blockKeywords, cur)) curPunc = "newstatement";
                    return "builtin";
                }
                if (contains(atoms, cur)) return "atom";
                return "variable";
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        next,
                        end = false;
                    while ((next = stream.next()) != null) {
                        if (next == quote && !escaped) {
                            end = true;
                            break;
                        }
                        escaped = !escaped && next == "\\";
                    }
                    if (end || !(escaped || multiLineStrings))
                        state.tokenize = null;
                    return "string";
                };
            }

            function tokenComment(stream, state) {
                var maybeEnd = false,
                    ch;
                while ((ch = stream.next())) {
                    if (ch == "/" && maybeEnd) {
                        state.tokenize = null;
                        break;
                    }
                    maybeEnd = ch == "*";
                }
                return "comment";
            }

            function maybeEOL(stream, state) {
                if (
                    parserConfig.typeFirstDefinitions &&
                    stream.eol() &&
                    isTopScope(state.context)
                )
                    state.typeAtEndOfLine = typeBefore(
                        stream,
                        state,
                        stream.pos
                    );
            }

            // Interface

            return {
                startState: function(indentUnit) {
                    return {
                        tokenize: null,
                        context: new Context(
                            -indentUnit,
                            0,
                            "top",
                            null,
                            false
                        ),
                        indented: 0,
                        startOfLine: true,
                        prevToken: null,
                    };
                },

                token: function(stream, state) {
                    var ctx = state.context;
                    if (stream.sol()) {
                        if (ctx.align == null) ctx.align = false;
                        state.indented = stream.indentation();
                        state.startOfLine = true;
                    }
                    if (stream.eatSpace()) {
                        maybeEOL(stream, state);
                        return null;
                    }
                    curPunc = isDefKeyword = null;
                    var style = (state.tokenize || tokenBase)(stream, state);
                    if (style == "comment" || style == "meta") return style;
                    if (ctx.align == null) ctx.align = true;

                    if (
                        curPunc == ";" ||
                        curPunc == ":" ||
                        (curPunc == "," &&
                            stream.match(/^\s*(?:\/\/.*)?$/, false))
                    )
                        while (state.context.type == "statement")
                            popContext(state);
                    else if (curPunc == "{")
                        pushContext(state, stream.column(), "}");
                    else if (curPunc == "[")
                        pushContext(state, stream.column(), "]");
                    else if (curPunc == "(")
                        pushContext(state, stream.column(), ")");
                    else if (curPunc == "}") {
                        while (ctx.type == "statement") ctx = popContext(state);
                        if (ctx.type == "}") ctx = popContext(state);
                        while (ctx.type == "statement") ctx = popContext(state);
                    } else if (curPunc == ctx.type) popContext(state);
                    else if (
                        indentStatements &&
                        (((ctx.type == "}" || ctx.type == "top") &&
                            curPunc != ";") ||
                            (ctx.type == "statement" &&
                                curPunc == "newstatement"))
                    ) {
                        pushContext(
                            state,
                            stream.column(),
                            "statement",
                            stream.current()
                        );
                    }

                    if (
                        style == "variable" &&
                        (state.prevToken == "def" ||
                            (parserConfig.typeFirstDefinitions &&
                                typeBefore(stream, state, stream.start) &&
                                isTopScope(state.context) &&
                                stream.match(/^\s*\(/, false)))
                    )
                        style = "def";

                    if (hooks.token) {
                        var result = hooks.token(stream, state, style);
                        if (result !== undefined) style = result;
                    }

                    if (style == "def" && parserConfig.styleDefs === false)
                        style = "variable";

                    state.startOfLine = false;
                    state.prevToken = isDefKeyword ? "def" : style || curPunc;
                    maybeEOL(stream, state);
                    return style;
                },

                indent: function(state, textAfter, context) {
                    if (
                        (state.tokenize != tokenBase &&
                            state.tokenize != null) ||
                        state.typeAtEndOfLine
                    )
                        return null;
                    var ctx = state.context,
                        firstChar = textAfter && textAfter.charAt(0);
                    var closing = firstChar == ctx.type;
                    if (ctx.type == "statement" && firstChar == "}")
                        ctx = ctx.prev;
                    if (parserConfig.dontIndentStatements)
                        while (
                            ctx.type == "statement" &&
                            parserConfig.dontIndentStatements.test(ctx.info)
                        )
                            ctx = ctx.prev;
                    if (hooks.indent) {
                        var hook = hooks.indent(
                            state,
                            ctx,
                            textAfter,
                            context.unit
                        );
                        if (typeof hook == "number") return hook;
                    }
                    var switchBlock = ctx.prev && ctx.prev.info == "switch";
                    if (
                        parserConfig.allmanIndentation &&
                        /[{(]/.test(firstChar)
                    ) {
                        while (ctx.type != "top" && ctx.type != "}")
                            ctx = ctx.prev;
                        return ctx.indented;
                    }
                    if (ctx.type == "statement")
                        return (
                            ctx.indented +
                            (firstChar == "{"
                                ? 0
                                : statementIndentUnit || context.unit)
                        );
                    if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
                        return ctx.column + (closing ? 0 : 1);
                    if (ctx.type == ")" && !closing)
                        return (
                            ctx.indented + (statementIndentUnit || context.unit)
                        );

                    return (
                        ctx.indented +
                        (closing ? 0 : context.unit) +
                        (!closing &&
                            switchBlock &&
                            !/^(?:case|default)\b/.test(textAfter)
                            ? context.unit
                            : 0)
                    );
                },

                languageData: {
                    indentOnInput: indentSwitch
                        ? /^\s*(?:case .*?:|default:|\{\}?|\})$/
                        : /^\s*[{}]$/,
                    commentTokens: {
                        line: "//",
                        block: { open: "/*", close: "*/" },
                    },
                    autocomplete: Object.keys(keywords)
                        .concat(Object.keys(types))
                        .concat(Object.keys(builtin))
                        .concat(Object.keys(atoms)),
                    ...parserConfig.languageData,
                },
            };
        }
        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        function contains(words, word) {
            if (typeof words === "function") {
                return words(word);
            } else {
                return words.propertyIsEnumerable(word);
            }
        }
        var cKeywords =
            "auto if break case register continue return default do sizeof " +
            "static else struct switch extern typedef union for goto while enum const " +
            "volatile inline restrict asm fortran";

        // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.
        var cppKeywords =
            "alignas alignof and and_eq audit axiom bitand bitor catch " +
            "class compl concept constexpr const_cast decltype delete dynamic_cast " +
            "explicit export final friend import module mutable namespace new noexcept " +
            "not not_eq operator or or_eq override private protected public " +
            "reinterpret_cast requires static_assert static_cast template this " +
            "thread_local throw try typeid typename using virtual xor xor_eq";

        var objCKeywords =
            "bycopy byref in inout oneway out self super atomic nonatomic retain copy " +
            "readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd " +
            "@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class " +
            "@public @package @private @protected @required @optional @try @catch @finally @import " +
            "@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";

        var objCBuiltins =
            "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION " +
            " NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER " +
            "NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION " +
            "NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";

        // Do not use this. Use the cTypes function below. This is global just to avoid
        // excessive calls when cTypes is being called multiple times during a parse.
        var basicCTypes = words(
            "int long char short double float unsigned signed " + "void bool"
        );

        // Do not use this. Use the objCTypes function below. This is global just to avoid
        // excessive calls when objCTypes is being called multiple times during a parse.
        var basicObjCTypes = words("SEL instancetype id Class Protocol BOOL");

        // Returns true if identifier is a "C" type.
        // C type is defined as those that are reserved by the compiler (basicTypes),
        // and those that end in _t (Reserved by POSIX for types)
        // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html
        function cTypes(identifier) {
            return (
                contains(basicCTypes, identifier) || /.+_t$/.test(identifier)
            );
        }

        // Returns true if identifier is a "Objective C" type.
        function objCTypes(identifier) {
            return cTypes(identifier) || contains(basicObjCTypes, identifier);
        }

        var cBlockKeywords =
            "case do else for if switch while struct enum union";
        var cDefKeywords = "struct enum union";

        function cppHook(stream, state) {
            if (!state.startOfLine) return false;
            for (var ch, next = null; (ch = stream.peek());) {
                if (ch == "\\" && stream.match(/^.$/)) {
                    next = cppHook;
                    break;
                } else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
                    break;
                }
                stream.next();
            }
            state.tokenize = next;
            return "meta";
        }

        function pointerHook(_stream, state) {
            if (state.prevToken == "type") return "type";
            return false;
        }

        // For C and C++ (and ObjC): identifiers starting with __
        // or _ followed by a capital letter are reserved for the compiler.
        function cIsReservedIdentifier(token) {
            if (!token || token.length < 2) return false;
            if (token[0] != "_") return false;
            return token[1] == "_" || token[1] !== token[1].toLowerCase();
        }

        function cpp14Literal(stream) {
            stream.eatWhile(/[\w\.']/);
            return "number";
        }

        function cpp11StringHook(stream, state) {
            stream.backUp(1);
            // Raw strings.
            if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
                var match = stream.match(/^"([^\s\\()]{0,16})\(/);
                if (!match) {
                    return false;
                }
                state.cpp11RawStringDelim = match[1];
                state.tokenize = tokenRawString;
                return tokenRawString(stream, state);
            }
            // Unicode strings/chars.
            if (stream.match(/^(?:u8|u|U|L)/)) {
                if (stream.match(/^["']/, /* eat */ false)) {
                    return "string";
                }
                return false;
            }
            // Ignore this hook.
            stream.next();
            return false;
        }

        function cppLooksLikeConstructor(word) {
            var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
            return lastTwo && lastTwo[1] == lastTwo[2];
        }

        // C#-style strings where "" escapes a quote.
        function tokenAtString(stream, state) {
            var next;
            while ((next = stream.next()) != null) {
                if (next == '"' && !stream.eat('"')) {
                    state.tokenize = null;
                    break;
                }
            }
            return "string";
        }

        // C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where
        // <delim> can be a string up to 16 characters long.
        function tokenRawString(stream, state) {
            // Escape characters that have special regex meanings.
            var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
            var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
            if (match) state.tokenize = null;
            else stream.skipToEnd();
            return "string";
        }

        const c = clike({
            keywords: words(cKeywords),
            types: cTypes,
            blockKeywords: words(cBlockKeywords),
            defKeywords: words(cDefKeywords),
            typeFirstDefinitions: true,
            atoms: words("NULL true false"),
            isReservedIdentifier: cIsReservedIdentifier,
            hooks: {
                "#": cppHook,
                "*": pointerHook,
            },
        });

        const cpp = clike({
            keywords: words(cKeywords + " " + cppKeywords),
            types: cTypes,
            blockKeywords: words(cBlockKeywords + " class try catch"),
            defKeywords: words(cDefKeywords + " class namespace"),
            typeFirstDefinitions: true,
            atoms: words("true false NULL nullptr"),
            dontIndentStatements: /^template$/,
            isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
            isReservedIdentifier: cIsReservedIdentifier,
            hooks: {
                "#": cppHook,
                "*": pointerHook,
                u: cpp11StringHook,
                U: cpp11StringHook,
                L: cpp11StringHook,
                R: cpp11StringHook,
                0: cpp14Literal,
                1: cpp14Literal,
                2: cpp14Literal,
                3: cpp14Literal,
                4: cpp14Literal,
                5: cpp14Literal,
                6: cpp14Literal,
                7: cpp14Literal,
                8: cpp14Literal,
                9: cpp14Literal,
                token: function(stream, state, style) {
                    if (
                        style == "variable" &&
                        stream.peek() == "(" &&
                        (state.prevToken == ";" ||
                            state.prevToken == null ||
                            state.prevToken == "}") &&
                        cppLooksLikeConstructor(stream.current())
                    )
                        return "def";
                },
            },
            namespaceSeparator: "::",
        });

        const java = clike({
            keywords: words(
                "abstract assert break case catch class const continue default " +
                "do else enum extends final finally for goto if implements import " +
                "instanceof interface native new package private protected public " +
                "return static strictfp super switch synchronized this throw throws transient " +
                "try volatile while @interface"
            ),
            types: words(
                "var byte short int long float double boolean char void Boolean Byte Character Double Float " +
                "Integer Long Number Object Short String StringBuffer StringBuilder Void"
            ),
            blockKeywords: words(
                "catch class do else finally for if switch try while"
            ),
            defKeywords: words("class interface enum @interface"),
            typeFirstDefinitions: true,
            atoms: words("true false null"),
            number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
            hooks: {
                "@": function(stream) {
                    // Don't match the @interface keyword.
                    if (stream.match("interface", false)) return false;

                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
                '"': function(stream, state) {
                    if (!stream.match(/""$/)) return false;
                    state.tokenize = tokenTripleString;
                    return state.tokenize(stream, state);
                },
            },
        });

        const csharp = clike({
            keywords: words(
                "abstract as async await base break case catch checked class const continue" +
                " default delegate do else enum event explicit extern finally fixed for" +
                " foreach goto if implicit in interface internal is lock namespace new" +
                " operator out override params private protected public readonly ref return sealed" +
                " sizeof stackalloc static struct switch this throw try typeof unchecked" +
                " unsafe using virtual void volatile while add alias ascending descending dynamic from get" +
                " global group into join let orderby partial remove select set value var yield"
            ),
            types: words(
                "Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func" +
                " Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32" +
                " UInt64 bool byte char decimal double short int long object" +
                " sbyte float string ushort uint ulong"
            ),
            blockKeywords: words(
                "catch class do else finally for foreach if struct switch try while"
            ),
            defKeywords: words("class interface namespace struct var"),
            typeFirstDefinitions: true,
            atoms: words("true false null"),
            hooks: {
                "@": function(stream, state) {
                    if (stream.eat('"')) {
                        state.tokenize = tokenAtString;
                        return tokenAtString(stream, state);
                    }
                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
            },
        });

        function tokenTripleString(stream, state) {
            var escaped = false;
            while (!stream.eol()) {
                if (!escaped && stream.match('"""')) {
                    state.tokenize = null;
                    break;
                }
                escaped = stream.next() == "\\" && !escaped;
            }
            return "string";
        }

        function tokenNestedComment(depth) {
            return function(stream, state) {
                var ch;
                while ((ch = stream.next())) {
                    if (ch == "*" && stream.eat("/")) {
                        if (depth == 1) {
                            state.tokenize = null;
                            break;
                        } else {
                            state.tokenize = tokenNestedComment(depth - 1);
                            return state.tokenize(stream, state);
                        }
                    } else if (ch == "/" && stream.eat("*")) {
                        state.tokenize = tokenNestedComment(depth + 1);
                        return state.tokenize(stream, state);
                    }
                }
                return "comment";
            };
        }

        const scala = clike({
            keywords: words(
                /* scala */
                "abstract case catch class def do else extends final finally for forSome if " +
                "implicit import lazy match new null object override package private protected return " +
                "sealed super this throw trait try type val var while with yield _ " +
                /* package scala */
                "assert assume require print println printf readLine readBoolean readByte readShort " +
                "readChar readInt readLong readFloat readDouble"
            ),
            types: words(
                "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either " +
                "Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable " +
                "Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering " +
                "Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder " +
                "StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector " +
                /* package java.lang */
                "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
                "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
                "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
                "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
            ),
            multiLineStrings: true,
            blockKeywords: words(
                "catch class enum do else finally for forSome if match switch try while"
            ),
            defKeywords: words(
                "class enum def object package trait type val var"
            ),
            atoms: words("true false null"),
            indentStatements: false,
            indentSwitch: false,
            isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
            hooks: {
                "@": function(stream) {
                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
                '"': function(stream, state) {
                    if (!stream.match('""')) return false;
                    state.tokenize = tokenTripleString;
                    return state.tokenize(stream, state);
                },
                "'": function(stream) {
                    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
                    return "atom";
                },
                "=": function(stream, state) {
                    var cx = state.context;
                    if (cx.type == "}" && cx.align && stream.eat(">")) {
                        state.context = new Context(
                            cx.indented,
                            cx.column,
                            cx.type,
                            cx.info,
                            null,
                            cx.prev
                        );
                        return "operator";
                    } else {
                        return false;
                    }
                },

                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenNestedComment(1);
                    return state.tokenize(stream, state);
                },
            },
            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] },
            },
        });

        function tokenKotlinString(tripleString) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while (!stream.eol()) {
                    if (!tripleString && !escaped && stream.match('"')) {
                        end = true;
                        break;
                    }
                    if (tripleString && stream.match('"""')) {
                        end = true;
                        break;
                    }
                    next = stream.next();
                    if (!escaped && next == "$" && stream.match("{"))
                        stream.skipTo("}");
                    escaped = !escaped && next == "\\" && !tripleString;
                }
                if (end || !tripleString) state.tokenize = null;
                return "string";
            };
        }

        const kotlin = clike({
            keywords: words(
                /*keywords*/
                "package as typealias class interface this super val operator " +
                "var fun for is in This throw return annotation " +
                "break continue object if else while do try when !in !is as? " +
                /*soft keywords*/
                "file import where by get set abstract enum open inner override private public internal " +
                "protected catch finally out final vararg reified dynamic companion constructor init " +
                "sealed field property receiver param sparam lateinit data inline noinline tailrec " +
                "external annotation crossinline const operator infix suspend actual expect setparam"
            ),
            types: words(
                /* package java.lang */
                "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
                "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
                "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
                "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray " +
                "ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy " +
                "LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
            ),
            intendSwitch: false,
            indentStatements: false,
            multiLineStrings: true,
            number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
            blockKeywords: words(
                "catch class do else finally for if where try while enum"
            ),
            defKeywords: words("class val var object interface fun"),
            atoms: words("true false null this"),
            hooks: {
                "@": function(stream) {
                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
                "*": function(_stream, state) {
                    return state.prevToken == "." ? "variable" : "operator";
                },
                '"': function(stream, state) {
                    state.tokenize = tokenKotlinString(stream.match('""'));
                    return state.tokenize(stream, state);
                },
                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenNestedComment(1);
                    return state.tokenize(stream, state);
                },
                indent: function(state, ctx, textAfter, indentUnit) {
                    var firstChar = textAfter && textAfter.charAt(0);
                    if (
                        (state.prevToken == "}" || state.prevToken == ")") &&
                        textAfter == ""
                    )
                        return state.indented;
                    if (
                        (state.prevToken == "operator" &&
                            textAfter != "}" &&
                            state.context.type != "}") ||
                        (state.prevToken == "variable" && firstChar == ".") ||
                        ((state.prevToken == "}" || state.prevToken == ")") &&
                            firstChar == ".")
                    )
                        return indentUnit * 2 + ctx.indented;
                    if (ctx.align && ctx.type == "}")
                        return (
                            ctx.indented +
                            (state.context.type == (textAfter || "").charAt(0)
                                ? 0
                                : indentUnit)
                        );
                },
            },
            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] },
            },
        });

        const shader = clike({
            keywords: words(
                "sampler1D sampler2D sampler3D samplerCube " +
                "sampler1DShadow sampler2DShadow " +
                "const attribute uniform varying " +
                "break continue discard return " +
                "for while do if else struct " +
                "in out inout"
            ),
            types: words(
                "float int bool void " +
                "vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 " +
                "mat2 mat3 mat4"
            ),
            blockKeywords: words("for while do if else struct"),
            builtin: words(
                "radians degrees sin cos tan asin acos atan " +
                "pow exp log exp2 sqrt inversesqrt " +
                "abs sign floor ceil fract mod min max clamp mix step smoothstep " +
                "length distance dot cross normalize ftransform faceforward " +
                "reflect refract matrixCompMult " +
                "lessThan lessThanEqual greaterThan greaterThanEqual " +
                "equal notEqual any all not " +
                "texture1D texture1DProj texture1DLod texture1DProjLod " +
                "texture2D texture2DProj texture2DLod texture2DProjLod " +
                "texture3D texture3DProj texture3DLod texture3DProjLod " +
                "textureCube textureCubeLod " +
                "shadow1D shadow2D shadow1DProj shadow2DProj " +
                "shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod " +
                "dFdx dFdy fwidth " +
                "noise1 noise2 noise3 noise4"
            ),
            atoms: words(
                "true false " +
                "gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex " +
                "gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 " +
                "gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 " +
                "gl_FogCoord gl_PointCoord " +
                "gl_Position gl_PointSize gl_ClipVertex " +
                "gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor " +
                "gl_TexCoord gl_FogFragCoord " +
                "gl_FragCoord gl_FrontFacing " +
                "gl_FragData gl_FragDepth " +
                "gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix " +
                "gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse " +
                "gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse " +
                "gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose " +
                "gl_ProjectionMatrixInverseTranspose " +
                "gl_ModelViewProjectionMatrixInverseTranspose " +
                "gl_TextureMatrixInverseTranspose " +
                "gl_NormalScale gl_DepthRange gl_ClipPlane " +
                "gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel " +
                "gl_FrontLightModelProduct gl_BackLightModelProduct " +
                "gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ " +
                "gl_FogParameters " +
                "gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords " +
                "gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats " +
                "gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits " +
                "gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits " +
                "gl_MaxDrawBuffers"
            ),
            indentSwitch: false,
            hooks: { "#": cppHook },
        });

        const nesC = clike({
            keywords: words(
                cKeywords +
                " as atomic async call command component components configuration event generic " +
                "implementation includes interface module new norace nx_struct nx_union post provides " +
                "signal task uses abstract extends"
            ),
            types: cTypes,
            blockKeywords: words(cBlockKeywords),
            atoms: words("null true false"),
            hooks: { "#": cppHook },
        });

        const objectiveC = clike({
            keywords: words(cKeywords + " " + objCKeywords),
            types: objCTypes,
            builtin: words(objCBuiltins),
            blockKeywords: words(
                cBlockKeywords +
                " @synthesize @try @catch @finally @autoreleasepool @synchronized"
            ),
            defKeywords: words(
                cDefKeywords + " @interface @implementation @protocol @class"
            ),
            dontIndentStatements: /^@.*$/,
            typeFirstDefinitions: true,
            atoms: words("YES NO NULL Nil nil true false nullptr"),
            isReservedIdentifier: cIsReservedIdentifier,
            hooks: {
                "#": cppHook,
                "*": pointerHook,
            },
        });

        const objectiveCpp = clike({
            keywords: words(cKeywords + " " + objCKeywords + " " + cppKeywords),
            types: objCTypes,
            builtin: words(objCBuiltins),
            blockKeywords: words(
                cBlockKeywords +
                " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"
            ),
            defKeywords: words(
                cDefKeywords +
                " @interface @implementation @protocol @class class namespace"
            ),
            dontIndentStatements: /^@.*$|^template$/,
            typeFirstDefinitions: true,
            atoms: words("YES NO NULL Nil nil true false nullptr"),
            isReservedIdentifier: cIsReservedIdentifier,
            hooks: {
                "#": cppHook,
                "*": pointerHook,
                u: cpp11StringHook,
                U: cpp11StringHook,
                L: cpp11StringHook,
                R: cpp11StringHook,
                0: cpp14Literal,
                1: cpp14Literal,
                2: cpp14Literal,
                3: cpp14Literal,
                4: cpp14Literal,
                5: cpp14Literal,
                6: cpp14Literal,
                7: cpp14Literal,
                8: cpp14Literal,
                9: cpp14Literal,
                token: function(stream, state, style) {
                    if (
                        style == "variable" &&
                        stream.peek() == "(" &&
                        (state.prevToken == ";" ||
                            state.prevToken == null ||
                            state.prevToken == "}") &&
                        cppLooksLikeConstructor(stream.current())
                    )
                        return "def";
                },
            },
            namespaceSeparator: "::",
        });

        const squirrel = clike({
            keywords: words(
                "base break clone continue const default delete enum extends function in class" +
                " foreach local resume return this throw typeof yield constructor instanceof static"
            ),
            types: cTypes,
            blockKeywords: words(
                "case catch class else for foreach if switch try while"
            ),
            defKeywords: words("function local class"),
            typeFirstDefinitions: true,
            atoms: words("true false null"),
            hooks: { "#": cppHook },
        });

        // Ceylon Strings need to deal with interpolation
        var stringTokenizer = null;
        function tokenCeylonString(type) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while (!stream.eol()) {
                    if (
                        !escaped &&
                        stream.match('"') &&
                        (type == "single" || stream.match('""'))
                    ) {
                        end = true;
                        break;
                    }
                    if (!escaped && stream.match("``")) {
                        stringTokenizer = tokenCeylonString(type);
                        end = true;
                        break;
                    }
                    next = stream.next();
                    escaped = type == "single" && !escaped && next == "\\";
                }
                if (end) state.tokenize = null;
                return "string";
            };
        }

        const ceylon = clike({
            keywords: words(
                "abstracts alias assembly assert assign break case catch class continue dynamic else" +
                " exists extends finally for function given if import in interface is let module new" +
                " nonempty object of out outer package return satisfies super switch then this throw" +
                " try value void while"
            ),
            types: function(word) {
                // In Ceylon all identifiers that start with an uppercase are types
                var first = word.charAt(0);
                return (
                    first === first.toUpperCase() &&
                    first !== first.toLowerCase()
                );
            },
            blockKeywords: words(
                "case catch class dynamic else finally for function if interface module new object switch try while"
            ),
            defKeywords: words(
                "class dynamic function interface module object package value"
            ),
            builtin: words(
                "abstract actual aliased annotation by default deprecated doc final formal late license" +
                " native optional sealed see serializable shared suppressWarnings tagged throws variable"
            ),
            isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
            isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
            numberStart: /[\d#$]/,
            number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
            multiLineStrings: true,
            typeFirstDefinitions: true,
            atoms: words("true false null larger smaller equal empty finished"),
            indentSwitch: false,
            styleDefs: false,
            hooks: {
                "@": function(stream) {
                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
                '"': function(stream, state) {
                    state.tokenize = tokenCeylonString(
                        stream.match('""') ? "triple" : "single"
                    );
                    return state.tokenize(stream, state);
                },
                "`": function(stream, state) {
                    if (!stringTokenizer || !stream.match("`")) return false;
                    state.tokenize = stringTokenizer;
                    stringTokenizer = null;
                    return state.tokenize(stream, state);
                },
                "'": function(stream) {
                    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
                    return "atom";
                },
                token: function(_stream, state, style) {
                    if (
                        (style == "variable" || style == "type") &&
                        state.prevToken == "."
                    ) {
                        return "variableName.special";
                    }
                },
            },
            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] },
            },
        });

        function pushInterpolationStack(state) {
            (state.interpolationStack || (state.interpolationStack = [])).push(
                state.tokenize
            );
        }

        function popInterpolationStack(state) {
            return (
                state.interpolationStack || (state.interpolationStack = [])
            ).pop();
        }

        function sizeInterpolationStack(state) {
            return state.interpolationStack
                ? state.interpolationStack.length
                : 0;
        }

        function tokenDartString(quote, stream, state, raw) {
            var tripleQuoted = false;
            if (stream.eat(quote)) {
                if (stream.eat(quote)) tripleQuoted = true;
                else return "string"; //empty string
            }
            function tokenStringHelper(stream, state) {
                var escaped = false;
                while (!stream.eol()) {
                    if (!raw && !escaped && stream.peek() == "$") {
                        pushInterpolationStack(state);
                        state.tokenize = tokenInterpolation;
                        return "string";
                    }
                    var next = stream.next();
                    if (
                        next == quote &&
                        !escaped &&
                        (!tripleQuoted || stream.match(quote + quote))
                    ) {
                        state.tokenize = null;
                        break;
                    }
                    escaped = !raw && !escaped && next == "\\";
                }
                return "string";
            }
            state.tokenize = tokenStringHelper;
            return tokenStringHelper(stream, state);
        }

        function tokenInterpolation(stream, state) {
            stream.eat("$");
            if (stream.eat("{")) {
                // let clike handle the content of ${...},
                // we take over again when "}" appears (see hooks).
                state.tokenize = null;
            } else {
                state.tokenize = tokenInterpolationIdentifier;
            }
            return null;
        }

        function tokenInterpolationIdentifier(stream, state) {
            stream.eatWhile(/[\w_]/);
            state.tokenize = popInterpolationStack(state);
            return "variable";
        }

        const dart = clike({
            keywords: words(
                "this super static final const abstract class extends external factory " +
                "implements mixin get native set typedef with enum throw rethrow " +
                "assert break case continue default in return new deferred async await covariant " +
                "try catch finally do else for if switch while import library export " +
                "part of show hide is as extension on yield late required"
            ),
            blockKeywords: words(
                "try catch finally do else for if switch while"
            ),
            builtin: words(
                "void bool num int double dynamic var String Null Never"
            ),
            atoms: words("true false null"),
            hooks: {
                "@": function(stream) {
                    stream.eatWhile(/[\w\$_\.]/);
                    return "meta";
                },

                // custom string handling to deal with triple-quoted strings and string interpolation
                "'": function(stream, state) {
                    return tokenDartString("'", stream, state, false);
                },
                '"': function(stream, state) {
                    return tokenDartString('"', stream, state, false);
                },
                r: function(stream, state) {
                    var peek = stream.peek();
                    if (peek == "'" || peek == '"') {
                        return tokenDartString(
                            stream.next(),
                            stream,
                            state,
                            true
                        );
                    }
                    return false;
                },

                "}": function(_stream, state) {
                    // "}" is end of interpolation, if interpolation stack is non-empty
                    if (sizeInterpolationStack(state) > 0) {
                        state.tokenize = popInterpolationStack(state);
                        return null;
                    }
                    return false;
                },

                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenNestedComment(1);
                    return state.tokenize(stream, state);
                },
                token: function(stream, _, style) {
                    if (style == "variable") {
                        // Assume uppercase symbols are classes
                        var isUpper = RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g");
                        if (isUpper.test(stream.current())) {
                            return "type";
                        }
                    }
                },
            },
        });

        exports.c = c;
        exports.ceylon = ceylon;
        exports.clike = clike;
        exports.cpp = cpp;
        exports.csharp = csharp;
        exports.dart = dart;
        exports.java = java;
        exports.kotlin = kotlin;
        exports.nesC = nesC;
        exports.objectiveC = objectiveC;
        exports.objectiveCpp = objectiveCpp;
        exports.scala = scala;
        exports.shader = shader;
        exports.squirrel = squirrel;
    }
    _M4();
    function _M5() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;

        function tokenString(stream, state) {
            var current,
                prev,
                found_var = false;
            while (
                !stream.eol() &&
                (current = stream.next()) != state.pending
            ) {
                if (current === "$" && prev != "\\" && state.pending == '"') {
                    found_var = true;
                    break;
                }
                prev = current;
            }
            if (found_var) {
                stream.backUp(1);
            }
            if (current == state.pending) {
                state.continueString = false;
            } else {
                state.continueString = true;
            }
            return "string";
        }

        function tokenize(stream, state) {
            var ch = stream.next();

            // Have we found a variable?
            if (ch === "$") {
                if (stream.match(variable_regex)) {
                    return "variableName.special";
                }
                return "variable";
            }
            // Should we still be looking for the end of a string?
            if (state.continueString) {
                // If so, go through the loop again
                stream.backUp(1);
                return tokenString(stream, state);
            }
            // Do we just have a function on our hands?
            // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
            if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
                stream.backUp(1);
                return "def";
            }
            if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            }
            // Have we found a string?
            if (ch == "'" || ch == '"') {
                // Store the type (single or double)
                state.pending = ch;
                // Perform the looping function to find the end
                return tokenString(stream, state);
            }
            if (ch == "(" || ch == ")") {
                return "bracket";
            }
            if (ch.match(/[0-9]/)) {
                return "number";
            }
            stream.eatWhile(/[\w-]/);
            return null;
        }
        const cmake = {
            startState: function() {
                var state = {};
                state.inDefinition = false;
                state.inInclude = false;
                state.continueString = false;
                state.pending = false;
                return state;
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return tokenize(stream, state);
            },
        };

        exports.cmake = cmake;
    }
    _M5();
    function _M6() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var atoms = ["false", "nil", "true"];
        var specialForms = [
            ".",
            "catch",
            "def",
            "do",
            "if",
            "monitor-enter",
            "monitor-exit",
            "new",
            "quote",
            "recur",
            "set!",
            "throw",
            "try",
            "var",
        ];
        var coreSymbols = [
            "*",
            "*'",
            "*1",
            "*2",
            "*3",
            "*agent*",
            "*allow-unresolved-vars*",
            "*assert*",
            "*clojure-version*",
            "*command-line-args*",
            "*compile-files*",
            "*compile-path*",
            "*compiler-options*",
            "*data-readers*",
            "*default-data-reader-fn*",
            "*e",
            "*err*",
            "*file*",
            "*flush-on-newline*",
            "*fn-loader*",
            "*in*",
            "*math-context*",
            "*ns*",
            "*out*",
            "*print-dup*",
            "*print-length*",
            "*print-level*",
            "*print-meta*",
            "*print-namespace-maps*",
            "*print-readably*",
            "*read-eval*",
            "*reader-resolver*",
            "*source-path*",
            "*suppress-read*",
            "*unchecked-math*",
            "*use-context-classloader*",
            "*verbose-defrecords*",
            "*warn-on-reflection*",
            "+",
            "+'",
            "-",
            "-'",
            "->",
            "->>",
            "->ArrayChunk",
            "->Eduction",
            "->Vec",
            "->VecNode",
            "->VecSeq",
            "-cache-protocol-fn",
            "-reset-methods",
            "..",
            "/",
            "<",
            "<=",
            "=",
            "==",
            ">",
            ">=",
            "EMPTY-NODE",
            "Inst",
            "StackTraceElement->vec",
            "Throwable->map",
            "accessor",
            "aclone",
            "add-classpath",
            "add-watch",
            "agent",
            "agent-error",
            "agent-errors",
            "aget",
            "alength",
            "alias",
            "all-ns",
            "alter",
            "alter-meta!",
            "alter-var-root",
            "amap",
            "ancestors",
            "and",
            "any?",
            "apply",
            "areduce",
            "array-map",
            "as->",
            "aset",
            "aset-boolean",
            "aset-byte",
            "aset-char",
            "aset-double",
            "aset-float",
            "aset-int",
            "aset-long",
            "aset-short",
            "assert",
            "assoc",
            "assoc!",
            "assoc-in",
            "associative?",
            "atom",
            "await",
            "await-for",
            "await1",
            "bases",
            "bean",
            "bigdec",
            "bigint",
            "biginteger",
            "binding",
            "bit-and",
            "bit-and-not",
            "bit-clear",
            "bit-flip",
            "bit-not",
            "bit-or",
            "bit-set",
            "bit-shift-left",
            "bit-shift-right",
            "bit-test",
            "bit-xor",
            "boolean",
            "boolean-array",
            "boolean?",
            "booleans",
            "bound-fn",
            "bound-fn*",
            "bound?",
            "bounded-count",
            "butlast",
            "byte",
            "byte-array",
            "bytes",
            "bytes?",
            "case",
            "cast",
            "cat",
            "char",
            "char-array",
            "char-escape-string",
            "char-name-string",
            "char?",
            "chars",
            "chunk",
            "chunk-append",
            "chunk-buffer",
            "chunk-cons",
            "chunk-first",
            "chunk-next",
            "chunk-rest",
            "chunked-seq?",
            "class",
            "class?",
            "clear-agent-errors",
            "clojure-version",
            "coll?",
            "comment",
            "commute",
            "comp",
            "comparator",
            "compare",
            "compare-and-set!",
            "compile",
            "complement",
            "completing",
            "concat",
            "cond",
            "cond->",
            "cond->>",
            "condp",
            "conj",
            "conj!",
            "cons",
            "constantly",
            "construct-proxy",
            "contains?",
            "count",
            "counted?",
            "create-ns",
            "create-struct",
            "cycle",
            "dec",
            "dec'",
            "decimal?",
            "declare",
            "dedupe",
            "default-data-readers",
            "definline",
            "definterface",
            "defmacro",
            "defmethod",
            "defmulti",
            "defn",
            "defn-",
            "defonce",
            "defprotocol",
            "defrecord",
            "defstruct",
            "deftype",
            "delay",
            "delay?",
            "deliver",
            "denominator",
            "deref",
            "derive",
            "descendants",
            "destructure",
            "disj",
            "disj!",
            "dissoc",
            "dissoc!",
            "distinct",
            "distinct?",
            "doall",
            "dorun",
            "doseq",
            "dosync",
            "dotimes",
            "doto",
            "double",
            "double-array",
            "double?",
            "doubles",
            "drop",
            "drop-last",
            "drop-while",
            "eduction",
            "empty",
            "empty?",
            "ensure",
            "ensure-reduced",
            "enumeration-seq",
            "error-handler",
            "error-mode",
            "eval",
            "even?",
            "every-pred",
            "every?",
            "ex-data",
            "ex-info",
            "extend",
            "extend-protocol",
            "extend-type",
            "extenders",
            "extends?",
            "false?",
            "ffirst",
            "file-seq",
            "filter",
            "filterv",
            "find",
            "find-keyword",
            "find-ns",
            "find-protocol-impl",
            "find-protocol-method",
            "find-var",
            "first",
            "flatten",
            "float",
            "float-array",
            "float?",
            "floats",
            "flush",
            "fn",
            "fn?",
            "fnext",
            "fnil",
            "for",
            "force",
            "format",
            "frequencies",
            "future",
            "future-call",
            "future-cancel",
            "future-cancelled?",
            "future-done?",
            "future?",
            "gen-class",
            "gen-interface",
            "gensym",
            "get",
            "get-in",
            "get-method",
            "get-proxy-class",
            "get-thread-bindings",
            "get-validator",
            "group-by",
            "halt-when",
            "hash",
            "hash-combine",
            "hash-map",
            "hash-ordered-coll",
            "hash-set",
            "hash-unordered-coll",
            "ident?",
            "identical?",
            "identity",
            "if-let",
            "if-not",
            "if-some",
            "ifn?",
            "import",
            "in-ns",
            "inc",
            "inc'",
            "indexed?",
            "init-proxy",
            "inst-ms",
            "inst-ms*",
            "inst?",
            "instance?",
            "int",
            "int-array",
            "int?",
            "integer?",
            "interleave",
            "intern",
            "interpose",
            "into",
            "into-array",
            "ints",
            "io!",
            "isa?",
            "iterate",
            "iterator-seq",
            "juxt",
            "keep",
            "keep-indexed",
            "key",
            "keys",
            "keyword",
            "keyword?",
            "last",
            "lazy-cat",
            "lazy-seq",
            "let",
            "letfn",
            "line-seq",
            "list",
            "list*",
            "list?",
            "load",
            "load-file",
            "load-reader",
            "load-string",
            "loaded-libs",
            "locking",
            "long",
            "long-array",
            "longs",
            "loop",
            "macroexpand",
            "macroexpand-1",
            "make-array",
            "make-hierarchy",
            "map",
            "map-entry?",
            "map-indexed",
            "map?",
            "mapcat",
            "mapv",
            "max",
            "max-key",
            "memfn",
            "memoize",
            "merge",
            "merge-with",
            "meta",
            "method-sig",
            "methods",
            "min",
            "min-key",
            "mix-collection-hash",
            "mod",
            "munge",
            "name",
            "namespace",
            "namespace-munge",
            "nat-int?",
            "neg-int?",
            "neg?",
            "newline",
            "next",
            "nfirst",
            "nil?",
            "nnext",
            "not",
            "not-any?",
            "not-empty",
            "not-every?",
            "not=",
            "ns",
            "ns-aliases",
            "ns-imports",
            "ns-interns",
            "ns-map",
            "ns-name",
            "ns-publics",
            "ns-refers",
            "ns-resolve",
            "ns-unalias",
            "ns-unmap",
            "nth",
            "nthnext",
            "nthrest",
            "num",
            "number?",
            "numerator",
            "object-array",
            "odd?",
            "or",
            "parents",
            "partial",
            "partition",
            "partition-all",
            "partition-by",
            "pcalls",
            "peek",
            "persistent!",
            "pmap",
            "pop",
            "pop!",
            "pop-thread-bindings",
            "pos-int?",
            "pos?",
            "pr",
            "pr-str",
            "prefer-method",
            "prefers",
            "primitives-classnames",
            "print",
            "print-ctor",
            "print-dup",
            "print-method",
            "print-simple",
            "print-str",
            "printf",
            "println",
            "println-str",
            "prn",
            "prn-str",
            "promise",
            "proxy",
            "proxy-call-with-super",
            "proxy-mappings",
            "proxy-name",
            "proxy-super",
            "push-thread-bindings",
            "pvalues",
            "qualified-ident?",
            "qualified-keyword?",
            "qualified-symbol?",
            "quot",
            "rand",
            "rand-int",
            "rand-nth",
            "random-sample",
            "range",
            "ratio?",
            "rational?",
            "rationalize",
            "re-find",
            "re-groups",
            "re-matcher",
            "re-matches",
            "re-pattern",
            "re-seq",
            "read",
            "read-line",
            "read-string",
            "reader-conditional",
            "reader-conditional?",
            "realized?",
            "record?",
            "reduce",
            "reduce-kv",
            "reduced",
            "reduced?",
            "reductions",
            "ref",
            "ref-history-count",
            "ref-max-history",
            "ref-min-history",
            "ref-set",
            "refer",
            "refer-clojure",
            "reify",
            "release-pending-sends",
            "rem",
            "remove",
            "remove-all-methods",
            "remove-method",
            "remove-ns",
            "remove-watch",
            "repeat",
            "repeatedly",
            "replace",
            "replicate",
            "require",
            "reset!",
            "reset-meta!",
            "reset-vals!",
            "resolve",
            "rest",
            "restart-agent",
            "resultset-seq",
            "reverse",
            "reversible?",
            "rseq",
            "rsubseq",
            "run!",
            "satisfies?",
            "second",
            "select-keys",
            "send",
            "send-off",
            "send-via",
            "seq",
            "seq?",
            "seqable?",
            "seque",
            "sequence",
            "sequential?",
            "set",
            "set-agent-send-executor!",
            "set-agent-send-off-executor!",
            "set-error-handler!",
            "set-error-mode!",
            "set-validator!",
            "set?",
            "short",
            "short-array",
            "shorts",
            "shuffle",
            "shutdown-agents",
            "simple-ident?",
            "simple-keyword?",
            "simple-symbol?",
            "slurp",
            "some",
            "some->",
            "some->>",
            "some-fn",
            "some?",
            "sort",
            "sort-by",
            "sorted-map",
            "sorted-map-by",
            "sorted-set",
            "sorted-set-by",
            "sorted?",
            "special-symbol?",
            "spit",
            "split-at",
            "split-with",
            "str",
            "string?",
            "struct",
            "struct-map",
            "subs",
            "subseq",
            "subvec",
            "supers",
            "swap!",
            "swap-vals!",
            "symbol",
            "symbol?",
            "sync",
            "tagged-literal",
            "tagged-literal?",
            "take",
            "take-last",
            "take-nth",
            "take-while",
            "test",
            "the-ns",
            "thread-bound?",
            "time",
            "to-array",
            "to-array-2d",
            "trampoline",
            "transduce",
            "transient",
            "tree-seq",
            "true?",
            "type",
            "unchecked-add",
            "unchecked-add-int",
            "unchecked-byte",
            "unchecked-char",
            "unchecked-dec",
            "unchecked-dec-int",
            "unchecked-divide-int",
            "unchecked-double",
            "unchecked-float",
            "unchecked-inc",
            "unchecked-inc-int",
            "unchecked-int",
            "unchecked-long",
            "unchecked-multiply",
            "unchecked-multiply-int",
            "unchecked-negate",
            "unchecked-negate-int",
            "unchecked-remainder-int",
            "unchecked-short",
            "unchecked-subtract",
            "unchecked-subtract-int",
            "underive",
            "unquote",
            "unquote-splicing",
            "unreduced",
            "unsigned-bit-shift-right",
            "update",
            "update-in",
            "update-proxy",
            "uri?",
            "use",
            "uuid?",
            "val",
            "vals",
            "var-get",
            "var-set",
            "var?",
            "vary-meta",
            "vec",
            "vector",
            "vector-of",
            "vector?",
            "volatile!",
            "volatile?",
            "vreset!",
            "vswap!",
            "when",
            "when-first",
            "when-let",
            "when-not",
            "when-some",
            "while",
            "with-bindings",
            "with-bindings*",
            "with-in-str",
            "with-loading-context",
            "with-local-vars",
            "with-meta",
            "with-open",
            "with-out-str",
            "with-precision",
            "with-redefs",
            "with-redefs-fn",
            "xml-seq",
            "zero?",
            "zipmap",
        ];
        var haveBodyParameter = [
            "->",
            "->>",
            "as->",
            "binding",
            "bound-fn",
            "case",
            "catch",
            "comment",
            "cond",
            "cond->",
            "cond->>",
            "condp",
            "def",
            "definterface",
            "defmethod",
            "defn",
            "defmacro",
            "defprotocol",
            "defrecord",
            "defstruct",
            "deftype",
            "do",
            "doseq",
            "dotimes",
            "doto",
            "extend",
            "extend-protocol",
            "extend-type",
            "fn",
            "for",
            "future",
            "if",
            "if-let",
            "if-not",
            "if-some",
            "let",
            "letfn",
            "locking",
            "loop",
            "ns",
            "proxy",
            "reify",
            "struct-map",
            "some->",
            "some->>",
            "try",
            "when",
            "when-first",
            "when-let",
            "when-not",
            "when-some",
            "while",
            "with-bindings",
            "with-bindings*",
            "with-in-str",
            "with-loading-context",
            "with-local-vars",
            "with-meta",
            "with-open",
            "with-out-str",
            "with-precision",
            "with-redefs",
            "with-redefs-fn",
        ];

        var atom = createLookupMap(atoms);
        var specialForm = createLookupMap(specialForms);
        var coreSymbol = createLookupMap(coreSymbols);
        var hasBodyParameter = createLookupMap(haveBodyParameter);
        var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
        var numberLiteral =
            /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
        var characterLiteral =
            /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;

        // simple-namespace := /^[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*/
        // simple-symbol    := /^(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)/
        // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>
        var qualifiedSymbol =
            /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;

        function base(stream, state) {
            if (stream.eatSpace() || stream.eat(",")) return ["space", null];
            if (stream.match(numberLiteral)) return [null, "number"];
            if (stream.match(characterLiteral)) return [null, "string.special"];
            if (stream.eat(/^"/))
                return (state.tokenize = inString)(stream, state);
            if (stream.eat(/^[(\[{]/)) return ["open", "bracket"];
            if (stream.eat(/^[)\]}]/)) return ["close", "bracket"];
            if (stream.eat(/^;/)) {
                stream.skipToEnd();
                return ["space", "comment"];
            }
            if (stream.eat(/^[#'@^`~]/)) return [null, "meta"];

            var matches = stream.match(qualifiedSymbol);
            var symbol = matches && matches[0];

            if (!symbol) {
                // advance stream by at least one character so we don't get stuck.
                stream.next();
                stream.eatWhile(function(c) {
                    return !is(c, delimiter);
                });
                return [null, "error"];
            }

            if (symbol === "comment" && state.lastToken === "(")
                return (state.tokenize = inComment)(stream, state);
            if (is(symbol, atom) || symbol.charAt(0) === ":")
                return ["symbol", "atom"];
            if (is(symbol, specialForm) || is(symbol, coreSymbol))
                return ["symbol", "keyword"];
            if (state.lastToken === "(") return ["symbol", "builtin"]; // other operator

            return ["symbol", "variable"];
        }

        function inString(stream, state) {
            var escaped = false,
                next;

            while ((next = stream.next())) {
                if (next === '"' && !escaped) {
                    state.tokenize = base;
                    break;
                }
                escaped = !escaped && next === "\\";
            }

            return [null, "string"];
        }

        function inComment(stream, state) {
            var parenthesisCount = 1;
            var next;

            while ((next = stream.next())) {
                if (next === ")") parenthesisCount--;
                if (next === "(") parenthesisCount++;
                if (parenthesisCount === 0) {
                    stream.backUp(1);
                    state.tokenize = base;
                    break;
                }
            }

            return ["space", "comment"];
        }

        function createLookupMap(words) {
            var obj = {};

            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;

            return obj;
        }

        function is(value, test) {
            if (test instanceof RegExp) return test.test(value);
            if (test instanceof Object) return test.propertyIsEnumerable(value);
        }

        const clojure = {
            startState: function() {
                return {
                    ctx: { prev: null, start: 0, indentTo: 0 },
                    lastToken: null,
                    tokenize: base,
                };
            },

            token: function(stream, state) {
                if (stream.sol() && typeof state.ctx.indentTo !== "number")
                    state.ctx.indentTo = state.ctx.start + 1;

                var typeStylePair = state.tokenize(stream, state);
                var type = typeStylePair[0];
                var style = typeStylePair[1];
                var current = stream.current();

                if (type !== "space") {
                    if (
                        state.lastToken === "(" &&
                        state.ctx.indentTo === null
                    ) {
                        if (type === "symbol" && is(current, hasBodyParameter))
                            state.ctx.indentTo =
                                state.ctx.start + stream.indentUnit;
                        else state.ctx.indentTo = "next";
                    } else if (state.ctx.indentTo === "next") {
                        state.ctx.indentTo = stream.column();
                    }

                    state.lastToken = current;
                }

                if (type === "open")
                    state.ctx = {
                        prev: state.ctx,
                        start: stream.column(),
                        indentTo: null,
                    };
                else if (type === "close")
                    state.ctx = state.ctx.prev || state.ctx;

                return style;
            },

            indent: function(state) {
                var i = state.ctx.indentTo;

                return typeof i === "number" ? i : state.ctx.start + 1;
            },

            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", '"'] },
                commentTokens: { line: ";;" },
                autocomplete: [].concat(atoms, specialForms, coreSymbols),
            },
        };

        exports.clojure = clojure;
    }
    _M6();
    function _M7() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var BUILTIN = "builtin",
            COMMENT = "comment",
            STRING = "string",
            ATOM = "atom",
            NUMBER = "number",
            KEYWORD = "keyword",
            MODTAG = "header",
            COBOLLINENUM = "def",
            PERIOD = "link";
        function makeKeywords(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        var atoms = makeKeywords(
            "TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES "
        );
        var keywords = makeKeywords(
            "ACCEPT ACCESS ACQUIRE ADD ADDRESS " +
            "ADVANCING AFTER ALIAS ALL ALPHABET " +
            "ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED " +
            "ALSO ALTER ALTERNATE AND ANY " +
            "ARE AREA AREAS ARITHMETIC ASCENDING " +
            "ASSIGN AT ATTRIBUTE AUTHOR AUTO " +
            "AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS " +
            "B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP " +
            "BEFORE BELL BINARY BIT BITS " +
            "BLANK BLINK BLOCK BOOLEAN BOTTOM " +
            "BY CALL CANCEL CD CF " +
            "CH CHARACTER CHARACTERS CLASS CLOCK-UNITS " +
            "CLOSE COBOL CODE CODE-SET COL " +
            "COLLATING COLUMN COMMA COMMIT COMMITMENT " +
            "COMMON COMMUNICATION COMP COMP-0 COMP-1 " +
            "COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 " +
            "COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 " +
            "COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 " +
            "COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE " +
            "CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS " +
            "CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS " +
            "CONVERTING COPY CORR CORRESPONDING COUNT " +
            "CRT CRT-UNDER CURRENCY CURRENT CURSOR " +
            "DATA DATE DATE-COMPILED DATE-WRITTEN DAY " +
            "DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION " +
            "DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS " +
            "DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE " +
            "DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING " +
            "DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED " +
            "DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION " +
            "DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 " +
            "DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 " +
            "DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION " +
            "DOWN DROP DUPLICATE DUPLICATES DYNAMIC " +
            "EBCDIC EGI EJECT ELSE EMI " +
            "EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. " +
            "END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY " +
            "END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY " +
            "END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN " +
            "END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT " +
            "END-UNSTRING END-WRITE END-XML ENTER ENTRY " +
            "ENVIRONMENT EOP EQUAL EQUALS ERASE " +
            "ERROR ESI EVALUATE EVERY EXCEEDS " +
            "EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL " +
            "EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL " +
            "FILE-STREAM FILES FILLER FINAL FIND " +
            "FINISH FIRST FOOTING FOR FOREGROUND-COLOR " +
            "FOREGROUND-COLOUR FORMAT FREE FROM FULL " +
            "FUNCTION GENERATE GET GIVING GLOBAL " +
            "GO GOBACK GREATER GROUP HEADING " +
            "HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL " +
            "ID IDENTIFICATION IF IN INDEX " +
            "INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 " +
            "INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED " +
            "INDIC INDICATE INDICATOR INDICATORS INITIAL " +
            "INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT " +
            "INSTALLATION INTO INVALID INVOKE IS " +
            "JUST JUSTIFIED KANJI KEEP KEY " +
            "LABEL LAST LD LEADING LEFT " +
            "LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY " +
            "LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER " +
            "LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE " +
            "LOCALE LOCALLY LOCK " +
            "MEMBER MEMORY MERGE MESSAGE METACLASS " +
            "MODE MODIFIED MODIFY MODULES MOVE " +
            "MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE " +
            "NEXT NO NO-ECHO NONE NOT " +
            "NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER " +
            "NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS " +
            "OF OFF OMITTED ON ONLY " +
            "OPEN OPTIONAL OR ORDER ORGANIZATION " +
            "OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL " +
            "PADDING PAGE PAGE-COUNTER PARSE PERFORM " +
            "PF PH PIC PICTURE PLUS " +
            "POINTER POSITION POSITIVE PREFIX PRESENT " +
            "PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES " +
            "PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID " +
            "PROMPT PROTECTED PURGE QUEUE QUOTE " +
            "QUOTES RANDOM RD READ READY " +
            "REALM RECEIVE RECONNECT RECORD RECORD-NAME " +
            "RECORDS RECURSIVE REDEFINES REEL REFERENCE " +
            "REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE " +
            "REMAINDER REMOVAL RENAMES REPEATED REPLACE " +
            "REPLACING REPORT REPORTING REPORTS REPOSITORY " +
            "REQUIRED RERUN RESERVE RESET RETAINING " +
            "RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO " +
            "REVERSED REWIND REWRITE RF RH " +
            "RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED " +
            "RUN SAME SCREEN SD SEARCH " +
            "SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT " +
            "SELECT SEND SENTENCE SEPARATE SEQUENCE " +
            "SEQUENTIAL SET SHARED SIGN SIZE " +
            "SKIP1 SKIP2 SKIP3 SORT SORT-MERGE " +
            "SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL " +
            "SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 " +
            "START STARTING STATUS STOP STORE " +
            "STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA " +
            "SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS " +
            "SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT " +
            "TABLE TALLYING TAPE TENANT TERMINAL " +
            "TERMINATE TEST TEXT THAN THEN " +
            "THROUGH THRU TIME TIMES TITLE " +
            "TO TOP TRAILING TRAILING-SIGN TRANSACTION " +
            "TYPE TYPEDEF UNDERLINE UNEQUAL UNIT " +
            "UNSTRING UNTIL UP UPDATE UPON " +
            "USAGE USAGE-MODE USE USING VALID " +
            "VALIDATE VALUE VALUES VARYING VLR " +
            "WAIT WHEN WHEN-COMPILED WITH WITHIN " +
            "WORDS WORKING-STORAGE WRITE XML XML-CODE " +
            "XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL "
        );

        var builtins = makeKeywords("- * ** / + < <= = > >= ");
        var tests = {
            digit: /\d/,
            digit_or_colon: /[\d:]/,
            hex: /[0-9a-f]/i,
            sign: /[+-]/,
            exponent: /e/i,
            keyword_char: /[^\s\(\[\;\)\]]/,
            symbol: /[\w*+\-]/,
        };
        function isNumber(ch, stream) {
            // hex
            if (ch === "0" && stream.eat(/x/i)) {
                stream.eatWhile(tests.hex);
                return true;
            }
            // leading sign
            if ((ch == "+" || ch == "-") && tests.digit.test(stream.peek())) {
                stream.eat(tests.sign);
                ch = stream.next();
            }
            if (tests.digit.test(ch)) {
                stream.eat(ch);
                stream.eatWhile(tests.digit);
                if ("." == stream.peek()) {
                    stream.eat(".");
                    stream.eatWhile(tests.digit);
                }
                if (stream.eat(tests.exponent)) {
                    stream.eat(tests.sign);
                    stream.eatWhile(tests.digit);
                }
                return true;
            }
            return false;
        }
        const cobol = {
            startState: function() {
                return {
                    indentStack: null,
                    indentation: 0,
                    mode: false,
                };
            },
            token: function(stream, state) {
                if (state.indentStack == null && stream.sol()) {
                    // update indentation, but only if indentStack is empty
                    state.indentation = 6; //stream.indentation();
                }
                // skip spaces
                if (stream.eatSpace()) {
                    return null;
                }
                var returnType = null;
                switch (state.mode) {
                    case "string": // multi-line string parsing mode
                        var next = false;
                        while ((next = stream.next()) != null) {
                            if (
                                (next == '"' || next == "'") &&
                                !stream.match(/['"]/, false)
                            ) {
                                state.mode = false;
                                break;
                            }
                        }
                        returnType = STRING; // continue on in string mode
                        break;
                    default: // default parsing mode
                        var ch = stream.next();
                        var col = stream.column();
                        if (col >= 0 && col <= 5) {
                            returnType = COBOLLINENUM;
                        } else if (col >= 72 && col <= 79) {
                            stream.skipToEnd();
                            returnType = MODTAG;
                        } else if (ch == "*" && col == 6) {
                            // comment
                            stream.skipToEnd(); // rest of the line is a comment
                            returnType = COMMENT;
                        } else if (ch == '"' || ch == "'") {
                            state.mode = "string";
                            returnType = STRING;
                        } else if (
                            ch == "'" &&
                            !tests.digit_or_colon.test(stream.peek())
                        ) {
                            returnType = ATOM;
                        } else if (ch == ".") {
                            returnType = PERIOD;
                        } else if (isNumber(ch, stream)) {
                            returnType = NUMBER;
                        } else {
                            if (stream.current().match(tests.symbol)) {
                                while (col < 71) {
                                    if (
                                        stream.eat(tests.symbol) === undefined
                                    ) {
                                        break;
                                    } else {
                                        col++;
                                    }
                                }
                            }
                            if (
                                keywords &&
                                keywords.propertyIsEnumerable(
                                    stream.current().toUpperCase()
                                )
                            ) {
                                returnType = KEYWORD;
                            } else if (
                                builtins &&
                                builtins.propertyIsEnumerable(
                                    stream.current().toUpperCase()
                                )
                            ) {
                                returnType = BUILTIN;
                            } else if (
                                atoms &&
                                atoms.propertyIsEnumerable(
                                    stream.current().toUpperCase()
                                )
                            ) {
                                returnType = ATOM;
                            } else returnType = null;
                        }
                }
                return returnType;
            },
            indent: function(state) {
                if (state.indentStack == null) return state.indentation;
                return state.indentStack.indent;
            },
        };

        exports.cobol = cobol;
    }
    _M7();
    function _M8() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var ERRORCLASS = "error";

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }

        var operators =
            /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
        var delimiters = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
        var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;
        var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;

        var wordOperators = wordRegexp([
            "and",
            "or",
            "not",
            "is",
            "isnt",
            "in",
            "instanceof",
            "typeof",
        ]);
        var indentKeywords = [
            "for",
            "while",
            "loop",
            "if",
            "unless",
            "else",
            "switch",
            "try",
            "catch",
            "finally",
            "class",
        ];
        var commonKeywords = [
            "break",
            "by",
            "continue",
            "debugger",
            "delete",
            "do",
            "in",
            "of",
            "new",
            "return",
            "then",
            "this",
            "@",
            "throw",
            "when",
            "until",
            "extends",
        ];

        var keywords = wordRegexp(indentKeywords.concat(commonKeywords));

        indentKeywords = wordRegexp(indentKeywords);

        var stringPrefixes = /^('{3}|\"{3}|['\"])/;
        var regexPrefixes = /^(\/{3}|\/)/;
        var commonConstants = [
            "Infinity",
            "NaN",
            "undefined",
            "null",
            "true",
            "false",
            "on",
            "off",
            "yes",
            "no",
        ];
        var constants = wordRegexp(commonConstants);

        // Tokenizers
        function tokenBase(stream, state) {
            // Handle scope changes
            if (stream.sol()) {
                if (state.scope.align === null) state.scope.align = false;
                var scopeOffset = state.scope.offset;
                if (stream.eatSpace()) {
                    var lineOffset = stream.indentation();
                    if (
                        lineOffset > scopeOffset &&
                        state.scope.type == "coffee"
                    ) {
                        return "indent";
                    } else if (lineOffset < scopeOffset) {
                        return "dedent";
                    }
                    return null;
                } else {
                    if (scopeOffset > 0) {
                        dedent(stream, state);
                    }
                }
            }
            if (stream.eatSpace()) {
                return null;
            }

            var ch = stream.peek();

            // Handle docco title comment (single line)
            if (stream.match("####")) {
                stream.skipToEnd();
                return "comment";
            }

            // Handle multi line comments
            if (stream.match("###")) {
                state.tokenize = longComment;
                return state.tokenize(stream, state);
            }

            // Single line comment
            if (ch === "#") {
                stream.skipToEnd();
                return "comment";
            }

            // Handle number literals
            if (stream.match(/^-?[0-9\.]/, false)) {
                var floatLiteral = false;
                // Floats
                if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
                    floatLiteral = true;
                }
                if (stream.match(/^-?\d+\.\d*/)) {
                    floatLiteral = true;
                }
                if (stream.match(/^-?\.\d+/)) {
                    floatLiteral = true;
                }

                if (floatLiteral) {
                    // prevent from getting extra . on 1..
                    if (stream.peek() == ".") {
                        stream.backUp(1);
                    }
                    return "number";
                }
                // Integers
                var intLiteral = false;
                // Hex
                if (stream.match(/^-?0x[0-9a-f]+/i)) {
                    intLiteral = true;
                }
                // Decimal
                if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
                    intLiteral = true;
                }
                // Zero by itself with no other piece of number.
                if (stream.match(/^-?0(?![\dx])/i)) {
                    intLiteral = true;
                }
                if (intLiteral) {
                    return "number";
                }
            }

            // Handle strings
            if (stream.match(stringPrefixes)) {
                state.tokenize = tokenFactory(
                    stream.current(),
                    false,
                    "string"
                );
                return state.tokenize(stream, state);
            }
            // Handle regex literals
            if (stream.match(regexPrefixes)) {
                if (stream.current() != "/" || stream.match(/^.*\//, false)) {
                    // prevent highlight of division
                    state.tokenize = tokenFactory(
                        stream.current(),
                        true,
                        "string.special"
                    );
                    return state.tokenize(stream, state);
                } else {
                    stream.backUp(1);
                }
            }

            // Handle operators and delimiters
            if (stream.match(operators) || stream.match(wordOperators)) {
                return "operator";
            }
            if (stream.match(delimiters)) {
                return "punctuation";
            }

            if (stream.match(constants)) {
                return "atom";
            }

            if (
                stream.match(atProp) ||
                (state.prop && stream.match(identifiers))
            ) {
                return "property";
            }

            if (stream.match(keywords)) {
                return "keyword";
            }

            if (stream.match(identifiers)) {
                return "variable";
            }

            // Handle non-detected items
            stream.next();
            return ERRORCLASS;
        }

        function tokenFactory(delimiter, singleline, outclass) {
            return function(stream, state) {
                while (!stream.eol()) {
                    stream.eatWhile(/[^'"\/\\]/);
                    if (stream.eat("\\")) {
                        stream.next();
                        if (singleline && stream.eol()) {
                            return outclass;
                        }
                    } else if (stream.match(delimiter)) {
                        state.tokenize = tokenBase;
                        return outclass;
                    } else {
                        stream.eat(/['"\/]/);
                    }
                }
                if (singleline) {
                    state.tokenize = tokenBase;
                }
                return outclass;
            };
        }

        function longComment(stream, state) {
            while (!stream.eol()) {
                stream.eatWhile(/[^#]/);
                if (stream.match("###")) {
                    state.tokenize = tokenBase;
                    break;
                }
                stream.eatWhile("#");
            }
            return "comment";
        }

        function indent(stream, state, type = "coffee") {
            var offset = 0,
                align = false,
                alignOffset = null;
            for (var scope = state.scope; scope; scope = scope.prev) {
                if (scope.type === "coffee" || scope.type == "}") {
                    offset = scope.offset + stream.indentUnit;
                    break;
                }
            }
            if (type !== "coffee") {
                align = null;
                alignOffset = stream.column() + stream.current().length;
            } else if (state.scope.align) {
                state.scope.align = false;
            }
            state.scope = {
                offset: offset,
                type: type,
                prev: state.scope,
                align: align,
                alignOffset: alignOffset,
            };
        }

        function dedent(stream, state) {
            if (!state.scope.prev) return;
            if (state.scope.type === "coffee") {
                var _indent = stream.indentation();
                var matched = false;
                for (var scope = state.scope; scope; scope = scope.prev) {
                    if (_indent === scope.offset) {
                        matched = true;
                        break;
                    }
                }
                if (!matched) {
                    return true;
                }
                while (state.scope.prev && state.scope.offset !== _indent) {
                    state.scope = state.scope.prev;
                }
                return false;
            } else {
                state.scope = state.scope.prev;
                return false;
            }
        }

        function tokenLexer(stream, state) {
            var style = state.tokenize(stream, state);
            var current = stream.current();

            // Handle scope changes.
            if (current === "return") {
                state.dedent = true;
            }
            if (
                ((current === "->" || current === "=>") && stream.eol()) ||
                style === "indent"
            ) {
                indent(stream, state);
            }
            var delimiter_index = "[({".indexOf(current);
            if (delimiter_index !== -1) {
                indent(
                    stream,
                    state,
                    "])}".slice(delimiter_index, delimiter_index + 1)
                );
            }
            if (indentKeywords.exec(current)) {
                indent(stream, state);
            }
            if (current == "then") {
                dedent(stream, state);
            }

            if (style === "dedent") {
                if (dedent(stream, state)) {
                    return ERRORCLASS;
                }
            }
            delimiter_index = "])}".indexOf(current);
            if (delimiter_index !== -1) {
                while (state.scope.type == "coffee" && state.scope.prev)
                    state.scope = state.scope.prev;
                if (state.scope.type == current) state.scope = state.scope.prev;
            }
            if (state.dedent && stream.eol()) {
                if (state.scope.type == "coffee" && state.scope.prev)
                    state.scope = state.scope.prev;
                state.dedent = false;
            }

            return style == "indent" || style == "dedent" ? null : style;
        }

        const coffeeScript = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    scope: {
                        offset: 0,
                        type: "coffee",
                        prev: null,
                        align: false,
                    },
                    prop: false,
                    dedent: 0,
                };
            },

            token: function(stream, state) {
                var fillAlign = state.scope.align === null && state.scope;
                if (fillAlign && stream.sol()) fillAlign.align = false;

                var style = tokenLexer(stream, state);
                if (style && style != "comment") {
                    if (fillAlign) fillAlign.align = true;
                    state.prop =
                        style == "punctuation" && stream.current() == ".";
                }

                return style;
            },

            indent: function(state, text) {
                if (state.tokenize != tokenBase) return 0;
                var scope = state.scope;
                var closer = text && "])}".indexOf(text.charAt(0)) > -1;
                if (closer)
                    while (scope.type == "coffee" && scope.prev)
                        scope = scope.prev;
                var closes = closer && scope.type === text.charAt(0);
                if (scope.align) return scope.alignOffset - (closes ? 1 : 0);
                else return (closes ? scope.prev : scope).offset;
            },

            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.coffeeScript = coffeeScript;
    }
    _M8();
    function _M9() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var specialForm =
            /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
        var assumeBody =
            /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
        var numLiteral =
            /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
        var symbol = /[^\s'`,@()\[\]";]/;
        var type;

        function readSym(stream) {
            var ch;
            while ((ch = stream.next())) {
                if (ch == "\\") stream.next();
                else if (!symbol.test(ch)) {
                    stream.backUp(1);
                    break;
                }
            }
            return stream.current();
        }

        function base(stream, state) {
            if (stream.eatSpace()) {
                type = "ws";
                return null;
            }
            if (stream.match(numLiteral)) return "number";
            var ch = stream.next();
            if (ch == "\\") ch = stream.next();

            if (ch == '"') return (state.tokenize = inString)(stream, state);
            else if (ch == "(") {
                type = "open";
                return "bracket";
            } else if (ch == ")" || ch == "]") {
                type = "close";
                return "bracket";
            } else if (ch == ";") {
                stream.skipToEnd();
                type = "ws";
                return "comment";
            } else if (/['`,@]/.test(ch)) return null;
            else if (ch == "|") {
                if (stream.skipTo("|")) {
                    stream.next();
                    return "variableName";
                } else {
                    stream.skipToEnd();
                    return "error";
                }
            } else if (ch == "#") {
                var ch = stream.next();
                if (ch == "(") {
                    type = "open";
                    return "bracket";
                } else if (/[+\-=\.']/.test(ch)) return null;
                else if (/\d/.test(ch) && stream.match(/^\d*#/)) return null;
                else if (ch == "|")
                    return (state.tokenize = inComment)(stream, state);
                else if (ch == ":") {
                    readSym(stream);
                    return "meta";
                } else if (ch == "\\") {
                    stream.next();
                    readSym(stream);
                    return "string.special";
                } else return "error";
            } else {
                var name = readSym(stream);
                if (name == ".") return null;
                type = "symbol";
                if (name == "nil" || name == "t" || name.charAt(0) == ":")
                    return "atom";
                if (
                    state.lastType == "open" &&
                    (specialForm.test(name) || assumeBody.test(name))
                )
                    return "keyword";
                if (name.charAt(0) == "&") return "variableName.special";
                return "variableName";
            }
        }

        function inString(stream, state) {
            var escaped = false,
                next;
            while ((next = stream.next())) {
                if (next == '"' && !escaped) {
                    state.tokenize = base;
                    break;
                }
                escaped = !escaped && next == "\\";
            }
            return "string";
        }

        function inComment(stream, state) {
            var next, last;
            while ((next = stream.next())) {
                if (next == "#" && last == "|") {
                    state.tokenize = base;
                    break;
                }
                last = next;
            }
            type = "ws";
            return "comment";
        }

        const commonLisp = {
            startState: function() {
                return {
                    ctx: { prev: null, start: 0, indentTo: 0 },
                    lastType: null,
                    tokenize: base,
                };
            },

            token: function(stream, state) {
                if (stream.sol() && typeof state.ctx.indentTo != "number")
                    state.ctx.indentTo = state.ctx.start + 1;

                type = null;
                var style = state.tokenize(stream, state);
                if (type != "ws") {
                    if (state.ctx.indentTo == null) {
                        if (
                            type == "symbol" &&
                            assumeBody.test(stream.current())
                        )
                            state.ctx.indentTo =
                                state.ctx.start + stream.indentUnit;
                        else state.ctx.indentTo = "next";
                    } else if (state.ctx.indentTo == "next") {
                        state.ctx.indentTo = stream.column();
                    }
                    state.lastType = type;
                }
                if (type == "open")
                    state.ctx = {
                        prev: state.ctx,
                        start: stream.column(),
                        indentTo: null,
                    };
                else if (type == "close")
                    state.ctx = state.ctx.prev || state.ctx;
                return style;
            },

            indent: function(state) {
                var i = state.ctx.indentTo;
                return typeof i == "number" ? i : state.ctx.start + 1;
            },

            languageData: {
                commentTokens: {
                    line: ";;",
                    block: { open: "#|", close: "|#" },
                },
                closeBrackets: { brackets: ["(", "[", "{", '"'] },
            },
        };

        exports.commonLisp = commonLisp;
    }
    _M9();
    function _M10() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegExp(words, end) {
            return new RegExp(
                (end ? "" : "^") +
                "(?:" +
                words.join("|") +
                ")" +
                (end ? "$" : "\\b")
            );
        }

        function chain(tokenize, stream, state) {
            state.tokenize.push(tokenize);
            return tokenize(stream, state);
        }

        var operators = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
        var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
        var indexingOperators = /^(?:\[\][?=]?)/;
        var anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
        var idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
        var types = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
        var keywords = wordRegExp([
            "abstract",
            "alias",
            "as",
            "asm",
            "begin",
            "break",
            "case",
            "class",
            "def",
            "do",
            "else",
            "elsif",
            "end",
            "ensure",
            "enum",
            "extend",
            "for",
            "fun",
            "if",
            "include",
            "instance_sizeof",
            "lib",
            "macro",
            "module",
            "next",
            "of",
            "out",
            "pointerof",
            "private",
            "protected",
            "rescue",
            "return",
            "require",
            "select",
            "sizeof",
            "struct",
            "super",
            "then",
            "type",
            "typeof",
            "uninitialized",
            "union",
            "unless",
            "until",
            "when",
            "while",
            "with",
            "yield",
            "__DIR__",
            "__END_LINE__",
            "__FILE__",
            "__LINE__",
        ]);
        var atomWords = wordRegExp(["true", "false", "nil", "self"]);
        var indentKeywordsArray = [
            "def",
            "fun",
            "macro",
            "class",
            "module",
            "struct",
            "lib",
            "enum",
            "union",
            "do",
            "for",
        ];
        var indentKeywords = wordRegExp(indentKeywordsArray);
        var indentExpressionKeywordsArray = [
            "if",
            "unless",
            "case",
            "while",
            "until",
            "begin",
            "then",
        ];
        var indentExpressionKeywords = wordRegExp(
            indentExpressionKeywordsArray
        );
        var dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
        var dedentKeywords = wordRegExp(dedentKeywordsArray);
        var dedentPunctualsArray = ["\\)", "\\}", "\\]"];
        var dedentPunctuals = new RegExp(
            "^(?:" + dedentPunctualsArray.join("|") + ")$"
        );
        var nextTokenizer = {
            def: tokenFollowIdent,
            fun: tokenFollowIdent,
            macro: tokenMacroDef,
            class: tokenFollowType,
            module: tokenFollowType,
            struct: tokenFollowType,
            lib: tokenFollowType,
            enum: tokenFollowType,
            union: tokenFollowType,
        };
        var matching = { "[": "]", "{": "}", "(": ")", "<": ">" };

        function tokenBase(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            // Macros
            if (state.lastToken != "\\" && stream.match("{%", false)) {
                return chain(tokenMacro("%", "%"), stream, state);
            }

            if (state.lastToken != "\\" && stream.match("{{", false)) {
                return chain(tokenMacro("{", "}"), stream, state);
            }

            // Comments
            if (stream.peek() == "#") {
                stream.skipToEnd();
                return "comment";
            }

            // Variables and keywords
            var matched;
            if (stream.match(idents)) {
                stream.eat(/[?!]/);

                matched = stream.current();
                if (stream.eat(":")) {
                    return "atom";
                } else if (state.lastToken == ".") {
                    return "property";
                } else if (keywords.test(matched)) {
                    if (indentKeywords.test(matched)) {
                        if (
                            !(
                                matched == "fun" &&
                                state.blocks.indexOf("lib") >= 0
                            ) &&
                            !(matched == "def" && state.lastToken == "abstract")
                        ) {
                            state.blocks.push(matched);
                            state.currentIndent += 1;
                        }
                    } else if (
                        (state.lastStyle == "operator" || !state.lastStyle) &&
                        indentExpressionKeywords.test(matched)
                    ) {
                        state.blocks.push(matched);
                        state.currentIndent += 1;
                    } else if (matched == "end") {
                        state.blocks.pop();
                        state.currentIndent -= 1;
                    }

                    if (nextTokenizer.hasOwnProperty(matched)) {
                        state.tokenize.push(nextTokenizer[matched]);
                    }

                    return "keyword";
                } else if (atomWords.test(matched)) {
                    return "atom";
                }

                return "variable";
            }

            // Class variables and instance variables
            // or attributes
            if (stream.eat("@")) {
                if (stream.peek() == "[") {
                    return chain(tokenNest("[", "]", "meta"), stream, state);
                }

                stream.eat("@");
                stream.match(idents) || stream.match(types);
                return "propertyName";
            }

            // Constants and types
            if (stream.match(types)) {
                return "tag";
            }

            // Symbols or ':' operator
            if (stream.eat(":")) {
                if (stream.eat('"')) {
                    return chain(tokenQuote('"', "atom", false), stream, state);
                } else if (
                    stream.match(idents) ||
                    stream.match(types) ||
                    stream.match(operators) ||
                    stream.match(conditionalOperators) ||
                    stream.match(indexingOperators)
                ) {
                    return "atom";
                }
                stream.eat(":");
                return "operator";
            }

            // Strings
            if (stream.eat('"')) {
                return chain(tokenQuote('"', "string", true), stream, state);
            }

            // Strings or regexps or macro variables or '%' operator
            if (stream.peek() == "%") {
                var style = "string";
                var embed = true;
                var delim;

                if (stream.match("%r")) {
                    // Regexps
                    style = "string.special";
                    delim = stream.next();
                } else if (stream.match("%w")) {
                    embed = false;
                    delim = stream.next();
                } else if (stream.match("%q")) {
                    embed = false;
                    delim = stream.next();
                } else {
                    if ((delim = stream.match(/^%([^\w\s=])/))) {
                        delim = delim[1];
                    } else if (
                        stream.match(
                            /^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/
                        )
                    ) {
                        // Macro variables
                        return "meta";
                    } else if (stream.eat("%")) {
                        // '%' operator
                        return "operator";
                    }
                }

                if (matching.hasOwnProperty(delim)) {
                    delim = matching[delim];
                }
                return chain(tokenQuote(delim, style, embed), stream, state);
            }

            // Here Docs
            if ((matched = stream.match(/^<<-('?)([A-Z]\w*)\1/))) {
                return chain(
                    tokenHereDoc(matched[2], !matched[1]),
                    stream,
                    state
                );
            }

            // Characters
            if (stream.eat("'")) {
                stream.match(
                    /^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/
                );
                stream.eat("'");
                return "atom";
            }

            // Numbers
            if (stream.eat("0")) {
                if (stream.eat("x")) {
                    stream.match(/^[0-9a-fA-F_]+/);
                } else if (stream.eat("o")) {
                    stream.match(/^[0-7_]+/);
                } else if (stream.eat("b")) {
                    stream.match(/^[01_]+/);
                }
                return "number";
            }

            if (stream.eat(/^\d/)) {
                stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
                return "number";
            }

            // Operators
            if (stream.match(operators)) {
                stream.eat("="); // Operators can follow assign symbol.
                return "operator";
            }

            if (
                stream.match(conditionalOperators) ||
                stream.match(anotherOperators)
            ) {
                return "operator";
            }

            // Parens and braces
            if ((matched = stream.match(/[({[]/, false))) {
                matched = matched[0];
                return chain(
                    tokenNest(matched, matching[matched], null),
                    stream,
                    state
                );
            }

            // Escapes
            if (stream.eat("\\")) {
                stream.next();
                return "meta";
            }

            stream.next();
            return null;
        }

        function tokenNest(begin, end, style, started) {
            return function(stream, state) {
                if (!started && stream.match(begin)) {
                    state.tokenize[state.tokenize.length - 1] = tokenNest(
                        begin,
                        end,
                        style,
                        true
                    );
                    state.currentIndent += 1;
                    return style;
                }

                var nextStyle = tokenBase(stream, state);
                if (stream.current() === end) {
                    state.tokenize.pop();
                    state.currentIndent -= 1;
                    nextStyle = style;
                }

                return nextStyle;
            };
        }

        function tokenMacro(begin, end, started) {
            return function(stream, state) {
                if (!started && stream.match("{" + begin)) {
                    state.currentIndent += 1;
                    state.tokenize[state.tokenize.length - 1] = tokenMacro(
                        begin,
                        end,
                        true
                    );
                    return "meta";
                }

                if (stream.match(end + "}")) {
                    state.currentIndent -= 1;
                    state.tokenize.pop();
                    return "meta";
                }

                return tokenBase(stream, state);
            };
        }

        function tokenMacroDef(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            var matched;
            if ((matched = stream.match(idents))) {
                if (matched == "def") {
                    return "keyword";
                }
                stream.eat(/[?!]/);
            }

            state.tokenize.pop();
            return "def";
        }

        function tokenFollowIdent(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            if (stream.match(idents)) {
                stream.eat(/[!?]/);
            } else {
                stream.match(operators) ||
                    stream.match(conditionalOperators) ||
                    stream.match(indexingOperators);
            }
            state.tokenize.pop();
            return "def";
        }

        function tokenFollowType(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            stream.match(types);
            state.tokenize.pop();
            return "def";
        }

        function tokenQuote(end, style, embed) {
            return function(stream, state) {
                var escaped = false;

                while (stream.peek()) {
                    if (!escaped) {
                        if (stream.match("{%", false)) {
                            state.tokenize.push(tokenMacro("%", "%"));
                            return style;
                        }

                        if (stream.match("{{", false)) {
                            state.tokenize.push(tokenMacro("{", "}"));
                            return style;
                        }

                        if (embed && stream.match("#{", false)) {
                            state.tokenize.push(tokenNest("#{", "}", "meta"));
                            return style;
                        }

                        var ch = stream.next();

                        if (ch == end) {
                            state.tokenize.pop();
                            return style;
                        }

                        escaped = embed && ch == "\\";
                    } else {
                        stream.next();
                        escaped = false;
                    }
                }

                return style;
            };
        }

        function tokenHereDoc(phrase, embed) {
            return function(stream, state) {
                if (stream.sol()) {
                    stream.eatSpace();
                    if (stream.match(phrase)) {
                        state.tokenize.pop();
                        return "string";
                    }
                }

                var escaped = false;
                while (stream.peek()) {
                    if (!escaped) {
                        if (stream.match("{%", false)) {
                            state.tokenize.push(tokenMacro("%", "%"));
                            return "string";
                        }

                        if (stream.match("{{", false)) {
                            state.tokenize.push(tokenMacro("{", "}"));
                            return "string";
                        }

                        if (embed && stream.match("#{", false)) {
                            state.tokenize.push(tokenNest("#{", "}", "meta"));
                            return "string";
                        }

                        escaped = embed && stream.next() == "\\";
                    } else {
                        stream.next();
                        escaped = false;
                    }
                }

                return "string";
            };
        }

        const crystal = {
            startState: function() {
                return {
                    tokenize: [tokenBase],
                    currentIndent: 0,
                    lastToken: null,
                    lastStyle: null,
                    blocks: [],
                };
            },

            token: function(stream, state) {
                var style = state.tokenize[state.tokenize.length - 1](
                    stream,
                    state
                );
                var token = stream.current();

                if (style && style != "comment") {
                    state.lastToken = token;
                    state.lastStyle = style;
                }

                return style;
            },

            indent: function(state, textAfter, cx) {
                textAfter = textAfter.replace(
                    /^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g,
                    ""
                );

                if (
                    dedentKeywords.test(textAfter) ||
                    dedentPunctuals.test(textAfter)
                ) {
                    return cx.unit * (state.currentIndent - 1);
                }

                return cx.unit * state.currentIndent;
            },

            languageData: {
                indentOnInput: wordRegExp(
                    dedentPunctualsArray.concat(dedentKeywordsArray),
                    true
                ),
                commentTokens: { line: "#" },
            },
        };

        exports.crystal = crystal;
    }
    _M10();
    function _M11() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkCSS(parserConfig) {
            parserConfig = { ...defaults, ...parserConfig };
            var inline = parserConfig.inline;

            var tokenHooks = parserConfig.tokenHooks,
                documentTypes = parserConfig.documentTypes || {},
                mediaTypes = parserConfig.mediaTypes || {},
                mediaFeatures = parserConfig.mediaFeatures || {},
                mediaValueKeywords = parserConfig.mediaValueKeywords || {},
                propertyKeywords = parserConfig.propertyKeywords || {},
                nonStandardPropertyKeywords =
                    parserConfig.nonStandardPropertyKeywords || {},
                fontProperties = parserConfig.fontProperties || {},
                counterDescriptors = parserConfig.counterDescriptors || {},
                colorKeywords = parserConfig.colorKeywords || {},
                valueKeywords = parserConfig.valueKeywords || {},
                allowNested = parserConfig.allowNested,
                lineComment = parserConfig.lineComment,
                supportsAtComponent = parserConfig.supportsAtComponent === true,
                highlightNonStandardPropertyKeywords =
                    parserConfig.highlightNonStandardPropertyKeywords !== false;

            var type, override;
            function ret(style, tp) {
                type = tp;
                return style;
            }

            // Tokenizers

            function tokenBase(stream, state) {
                var ch = stream.next();
                if (tokenHooks[ch]) {
                    var result = tokenHooks[ch](stream, state);
                    if (result !== false) return result;
                }
                if (ch == "@") {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("def", stream.current());
                } else if (
                    ch == "=" ||
                    ((ch == "~" || ch == "|") && stream.eat("="))
                ) {
                    return ret(null, "compare");
                } else if (ch == '"' || ch == "'") {
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                } else if (ch == "#") {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("atom", "hash");
                } else if (ch == "!") {
                    stream.match(/^\s*\w*/);
                    return ret("keyword", "important");
                } else if (/\d/.test(ch) || (ch == "." && stream.eat(/\d/))) {
                    stream.eatWhile(/[\w.%]/);
                    return ret("number", "unit");
                } else if (ch === "-") {
                    if (/[\d.]/.test(stream.peek())) {
                        stream.eatWhile(/[\w.%]/);
                        return ret("number", "unit");
                    } else if (stream.match(/^-[\w\\\-]*/)) {
                        stream.eatWhile(/[\w\\\-]/);
                        if (stream.match(/^\s*:/, false))
                            return ret("def", "variable-definition");
                        return ret("variableName", "variable");
                    } else if (stream.match(/^\w+-/)) {
                        return ret("meta", "meta");
                    }
                } else if (/[,+>*\/]/.test(ch)) {
                    return ret(null, "select-op");
                } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
                    return ret("qualifier", "qualifier");
                } else if (/[:;{}\[\]\(\)]/.test(ch)) {
                    return ret(null, ch);
                } else if (stream.match(/^[\w-.]+(?=\()/)) {
                    if (
                        /^(url(-prefix)?|domain|regexp)$/i.test(
                            stream.current()
                        )
                    ) {
                        state.tokenize = tokenParenthesized;
                    }
                    return ret("variableName.function", "variable");
                } else if (/[\w\\\-]/.test(ch)) {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("property", "word");
                } else {
                    return ret(null, null);
                }
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        ch;
                    while ((ch = stream.next()) != null) {
                        if (ch == quote && !escaped) {
                            if (quote == ")") stream.backUp(1);
                            break;
                        }
                        escaped = !escaped && ch == "\\";
                    }
                    if (ch == quote || (!escaped && quote != ")"))
                        state.tokenize = null;
                    return ret("string", "string");
                };
            }

            function tokenParenthesized(stream, state) {
                stream.next(); // Must be '('
                if (!stream.match(/^\s*[\"\')]/, false))
                    state.tokenize = tokenString(")");
                else state.tokenize = null;
                return ret(null, "(");
            }

            // Context management

            function Context(type, indent, prev) {
                this.type = type;
                this.indent = indent;
                this.prev = prev;
            }

            function pushContext(state, stream, type, indent) {
                state.context = new Context(
                    type,
                    stream.indentation() +
                    (indent === false ? 0 : stream.indentUnit),
                    state.context
                );
                return type;
            }

            function popContext(state) {
                if (state.context.prev) state.context = state.context.prev;
                return state.context.type;
            }

            function pass(type, stream, state) {
                return states[state.context.type](type, stream, state);
            }
            function popAndPass(type, stream, state, n) {
                for (var i = n || 1; i > 0; i--)
                    state.context = state.context.prev;
                return pass(type, stream, state);
            }

            // Parser

            function wordAsValue(stream) {
                var word = stream.current().toLowerCase();
                if (valueKeywords.hasOwnProperty(word)) override = "atom";
                else if (colorKeywords.hasOwnProperty(word))
                    override = "keyword";
                else override = "variable";
            }

            var states = {};

            states.top = function(type, stream, state) {
                if (type == "{") {
                    return pushContext(state, stream, "block");
                } else if (type == "}" && state.context.prev) {
                    return popContext(state);
                } else if (supportsAtComponent && /@component/i.test(type)) {
                    return pushContext(state, stream, "atComponentBlock");
                } else if (/^@(-moz-)?document$/i.test(type)) {
                    return pushContext(state, stream, "documentTypes");
                } else if (
                    /^@(media|supports|(-moz-)?document|import)$/i.test(type)
                ) {
                    return pushContext(state, stream, "atBlock");
                } else if (/^@(font-face|counter-style)/i.test(type)) {
                    state.stateArg = type;
                    return "restricted_atBlock_before";
                } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {
                    return "keyframes";
                } else if (type && type.charAt(0) == "@") {
                    return pushContext(state, stream, "at");
                } else if (type == "hash") {
                    override = "builtin";
                } else if (type == "word") {
                    override = "tag";
                } else if (type == "variable-definition") {
                    return "maybeprop";
                } else if (type == "interpolation") {
                    return pushContext(state, stream, "interpolation");
                } else if (type == ":") {
                    return "pseudo";
                } else if (allowNested && type == "(") {
                    return pushContext(state, stream, "parens");
                }
                return state.context.type;
            };

            states.block = function(type, stream, state) {
                if (type == "word") {
                    var word = stream.current().toLowerCase();
                    if (propertyKeywords.hasOwnProperty(word)) {
                        override = "property";
                        return "maybeprop";
                    } else if (
                        nonStandardPropertyKeywords.hasOwnProperty(word)
                    ) {
                        override = highlightNonStandardPropertyKeywords
                            ? "string.special"
                            : "property";
                        return "maybeprop";
                    } else if (allowNested) {
                        override = stream.match(/^\s*:(?:\s|$)/, false)
                            ? "property"
                            : "tag";
                        return "block";
                    } else {
                        override = "error";
                        return "maybeprop";
                    }
                } else if (type == "meta") {
                    return "block";
                } else if (
                    !allowNested &&
                    (type == "hash" || type == "qualifier")
                ) {
                    override = "error";
                    return "block";
                } else {
                    return states.top(type, stream, state);
                }
            };

            states.maybeprop = function(type, stream, state) {
                if (type == ":") return pushContext(state, stream, "prop");
                return pass(type, stream, state);
            };

            states.prop = function(type, stream, state) {
                if (type == ";") return popContext(state);
                if (type == "{" && allowNested)
                    return pushContext(state, stream, "propBlock");
                if (type == "}" || type == "{")
                    return popAndPass(type, stream, state);
                if (type == "(") return pushContext(state, stream, "parens");

                if (
                    type == "hash" &&
                    !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(
                        stream.current()
                    )
                ) {
                    override = "error";
                } else if (type == "word") {
                    wordAsValue(stream);
                } else if (type == "interpolation") {
                    return pushContext(state, stream, "interpolation");
                }
                return "prop";
            };

            states.propBlock = function(type, _stream, state) {
                if (type == "}") return popContext(state);
                if (type == "word") {
                    override = "property";
                    return "maybeprop";
                }
                return state.context.type;
            };

            states.parens = function(type, stream, state) {
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state);
                if (type == ")") return popContext(state);
                if (type == "(") return pushContext(state, stream, "parens");
                if (type == "interpolation")
                    return pushContext(state, stream, "interpolation");
                if (type == "word") wordAsValue(stream);
                return "parens";
            };

            states.pseudo = function(type, stream, state) {
                if (type == "meta") return "pseudo";

                if (type == "word") {
                    override = "variableName.constant";
                    return state.context.type;
                }
                return pass(type, stream, state);
            };

            states.documentTypes = function(type, stream, state) {
                if (
                    type == "word" &&
                    documentTypes.hasOwnProperty(stream.current())
                ) {
                    override = "tag";
                    return state.context.type;
                } else {
                    return states.atBlock(type, stream, state);
                }
            };

            states.atBlock = function(type, stream, state) {
                if (type == "(")
                    return pushContext(state, stream, "atBlock_parens");
                if (type == "}" || type == ";")
                    return popAndPass(type, stream, state);
                if (type == "{")
                    return (
                        popContext(state) &&
                        pushContext(
                            state,
                            stream,
                            allowNested ? "block" : "top"
                        )
                    );

                if (type == "interpolation")
                    return pushContext(state, stream, "interpolation");

                if (type == "word") {
                    var word = stream.current().toLowerCase();
                    if (
                        word == "only" ||
                        word == "not" ||
                        word == "and" ||
                        word == "or"
                    )
                        override = "keyword";
                    else if (mediaTypes.hasOwnProperty(word))
                        override = "attribute";
                    else if (mediaFeatures.hasOwnProperty(word))
                        override = "property";
                    else if (mediaValueKeywords.hasOwnProperty(word))
                        override = "keyword";
                    else if (propertyKeywords.hasOwnProperty(word))
                        override = "property";
                    else if (nonStandardPropertyKeywords.hasOwnProperty(word))
                        override = highlightNonStandardPropertyKeywords
                            ? "string.special"
                            : "property";
                    else if (valueKeywords.hasOwnProperty(word))
                        override = "atom";
                    else if (colorKeywords.hasOwnProperty(word))
                        override = "keyword";
                    else override = "error";
                }
                return state.context.type;
            };

            states.atComponentBlock = function(type, stream, state) {
                if (type == "}") return popAndPass(type, stream, state);
                if (type == "{")
                    return (
                        popContext(state) &&
                        pushContext(
                            state,
                            stream,
                            allowNested ? "block" : "top",
                            false
                        )
                    );
                if (type == "word") override = "error";
                return state.context.type;
            };

            states.atBlock_parens = function(type, stream, state) {
                if (type == ")") return popContext(state);
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state, 2);
                return states.atBlock(type, stream, state);
            };

            states.restricted_atBlock_before = function(type, stream, state) {
                if (type == "{")
                    return pushContext(state, stream, "restricted_atBlock");
                if (type == "word" && state.stateArg == "@counter-style") {
                    override = "variable";
                    return "restricted_atBlock_before";
                }
                return pass(type, stream, state);
            };

            states.restricted_atBlock = function(type, stream, state) {
                if (type == "}") {
                    state.stateArg = null;
                    return popContext(state);
                }
                if (type == "word") {
                    if (
                        (state.stateArg == "@font-face" &&
                            !fontProperties.hasOwnProperty(
                                stream.current().toLowerCase()
                            )) ||
                        (state.stateArg == "@counter-style" &&
                            !counterDescriptors.hasOwnProperty(
                                stream.current().toLowerCase()
                            ))
                    )
                        override = "error";
                    else override = "property";
                    return "maybeprop";
                }
                return "restricted_atBlock";
            };

            states.keyframes = function(type, stream, state) {
                if (type == "word") {
                    override = "variable";
                    return "keyframes";
                }
                if (type == "{") return pushContext(state, stream, "top");
                return pass(type, stream, state);
            };

            states.at = function(type, stream, state) {
                if (type == ";") return popContext(state);
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state);
                if (type == "word") override = "tag";
                else if (type == "hash") override = "builtin";
                return "at";
            };

            states.interpolation = function(type, stream, state) {
                if (type == "}") return popContext(state);
                if (type == "{" || type == ";")
                    return popAndPass(type, stream, state);
                if (type == "word") override = "variable";
                else if (type != "variable" && type != "(" && type != ")")
                    override = "error";
                return "interpolation";
            };

            return {
                startState: function() {
                    return {
                        tokenize: null,
                        state: inline ? "block" : "top",
                        stateArg: null,
                        context: new Context(inline ? "block" : "top", 0, null),
                    };
                },

                token: function(stream, state) {
                    if (!state.tokenize && stream.eatSpace()) return null;
                    var style = (state.tokenize || tokenBase)(stream, state);
                    if (style && typeof style == "object") {
                        type = style[1];
                        style = style[0];
                    }
                    override = style;
                    if (type != "comment")
                        state.state = states[state.state](type, stream, state);
                    return override;
                },

                indent: function(state, textAfter, iCx) {
                    var cx = state.context,
                        ch = textAfter && textAfter.charAt(0);
                    var indent = cx.indent;
                    if (cx.type == "prop" && (ch == "}" || ch == ")"))
                        cx = cx.prev;
                    if (cx.prev) {
                        if (
                            ch == "}" &&
                            (cx.type == "block" ||
                                cx.type == "top" ||
                                cx.type == "interpolation" ||
                                cx.type == "restricted_atBlock")
                        ) {
                            // Resume indentation from parent context.
                            cx = cx.prev;
                            indent = cx.indent;
                        } else if (
                            (ch == ")" &&
                                (cx.type == "parens" ||
                                    cx.type == "atBlock_parens")) ||
                            (ch == "{" &&
                                (cx.type == "at" || cx.type == "atBlock"))
                        ) {
                            // Dedent relative to current context.
                            indent = Math.max(0, cx.indent - iCx.unit);
                        }
                    }
                    return indent;
                },

                languageData: {
                    indentOnInput: /^\s*\}$/,
                    commentTokens: {
                        line: lineComment,
                        block: { open: "/*", close: "*/" },
                    },
                    autocomplete: allWords,
                },
            };
        }
        function keySet(array) {
            var keys = {};
            for (var i = 0; i < array.length; ++i) {
                keys[array[i].toLowerCase()] = true;
            }
            return keys;
        }

        var documentTypes_ = ["domain", "regexp", "url", "url-prefix"],
            documentTypes = keySet(documentTypes_);

        var mediaTypes_ = [
            "all",
            "aural",
            "braille",
            "handheld",
            "print",
            "projection",
            "screen",
            "tty",
            "tv",
            "embossed",
        ],
            mediaTypes = keySet(mediaTypes_);

        var mediaFeatures_ = [
            "width",
            "min-width",
            "max-width",
            "height",
            "min-height",
            "max-height",
            "device-width",
            "min-device-width",
            "max-device-width",
            "device-height",
            "min-device-height",
            "max-device-height",
            "aspect-ratio",
            "min-aspect-ratio",
            "max-aspect-ratio",
            "device-aspect-ratio",
            "min-device-aspect-ratio",
            "max-device-aspect-ratio",
            "color",
            "min-color",
            "max-color",
            "color-index",
            "min-color-index",
            "max-color-index",
            "monochrome",
            "min-monochrome",
            "max-monochrome",
            "resolution",
            "min-resolution",
            "max-resolution",
            "scan",
            "grid",
            "orientation",
            "device-pixel-ratio",
            "min-device-pixel-ratio",
            "max-device-pixel-ratio",
            "pointer",
            "any-pointer",
            "hover",
            "any-hover",
            "prefers-color-scheme",
            "dynamic-range",
            "video-dynamic-range",
        ],
            mediaFeatures = keySet(mediaFeatures_);

        var mediaValueKeywords_ = [
            "landscape",
            "portrait",
            "none",
            "coarse",
            "fine",
            "on-demand",
            "hover",
            "interlace",
            "progressive",
            "dark",
            "light",
            "standard",
            "high",
        ],
            mediaValueKeywords = keySet(mediaValueKeywords_);

        var propertyKeywords_ = [
            "align-content",
            "align-items",
            "align-self",
            "alignment-adjust",
            "alignment-baseline",
            "all",
            "anchor-point",
            "animation",
            "animation-delay",
            "animation-direction",
            "animation-duration",
            "animation-fill-mode",
            "animation-iteration-count",
            "animation-name",
            "animation-play-state",
            "animation-timing-function",
            "appearance",
            "azimuth",
            "backdrop-filter",
            "backface-visibility",
            "background",
            "background-attachment",
            "background-blend-mode",
            "background-clip",
            "background-color",
            "background-image",
            "background-origin",
            "background-position",
            "background-position-x",
            "background-position-y",
            "background-repeat",
            "background-size",
            "baseline-shift",
            "binding",
            "bleed",
            "block-size",
            "bookmark-label",
            "bookmark-level",
            "bookmark-state",
            "bookmark-target",
            "border",
            "border-bottom",
            "border-bottom-color",
            "border-bottom-left-radius",
            "border-bottom-right-radius",
            "border-bottom-style",
            "border-bottom-width",
            "border-collapse",
            "border-color",
            "border-image",
            "border-image-outset",
            "border-image-repeat",
            "border-image-slice",
            "border-image-source",
            "border-image-width",
            "border-left",
            "border-left-color",
            "border-left-style",
            "border-left-width",
            "border-radius",
            "border-right",
            "border-right-color",
            "border-right-style",
            "border-right-width",
            "border-spacing",
            "border-style",
            "border-top",
            "border-top-color",
            "border-top-left-radius",
            "border-top-right-radius",
            "border-top-style",
            "border-top-width",
            "border-width",
            "bottom",
            "box-decoration-break",
            "box-shadow",
            "box-sizing",
            "break-after",
            "break-before",
            "break-inside",
            "caption-side",
            "caret-color",
            "clear",
            "clip",
            "color",
            "color-profile",
            "column-count",
            "column-fill",
            "column-gap",
            "column-rule",
            "column-rule-color",
            "column-rule-style",
            "column-rule-width",
            "column-span",
            "column-width",
            "columns",
            "contain",
            "content",
            "counter-increment",
            "counter-reset",
            "crop",
            "cue",
            "cue-after",
            "cue-before",
            "cursor",
            "direction",
            "display",
            "dominant-baseline",
            "drop-initial-after-adjust",
            "drop-initial-after-align",
            "drop-initial-before-adjust",
            "drop-initial-before-align",
            "drop-initial-size",
            "drop-initial-value",
            "elevation",
            "empty-cells",
            "fit",
            "fit-content",
            "fit-position",
            "flex",
            "flex-basis",
            "flex-direction",
            "flex-flow",
            "flex-grow",
            "flex-shrink",
            "flex-wrap",
            "float",
            "float-offset",
            "flow-from",
            "flow-into",
            "font",
            "font-family",
            "font-feature-settings",
            "font-kerning",
            "font-language-override",
            "font-optical-sizing",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-synthesis",
            "font-variant",
            "font-variant-alternates",
            "font-variant-caps",
            "font-variant-east-asian",
            "font-variant-ligatures",
            "font-variant-numeric",
            "font-variant-position",
            "font-variation-settings",
            "font-weight",
            "gap",
            "grid",
            "grid-area",
            "grid-auto-columns",
            "grid-auto-flow",
            "grid-auto-rows",
            "grid-column",
            "grid-column-end",
            "grid-column-gap",
            "grid-column-start",
            "grid-gap",
            "grid-row",
            "grid-row-end",
            "grid-row-gap",
            "grid-row-start",
            "grid-template",
            "grid-template-areas",
            "grid-template-columns",
            "grid-template-rows",
            "hanging-punctuation",
            "height",
            "hyphens",
            "icon",
            "image-orientation",
            "image-rendering",
            "image-resolution",
            "inline-box-align",
            "inset",
            "inset-block",
            "inset-block-end",
            "inset-block-start",
            "inset-inline",
            "inset-inline-end",
            "inset-inline-start",
            "isolation",
            "justify-content",
            "justify-items",
            "justify-self",
            "left",
            "letter-spacing",
            "line-break",
            "line-height",
            "line-height-step",
            "line-stacking",
            "line-stacking-ruby",
            "line-stacking-shift",
            "line-stacking-strategy",
            "list-style",
            "list-style-image",
            "list-style-position",
            "list-style-type",
            "margin",
            "margin-bottom",
            "margin-left",
            "margin-right",
            "margin-top",
            "marks",
            "marquee-direction",
            "marquee-loop",
            "marquee-play-count",
            "marquee-speed",
            "marquee-style",
            "mask-clip",
            "mask-composite",
            "mask-image",
            "mask-mode",
            "mask-origin",
            "mask-position",
            "mask-repeat",
            "mask-size",
            "mask-type",
            "max-block-size",
            "max-height",
            "max-inline-size",
            "max-width",
            "min-block-size",
            "min-height",
            "min-inline-size",
            "min-width",
            "mix-blend-mode",
            "move-to",
            "nav-down",
            "nav-index",
            "nav-left",
            "nav-right",
            "nav-up",
            "object-fit",
            "object-position",
            "offset",
            "offset-anchor",
            "offset-distance",
            "offset-path",
            "offset-position",
            "offset-rotate",
            "opacity",
            "order",
            "orphans",
            "outline",
            "outline-color",
            "outline-offset",
            "outline-style",
            "outline-width",
            "overflow",
            "overflow-style",
            "overflow-wrap",
            "overflow-x",
            "overflow-y",
            "padding",
            "padding-bottom",
            "padding-left",
            "padding-right",
            "padding-top",
            "page",
            "page-break-after",
            "page-break-before",
            "page-break-inside",
            "page-policy",
            "pause",
            "pause-after",
            "pause-before",
            "perspective",
            "perspective-origin",
            "pitch",
            "pitch-range",
            "place-content",
            "place-items",
            "place-self",
            "play-during",
            "position",
            "presentation-level",
            "punctuation-trim",
            "quotes",
            "region-break-after",
            "region-break-before",
            "region-break-inside",
            "region-fragment",
            "rendering-intent",
            "resize",
            "rest",
            "rest-after",
            "rest-before",
            "richness",
            "right",
            "rotate",
            "rotation",
            "rotation-point",
            "row-gap",
            "ruby-align",
            "ruby-overhang",
            "ruby-position",
            "ruby-span",
            "scale",
            "scroll-behavior",
            "scroll-margin",
            "scroll-margin-block",
            "scroll-margin-block-end",
            "scroll-margin-block-start",
            "scroll-margin-bottom",
            "scroll-margin-inline",
            "scroll-margin-inline-end",
            "scroll-margin-inline-start",
            "scroll-margin-left",
            "scroll-margin-right",
            "scroll-margin-top",
            "scroll-padding",
            "scroll-padding-block",
            "scroll-padding-block-end",
            "scroll-padding-block-start",
            "scroll-padding-bottom",
            "scroll-padding-inline",
            "scroll-padding-inline-end",
            "scroll-padding-inline-start",
            "scroll-padding-left",
            "scroll-padding-right",
            "scroll-padding-top",
            "scroll-snap-align",
            "scroll-snap-type",
            "shape-image-threshold",
            "shape-inside",
            "shape-margin",
            "shape-outside",
            "size",
            "speak",
            "speak-as",
            "speak-header",
            "speak-numeral",
            "speak-punctuation",
            "speech-rate",
            "stress",
            "string-set",
            "tab-size",
            "table-layout",
            "target",
            "target-name",
            "target-new",
            "target-position",
            "text-align",
            "text-align-last",
            "text-combine-upright",
            "text-decoration",
            "text-decoration-color",
            "text-decoration-line",
            "text-decoration-skip",
            "text-decoration-skip-ink",
            "text-decoration-style",
            "text-emphasis",
            "text-emphasis-color",
            "text-emphasis-position",
            "text-emphasis-style",
            "text-height",
            "text-indent",
            "text-justify",
            "text-orientation",
            "text-outline",
            "text-overflow",
            "text-rendering",
            "text-shadow",
            "text-size-adjust",
            "text-space-collapse",
            "text-transform",
            "text-underline-position",
            "text-wrap",
            "top",
            "touch-action",
            "transform",
            "transform-origin",
            "transform-style",
            "transition",
            "transition-delay",
            "transition-duration",
            "transition-property",
            "transition-timing-function",
            "translate",
            "unicode-bidi",
            "user-select",
            "vertical-align",
            "visibility",
            "voice-balance",
            "voice-duration",
            "voice-family",
            "voice-pitch",
            "voice-range",
            "voice-rate",
            "voice-stress",
            "voice-volume",
            "volume",
            "white-space",
            "widows",
            "width",
            "will-change",
            "word-break",
            "word-spacing",
            "word-wrap",
            "writing-mode",
            "z-index",
            // SVG-specific
            "clip-path",
            "clip-rule",
            "mask",
            "enable-background",
            "filter",
            "flood-color",
            "flood-opacity",
            "lighting-color",
            "stop-color",
            "stop-opacity",
            "pointer-events",
            "color-interpolation",
            "color-interpolation-filters",
            "color-rendering",
            "fill",
            "fill-opacity",
            "fill-rule",
            "image-rendering",
            "marker",
            "marker-end",
            "marker-mid",
            "marker-start",
            "paint-order",
            "shape-rendering",
            "stroke",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-rendering",
            "baseline-shift",
            "dominant-baseline",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "text-anchor",
            "writing-mode",
        ],
            propertyKeywords = keySet(propertyKeywords_);

        var nonStandardPropertyKeywords_ = [
            "accent-color",
            "aspect-ratio",
            "border-block",
            "border-block-color",
            "border-block-end",
            "border-block-end-color",
            "border-block-end-style",
            "border-block-end-width",
            "border-block-start",
            "border-block-start-color",
            "border-block-start-style",
            "border-block-start-width",
            "border-block-style",
            "border-block-width",
            "border-inline",
            "border-inline-color",
            "border-inline-end",
            "border-inline-end-color",
            "border-inline-end-style",
            "border-inline-end-width",
            "border-inline-start",
            "border-inline-start-color",
            "border-inline-start-style",
            "border-inline-start-width",
            "border-inline-style",
            "border-inline-width",
            "content-visibility",
            "margin-block",
            "margin-block-end",
            "margin-block-start",
            "margin-inline",
            "margin-inline-end",
            "margin-inline-start",
            "overflow-anchor",
            "overscroll-behavior",
            "padding-block",
            "padding-block-end",
            "padding-block-start",
            "padding-inline",
            "padding-inline-end",
            "padding-inline-start",
            "scroll-snap-stop",
            "scrollbar-3d-light-color",
            "scrollbar-arrow-color",
            "scrollbar-base-color",
            "scrollbar-dark-shadow-color",
            "scrollbar-face-color",
            "scrollbar-highlight-color",
            "scrollbar-shadow-color",
            "scrollbar-track-color",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "shape-inside",
            "zoom",
        ],
            nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);

        var fontProperties_ = [
            "font-display",
            "font-family",
            "src",
            "unicode-range",
            "font-variant",
            "font-feature-settings",
            "font-stretch",
            "font-weight",
            "font-style",
        ],
            fontProperties = keySet(fontProperties_);

        var counterDescriptors_ = [
            "additive-symbols",
            "fallback",
            "negative",
            "pad",
            "prefix",
            "range",
            "speak-as",
            "suffix",
            "symbols",
            "system",
        ],
            counterDescriptors = keySet(counterDescriptors_);

        var colorKeywords_ = [
            "aliceblue",
            "antiquewhite",
            "aqua",
            "aquamarine",
            "azure",
            "beige",
            "bisque",
            "black",
            "blanchedalmond",
            "blue",
            "blueviolet",
            "brown",
            "burlywood",
            "cadetblue",
            "chartreuse",
            "chocolate",
            "coral",
            "cornflowerblue",
            "cornsilk",
            "crimson",
            "cyan",
            "darkblue",
            "darkcyan",
            "darkgoldenrod",
            "darkgray",
            "darkgreen",
            "darkgrey",
            "darkkhaki",
            "darkmagenta",
            "darkolivegreen",
            "darkorange",
            "darkorchid",
            "darkred",
            "darksalmon",
            "darkseagreen",
            "darkslateblue",
            "darkslategray",
            "darkslategrey",
            "darkturquoise",
            "darkviolet",
            "deeppink",
            "deepskyblue",
            "dimgray",
            "dimgrey",
            "dodgerblue",
            "firebrick",
            "floralwhite",
            "forestgreen",
            "fuchsia",
            "gainsboro",
            "ghostwhite",
            "gold",
            "goldenrod",
            "gray",
            "grey",
            "green",
            "greenyellow",
            "honeydew",
            "hotpink",
            "indianred",
            "indigo",
            "ivory",
            "khaki",
            "lavender",
            "lavenderblush",
            "lawngreen",
            "lemonchiffon",
            "lightblue",
            "lightcoral",
            "lightcyan",
            "lightgoldenrodyellow",
            "lightgray",
            "lightgreen",
            "lightgrey",
            "lightpink",
            "lightsalmon",
            "lightseagreen",
            "lightskyblue",
            "lightslategray",
            "lightslategrey",
            "lightsteelblue",
            "lightyellow",
            "lime",
            "limegreen",
            "linen",
            "magenta",
            "maroon",
            "mediumaquamarine",
            "mediumblue",
            "mediumorchid",
            "mediumpurple",
            "mediumseagreen",
            "mediumslateblue",
            "mediumspringgreen",
            "mediumturquoise",
            "mediumvioletred",
            "midnightblue",
            "mintcream",
            "mistyrose",
            "moccasin",
            "navajowhite",
            "navy",
            "oldlace",
            "olive",
            "olivedrab",
            "orange",
            "orangered",
            "orchid",
            "palegoldenrod",
            "palegreen",
            "paleturquoise",
            "palevioletred",
            "papayawhip",
            "peachpuff",
            "peru",
            "pink",
            "plum",
            "powderblue",
            "purple",
            "rebeccapurple",
            "red",
            "rosybrown",
            "royalblue",
            "saddlebrown",
            "salmon",
            "sandybrown",
            "seagreen",
            "seashell",
            "sienna",
            "silver",
            "skyblue",
            "slateblue",
            "slategray",
            "slategrey",
            "snow",
            "springgreen",
            "steelblue",
            "tan",
            "teal",
            "thistle",
            "tomato",
            "turquoise",
            "violet",
            "wheat",
            "white",
            "whitesmoke",
            "yellow",
            "yellowgreen",
        ],
            colorKeywords = keySet(colorKeywords_);

        var valueKeywords_ = [
            "above",
            "absolute",
            "activeborder",
            "additive",
            "activecaption",
            "afar",
            "after-white-space",
            "ahead",
            "alias",
            "all",
            "all-scroll",
            "alphabetic",
            "alternate",
            "always",
            "amharic",
            "amharic-abegede",
            "antialiased",
            "appworkspace",
            "arabic-indic",
            "armenian",
            "asterisks",
            "attr",
            "auto",
            "auto-flow",
            "avoid",
            "avoid-column",
            "avoid-page",
            "avoid-region",
            "axis-pan",
            "background",
            "backwards",
            "baseline",
            "below",
            "bidi-override",
            "binary",
            "bengali",
            "blink",
            "block",
            "block-axis",
            "blur",
            "bold",
            "bolder",
            "border",
            "border-box",
            "both",
            "bottom",
            "break",
            "break-all",
            "break-word",
            "brightness",
            "bullets",
            "button",
            "buttonface",
            "buttonhighlight",
            "buttonshadow",
            "buttontext",
            "calc",
            "cambodian",
            "capitalize",
            "caps-lock-indicator",
            "caption",
            "captiontext",
            "caret",
            "cell",
            "center",
            "checkbox",
            "circle",
            "cjk-decimal",
            "cjk-earthly-branch",
            "cjk-heavenly-stem",
            "cjk-ideographic",
            "clear",
            "clip",
            "close-quote",
            "col-resize",
            "collapse",
            "color",
            "color-burn",
            "color-dodge",
            "column",
            "column-reverse",
            "compact",
            "condensed",
            "conic-gradient",
            "contain",
            "content",
            "contents",
            "content-box",
            "context-menu",
            "continuous",
            "contrast",
            "copy",
            "counter",
            "counters",
            "cover",
            "crop",
            "cross",
            "crosshair",
            "cubic-bezier",
            "currentcolor",
            "cursive",
            "cyclic",
            "darken",
            "dashed",
            "decimal",
            "decimal-leading-zero",
            "default",
            "default-button",
            "dense",
            "destination-atop",
            "destination-in",
            "destination-out",
            "destination-over",
            "devanagari",
            "difference",
            "disc",
            "discard",
            "disclosure-closed",
            "disclosure-open",
            "document",
            "dot-dash",
            "dot-dot-dash",
            "dotted",
            "double",
            "down",
            "drop-shadow",
            "e-resize",
            "ease",
            "ease-in",
            "ease-in-out",
            "ease-out",
            "element",
            "ellipse",
            "ellipsis",
            "embed",
            "end",
            "ethiopic",
            "ethiopic-abegede",
            "ethiopic-abegede-am-et",
            "ethiopic-abegede-gez",
            "ethiopic-abegede-ti-er",
            "ethiopic-abegede-ti-et",
            "ethiopic-halehame-aa-er",
            "ethiopic-halehame-aa-et",
            "ethiopic-halehame-am-et",
            "ethiopic-halehame-gez",
            "ethiopic-halehame-om-et",
            "ethiopic-halehame-sid-et",
            "ethiopic-halehame-so-et",
            "ethiopic-halehame-ti-er",
            "ethiopic-halehame-ti-et",
            "ethiopic-halehame-tig",
            "ethiopic-numeric",
            "ew-resize",
            "exclusion",
            "expanded",
            "extends",
            "extra-condensed",
            "extra-expanded",
            "fantasy",
            "fast",
            "fill",
            "fill-box",
            "fixed",
            "flat",
            "flex",
            "flex-end",
            "flex-start",
            "footnotes",
            "forwards",
            "from",
            "geometricPrecision",
            "georgian",
            "grayscale",
            "graytext",
            "grid",
            "groove",
            "gujarati",
            "gurmukhi",
            "hand",
            "hangul",
            "hangul-consonant",
            "hard-light",
            "hebrew",
            "help",
            "hidden",
            "hide",
            "higher",
            "highlight",
            "highlighttext",
            "hiragana",
            "hiragana-iroha",
            "horizontal",
            "hsl",
            "hsla",
            "hue",
            "hue-rotate",
            "icon",
            "ignore",
            "inactiveborder",
            "inactivecaption",
            "inactivecaptiontext",
            "infinite",
            "infobackground",
            "infotext",
            "inherit",
            "initial",
            "inline",
            "inline-axis",
            "inline-block",
            "inline-flex",
            "inline-grid",
            "inline-table",
            "inset",
            "inside",
            "intrinsic",
            "invert",
            "italic",
            "japanese-formal",
            "japanese-informal",
            "justify",
            "kannada",
            "katakana",
            "katakana-iroha",
            "keep-all",
            "khmer",
            "korean-hangul-formal",
            "korean-hanja-formal",
            "korean-hanja-informal",
            "landscape",
            "lao",
            "large",
            "larger",
            "left",
            "level",
            "lighter",
            "lighten",
            "line-through",
            "linear",
            "linear-gradient",
            "lines",
            "list-item",
            "listbox",
            "listitem",
            "local",
            "logical",
            "loud",
            "lower",
            "lower-alpha",
            "lower-armenian",
            "lower-greek",
            "lower-hexadecimal",
            "lower-latin",
            "lower-norwegian",
            "lower-roman",
            "lowercase",
            "ltr",
            "luminosity",
            "malayalam",
            "manipulation",
            "match",
            "matrix",
            "matrix3d",
            "media-play-button",
            "media-slider",
            "media-sliderthumb",
            "media-volume-slider",
            "media-volume-sliderthumb",
            "medium",
            "menu",
            "menulist",
            "menulist-button",
            "menutext",
            "message-box",
            "middle",
            "min-intrinsic",
            "mix",
            "mongolian",
            "monospace",
            "move",
            "multiple",
            "multiple_mask_images",
            "multiply",
            "myanmar",
            "n-resize",
            "narrower",
            "ne-resize",
            "nesw-resize",
            "no-close-quote",
            "no-drop",
            "no-open-quote",
            "no-repeat",
            "none",
            "normal",
            "not-allowed",
            "nowrap",
            "ns-resize",
            "numbers",
            "numeric",
            "nw-resize",
            "nwse-resize",
            "oblique",
            "octal",
            "opacity",
            "open-quote",
            "optimizeLegibility",
            "optimizeSpeed",
            "oriya",
            "oromo",
            "outset",
            "outside",
            "outside-shape",
            "overlay",
            "overline",
            "padding",
            "padding-box",
            "painted",
            "page",
            "paused",
            "persian",
            "perspective",
            "pinch-zoom",
            "plus-darker",
            "plus-lighter",
            "pointer",
            "polygon",
            "portrait",
            "pre",
            "pre-line",
            "pre-wrap",
            "preserve-3d",
            "progress",
            "push-button",
            "radial-gradient",
            "radio",
            "read-only",
            "read-write",
            "read-write-plaintext-only",
            "rectangle",
            "region",
            "relative",
            "repeat",
            "repeating-linear-gradient",
            "repeating-radial-gradient",
            "repeating-conic-gradient",
            "repeat-x",
            "repeat-y",
            "reset",
            "reverse",
            "rgb",
            "rgba",
            "ridge",
            "right",
            "rotate",
            "rotate3d",
            "rotateX",
            "rotateY",
            "rotateZ",
            "round",
            "row",
            "row-resize",
            "row-reverse",
            "rtl",
            "run-in",
            "running",
            "s-resize",
            "sans-serif",
            "saturate",
            "saturation",
            "scale",
            "scale3d",
            "scaleX",
            "scaleY",
            "scaleZ",
            "screen",
            "scroll",
            "scrollbar",
            "scroll-position",
            "se-resize",
            "searchfield",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "self-start",
            "self-end",
            "semi-condensed",
            "semi-expanded",
            "separate",
            "sepia",
            "serif",
            "show",
            "sidama",
            "simp-chinese-formal",
            "simp-chinese-informal",
            "single",
            "skew",
            "skewX",
            "skewY",
            "skip-white-space",
            "slide",
            "slider-horizontal",
            "slider-vertical",
            "sliderthumb-horizontal",
            "sliderthumb-vertical",
            "slow",
            "small",
            "small-caps",
            "small-caption",
            "smaller",
            "soft-light",
            "solid",
            "somali",
            "source-atop",
            "source-in",
            "source-out",
            "source-over",
            "space",
            "space-around",
            "space-between",
            "space-evenly",
            "spell-out",
            "square",
            "square-button",
            "start",
            "static",
            "status-bar",
            "stretch",
            "stroke",
            "stroke-box",
            "sub",
            "subpixel-antialiased",
            "svg_masks",
            "super",
            "sw-resize",
            "symbolic",
            "symbols",
            "system-ui",
            "table",
            "table-caption",
            "table-cell",
            "table-column",
            "table-column-group",
            "table-footer-group",
            "table-header-group",
            "table-row",
            "table-row-group",
            "tamil",
            "telugu",
            "text",
            "text-bottom",
            "text-top",
            "textarea",
            "textfield",
            "thai",
            "thick",
            "thin",
            "threeddarkshadow",
            "threedface",
            "threedhighlight",
            "threedlightshadow",
            "threedshadow",
            "tibetan",
            "tigre",
            "tigrinya-er",
            "tigrinya-er-abegede",
            "tigrinya-et",
            "tigrinya-et-abegede",
            "to",
            "top",
            "trad-chinese-formal",
            "trad-chinese-informal",
            "transform",
            "translate",
            "translate3d",
            "translateX",
            "translateY",
            "translateZ",
            "transparent",
            "ultra-condensed",
            "ultra-expanded",
            "underline",
            "unidirectional-pan",
            "unset",
            "up",
            "upper-alpha",
            "upper-armenian",
            "upper-greek",
            "upper-hexadecimal",
            "upper-latin",
            "upper-norwegian",
            "upper-roman",
            "uppercase",
            "urdu",
            "url",
            "var",
            "vertical",
            "vertical-text",
            "view-box",
            "visible",
            "visibleFill",
            "visiblePainted",
            "visibleStroke",
            "visual",
            "w-resize",
            "wait",
            "wave",
            "wider",
            "window",
            "windowframe",
            "windowtext",
            "words",
            "wrap",
            "wrap-reverse",
            "x-large",
            "x-small",
            "xor",
            "xx-large",
            "xx-small",
        ],
            valueKeywords = keySet(valueKeywords_);

        var allWords = documentTypes_
            .concat(mediaTypes_)
            .concat(mediaFeatures_)
            .concat(mediaValueKeywords_)
            .concat(propertyKeywords_)
            .concat(nonStandardPropertyKeywords_)
            .concat(colorKeywords_)
            .concat(valueKeywords_);

        const keywords = {
            properties: propertyKeywords_,
            colors: colorKeywords_,
            fonts: fontProperties_,
            values: valueKeywords_,
            all: allWords,
        };

        const defaults = {
            documentTypes: documentTypes,
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            fontProperties: fontProperties,
            counterDescriptors: counterDescriptors,
            colorKeywords: colorKeywords,
            valueKeywords: valueKeywords,
            tokenHooks: {
                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenCComment;
                    return tokenCComment(stream, state);
                },
            },
        };

        const css = mkCSS({});

        function tokenCComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return ["comment", "comment"];
        }

        const sCSS = mkCSS({
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            colorKeywords: colorKeywords,
            valueKeywords: valueKeywords,
            fontProperties: fontProperties,
            allowNested: true,
            lineComment: "//",
            tokenHooks: {
                "/": function(stream, state) {
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return ["comment", "comment"];
                    } else if (stream.eat("*")) {
                        state.tokenize = tokenCComment;
                        return tokenCComment(stream, state);
                    } else {
                        return ["operator", "operator"];
                    }
                },
                ":": function(stream) {
                    if (stream.match(/^\s*\{/, false)) return [null, null];
                    return false;
                },
                $: function(stream) {
                    stream.match(/^[\w-]+/);
                    if (stream.match(/^\s*:/, false))
                        return ["def", "variable-definition"];
                    return ["variableName.special", "variable"];
                },
                "#": function(stream) {
                    if (!stream.eat("{")) return false;
                    return [null, "interpolation"];
                },
            },
        });

        const less = mkCSS({
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            colorKeywords: colorKeywords,
            valueKeywords: valueKeywords,
            fontProperties: fontProperties,
            allowNested: true,
            lineComment: "//",
            tokenHooks: {
                "/": function(stream, state) {
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return ["comment", "comment"];
                    } else if (stream.eat("*")) {
                        state.tokenize = tokenCComment;
                        return tokenCComment(stream, state);
                    } else {
                        return ["operator", "operator"];
                    }
                },
                "@": function(stream) {
                    if (stream.eat("{")) return [null, "interpolation"];
                    if (
                        stream.match(
                            /^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i,
                            false
                        )
                    )
                        return false;
                    stream.eatWhile(/[\w\\\-]/);
                    if (stream.match(/^\s*:/, false))
                        return ["def", "variable-definition"];
                    return ["variableName", "variable"];
                },
                "&": function() {
                    return ["atom", "atom"];
                },
            },
        });

        const gss = mkCSS({
            documentTypes: documentTypes,
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            propertyKeywords: propertyKeywords,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            fontProperties: fontProperties,
            counterDescriptors: counterDescriptors,
            colorKeywords: colorKeywords,
            valueKeywords: valueKeywords,
            supportsAtComponent: true,
            tokenHooks: {
                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenCComment;
                    return tokenCComment(stream, state);
                },
            },
        });

        exports.css = css;
        exports.gss = gss;
        exports.keywords = keywords;
        exports.less = less;
        exports.mkCSS = mkCSS;
        exports.sCSS = sCSS;
    }
    _M11();
    function _M12() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var wordRegexp = function(words) {
            return new RegExp("^(?:" + words.join("|") + ")$", "i");
        };

        var tokenBase = function(stream /*, state*/) {
            curPunc = null;
            var ch = stream.next();
            if (ch === '"') {
                stream.match(/^.*?"/);
                return "string";
            }
            if (ch === "'") {
                stream.match(/^.*?'/);
                return "string";
            }
            if (/[{}\(\),\.;\[\]]/.test(ch)) {
                curPunc = ch;
                return "punctuation";
            } else if (ch === "/" && stream.eat("/")) {
                stream.skipToEnd();
                return "comment";
            } else if (operatorChars.test(ch)) {
                stream.eatWhile(operatorChars);
                return null;
            } else {
                stream.eatWhile(/[_\w\d]/);
                if (stream.eat(":")) {
                    stream.eatWhile(/[\w\d_\-]/);
                    return "atom";
                }
                var word = stream.current();
                if (funcs.test(word)) return "builtin";
                if (preds.test(word)) return "def";
                if (keywords.test(word) || systemKeywords.test(word))
                    return "keyword";
                return "variable";
            }
        };
        var pushContext = function(state, type, col) {
            return (state.context = {
                prev: state.context,
                indent: state.indent,
                col: col,
                type: type,
            });
        };
        var popContext = function(state) {
            state.indent = state.context.indent;
            return (state.context = state.context.prev);
        };
        var curPunc;
        var funcs = wordRegexp([
            "abs",
            "acos",
            "allShortestPaths",
            "asin",
            "atan",
            "atan2",
            "avg",
            "ceil",
            "coalesce",
            "collect",
            "cos",
            "cot",
            "count",
            "degrees",
            "e",
            "endnode",
            "exp",
            "extract",
            "filter",
            "floor",
            "haversin",
            "head",
            "id",
            "keys",
            "labels",
            "last",
            "left",
            "length",
            "log",
            "log10",
            "lower",
            "ltrim",
            "max",
            "min",
            "node",
            "nodes",
            "percentileCont",
            "percentileDisc",
            "pi",
            "radians",
            "rand",
            "range",
            "reduce",
            "rel",
            "relationship",
            "relationships",
            "replace",
            "reverse",
            "right",
            "round",
            "rtrim",
            "shortestPath",
            "sign",
            "sin",
            "size",
            "split",
            "sqrt",
            "startnode",
            "stdev",
            "stdevp",
            "str",
            "substring",
            "sum",
            "tail",
            "tan",
            "timestamp",
            "toFloat",
            "toInt",
            "toString",
            "trim",
            "type",
            "upper",
        ]);
        var preds = wordRegexp([
            "all",
            "and",
            "any",
            "contains",
            "exists",
            "has",
            "in",
            "none",
            "not",
            "or",
            "single",
            "xor",
        ]);
        var keywords = wordRegexp([
            "as",
            "asc",
            "ascending",
            "assert",
            "by",
            "case",
            "commit",
            "constraint",
            "create",
            "csv",
            "cypher",
            "delete",
            "desc",
            "descending",
            "detach",
            "distinct",
            "drop",
            "else",
            "end",
            "ends",
            "explain",
            "false",
            "fieldterminator",
            "foreach",
            "from",
            "headers",
            "in",
            "index",
            "is",
            "join",
            "limit",
            "load",
            "match",
            "merge",
            "null",
            "on",
            "optional",
            "order",
            "periodic",
            "profile",
            "remove",
            "return",
            "scan",
            "set",
            "skip",
            "start",
            "starts",
            "then",
            "true",
            "union",
            "unique",
            "unwind",
            "using",
            "when",
            "where",
            "with",
            "call",
            "yield",
        ]);
        var systemKeywords = wordRegexp([
            "access",
            "active",
            "assign",
            "all",
            "alter",
            "as",
            "catalog",
            "change",
            "copy",
            "create",
            "constraint",
            "constraints",
            "current",
            "database",
            "databases",
            "dbms",
            "default",
            "deny",
            "drop",
            "element",
            "elements",
            "exists",
            "from",
            "grant",
            "graph",
            "graphs",
            "if",
            "index",
            "indexes",
            "label",
            "labels",
            "management",
            "match",
            "name",
            "names",
            "new",
            "node",
            "nodes",
            "not",
            "of",
            "on",
            "or",
            "password",
            "populated",
            "privileges",
            "property",
            "read",
            "relationship",
            "relationships",
            "remove",
            "replace",
            "required",
            "revoke",
            "role",
            "roles",
            "set",
            "show",
            "start",
            "status",
            "stop",
            "suspended",
            "to",
            "traverse",
            "type",
            "types",
            "user",
            "users",
            "with",
            "write",
        ]);
        var operatorChars = /[*+\-<>=&|~%^]/;

        const cypher = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    context: null,
                    indent: 0,
                    col: 0,
                };
            },
            token: function(stream, state) {
                if (stream.sol()) {
                    if (state.context && state.context.align == null) {
                        state.context.align = false;
                    }
                    state.indent = stream.indentation();
                }
                if (stream.eatSpace()) {
                    return null;
                }
                var style = state.tokenize(stream, state);
                if (
                    style !== "comment" &&
                    state.context &&
                    state.context.align == null &&
                    state.context.type !== "pattern"
                ) {
                    state.context.align = true;
                }
                if (curPunc === "(") {
                    pushContext(state, ")", stream.column());
                } else if (curPunc === "[") {
                    pushContext(state, "]", stream.column());
                } else if (curPunc === "{") {
                    pushContext(state, "}", stream.column());
                } else if (/[\]\}\)]/.test(curPunc)) {
                    while (state.context && state.context.type === "pattern") {
                        popContext(state);
                    }
                    if (state.context && curPunc === state.context.type) {
                        popContext(state);
                    }
                } else if (
                    curPunc === "." &&
                    state.context &&
                    state.context.type === "pattern"
                ) {
                    popContext(state);
                } else if (
                    /atom|string|variable/.test(style) &&
                    state.context
                ) {
                    if (/[\}\]]/.test(state.context.type)) {
                        pushContext(state, "pattern", stream.column());
                    } else if (
                        state.context.type === "pattern" &&
                        !state.context.align
                    ) {
                        state.context.align = true;
                        state.context.col = stream.column();
                    }
                }
                return style;
            },
            indent: function(state, textAfter, cx) {
                var firstChar = textAfter && textAfter.charAt(0);
                var context = state.context;
                if (/[\]\}]/.test(firstChar)) {
                    while (context && context.type === "pattern") {
                        context = context.prev;
                    }
                }
                var closing = context && firstChar === context.type;
                if (!context) return 0;
                if (context.type === "keywords") return null;
                if (context.align) return context.col + (closing ? 0 : 1);
                return context.indent + (closing ? 0 : cx.unit);
            },
        };

        exports.cypher = cypher;
    }
    _M12();
    function _M13() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var blockKeywordsStr =
            "body catch class do else enum for foreach foreach_reverse if in interface mixin " +
            "out scope struct switch try union unittest version while with";

        const parserConfig = {
            keywords: words(
                "abstract alias align asm assert auto break case cast cdouble cent cfloat const continue " +
                "debug default delegate delete deprecated export extern final finally function goto immutable " +
                "import inout invariant is lazy macro module new nothrow override package pragma private " +
                "protected public pure ref return shared short static super synchronized template this " +
                "throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " +
                blockKeywordsStr
            ),
            blockKeywords: words(blockKeywordsStr),
            builtin: words(
                "bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte " +
                "ucent uint ulong ushort wchar wstring void size_t sizediff_t"
            ),
            atoms: words("exit failure success true false null"),
            hooks: {
                "@": function(stream, _state) {
                    stream.eatWhile(/[\w\$_]/);
                    return "meta";
                },
            },
        };

        var statementIndentUnit = parserConfig.statementIndentUnit,
            keywords = parserConfig.keywords,
            builtin = parserConfig.builtin,
            blockKeywords = parserConfig.blockKeywords,
            atoms = parserConfig.atoms,
            hooks = parserConfig.hooks,
            multiLineStrings = parserConfig.multiLineStrings;
        var isOperatorChar = /[+\-*&%=<>!?|\/]/;

        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (hooks[ch]) {
                var result = hooks[ch](stream, state);
                if (result !== false) return result;
            }
            if (ch == '"' || ch == "'" || ch == "`") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                curPunc = ch;
                return null;
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (ch == "/") {
                if (stream.eat("+")) {
                    state.tokenize = tokenNestedComment;
                    return tokenNestedComment(stream, state);
                }
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            var cur = stream.current();
            if (keywords.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "keyword";
            }
            if (builtin.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "builtin";
            }
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !(escaped || multiLineStrings))
                    state.tokenize = null;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenNestedComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "+";
            }
            return "comment";
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            var indent = state.indented;
            if (state.context && state.context.type == "statement")
                indent = state.context.indented;
            return (state.context = new Context(
                indent,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface

        const d = {
            startState: function(indentUnit) {
                return {
                    tokenize: null,
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment" || style == "meta") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":" || curPunc == ",") &&
                    ctx.type == "statement"
                )
                    popContext(state);
                else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    ((ctx.type == "}" || ctx.type == "top") &&
                        curPunc != ";") ||
                    (ctx.type == "statement" && curPunc == "newstatement")
                )
                    pushContext(state, stream.column(), "statement");
                state.startOfLine = false;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase && state.tokenize != null)
                    return null;
                var ctx = state.context,
                    firstChar = textAfter && textAfter.charAt(0);
                if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
                var closing = firstChar == ctx.type;
                if (ctx.type == "statement")
                    return (
                        ctx.indented +
                        (firstChar == "{" ? 0 : statementIndentUnit || cx.unit)
                    );
                else if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
            },
        };

        exports.d = d;
    }
    _M13();
    function _M14() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var TOKEN_NAMES = {
            "+": "inserted",
            "-": "deleted",
            "@": "meta",
        };

        const diff = {
            token: function(stream) {
                var tw_pos = stream.string.search(/[\t ]+?$/);

                if (!stream.sol() || tw_pos === 0) {
                    stream.skipToEnd();
                    return (
                        "error " + (TOKEN_NAMES[stream.string.charAt(0)] || "")
                    ).replace(/ $/, "");
                }

                var token_name =
                    TOKEN_NAMES[stream.peek()] || stream.skipToEnd();

                if (tw_pos === -1) {
                    stream.skipToEnd();
                } else {
                    stream.pos = tw_pos;
                }

                return token_name;
            },
        };

        exports.diff = diff;
    }
    _M14();
    function _M15() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var type;
        function ret(style, tp) {
            type = tp;
            return style;
        }

        function tokenBase(stream, state) {
            var ch = stream.next();

            if (ch == "<" && stream.eat("!")) {
                if (stream.eatWhile(/[\-]/)) {
                    state.tokenize = tokenSGMLComment;
                    return tokenSGMLComment(stream, state);
                } else if (stream.eatWhile(/[\w]/))
                    return ret("keyword", "doindent");
            } else if (ch == "<" && stream.eat("?")) {
                //xml declaration
                state.tokenize = inBlock("meta", "?>");
                return ret("meta", ch);
            } else if (ch == "#" && stream.eatWhile(/[\w]/))
                return ret("atom", "tag");
            else if (ch == "|") return ret("keyword", "separator");
            else if (ch.match(/[\(\)\[\]\-\.,\+\?>]/))
                return ret(
                    null,
                    ch
                ); //if(ch === ">") return ret(null, "endtag"); else
            else if (ch.match(/[\[\]]/)) return ret("rule", ch);
            else if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
                var sc = stream.current();
                if (sc.substr(sc.length - 1, sc.length).match(/\?|\+/) !== null)
                    stream.backUp(1);
                return ret("tag", "tag");
            } else if (ch == "%" || ch == "*") return ret("number", "number");
            else {
                stream.eatWhile(/[\w\\\-_%.{,]/);
                return ret(null, null);
            }
        }

        function tokenSGMLComment(stream, state) {
            var dashes = 0,
                ch;
            while ((ch = stream.next()) != null) {
                if (dashes >= 2 && ch == ">") {
                    state.tokenize = tokenBase;
                    break;
                }
                dashes = ch == "-" ? dashes + 1 : 0;
            }
            return ret("comment", "comment");
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    escaped = !escaped && ch == "\\";
                }
                return ret("string", "tag");
            };
        }

        function inBlock(style, terminator) {
            return function(stream, state) {
                while (!stream.eol()) {
                    if (stream.match(terminator)) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    stream.next();
                }
                return style;
            };
        }

        const dtd = {
            startState: function() {
                return { tokenize: tokenBase, baseIndent: 0, stack: [] };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);

                var context = state.stack[state.stack.length - 1];
                if (
                    stream.current() == "[" ||
                    type === "doindent" ||
                    type == "["
                )
                    state.stack.push("rule");
                else if (type === "endtag")
                    state.stack[state.stack.length - 1] = "endtag";
                else if (
                    stream.current() == "]" ||
                    type == "]" ||
                    (type == ">" && context == "rule")
                )
                    state.stack.pop();
                else if (type == "[") state.stack.push("[");
                return style;
            },

            indent: function(state, textAfter, cx) {
                var n = state.stack.length;

                if (textAfter.charAt(0) === "]") n--;
                else if (
                    textAfter.substr(textAfter.length - 1, textAfter.length) ===
                    ">"
                ) {
                    if (textAfter.substr(0, 1) === "<");
                    else if (type == "doindent" && textAfter.length > 1);
                    else if (type == "doindent") n--;
                    else if (type == ">" && textAfter.length > 1);
                    else if (type == "tag" && textAfter !== ">");
                    else if (
                        type == "tag" &&
                        state.stack[state.stack.length - 1] == "rule"
                    )
                        n--;
                    else if (type == "tag") n++;
                    else if (
                        textAfter === ">" &&
                        state.stack[state.stack.length - 1] == "rule" &&
                        type === ">"
                    )
                        n--;
                    else if (
                        textAfter === ">" &&
                        state.stack[state.stack.length - 1] == "rule"
                    );
                    else if (
                        textAfter.substr(0, 1) !== "<" &&
                        textAfter.substr(0, 1) === ">"
                    )
                        n = n - 1;
                    else if (textAfter === ">");
                    else n = n - 1;
                    //over rule them all
                    if (type == null || type == "]") n--;
                }

                return state.baseIndent + n * cx.unit;
            },

            languageData: {
                indentOnInput: /^\s*[\]>]$/,
            },
        };

        exports.dtd = dtd;
    }
    _M15();
    function _M16() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var commentType = { slash: 0, parenthesis: 1 };
        var stateType = { comment: 0, _string: 1, characterClass: 2 };

        const ebnf = {
            startState: function() {
                return {
                    stringType: null,
                    commentType: null,
                    braced: 0,
                    lhs: true,
                    localState: null,
                    stack: [],
                    inDefinition: false,
                };
            },
            token: function(stream, state) {
                if (!stream) return;

                //check for state changes
                if (state.stack.length === 0) {
                    //strings
                    if (stream.peek() == '"' || stream.peek() == "'") {
                        state.stringType = stream.peek();
                        stream.next(); // Skip quote
                        state.stack.unshift(stateType._string);
                    } else if (stream.match("/*")) {
                        //comments starting with /*
                        state.stack.unshift(stateType.comment);
                        state.commentType = commentType.slash;
                    } else if (stream.match("(*")) {
                        //comments starting with (*
                        state.stack.unshift(stateType.comment);
                        state.commentType = commentType.parenthesis;
                    }
                }

                //return state
                //stack has
                switch (state.stack[0]) {
                    case stateType._string:
                        while (
                            state.stack[0] === stateType._string &&
                            !stream.eol()
                        ) {
                            if (stream.peek() === state.stringType) {
                                stream.next(); // Skip quote
                                state.stack.shift(); // Clear flag
                            } else if (stream.peek() === "\\") {
                                stream.next();
                                stream.next();
                            } else {
                                stream.match(/^.[^\\\"\']*/);
                            }
                        }
                        return state.lhs ? "property" : "string"; // Token style

                    case stateType.comment:
                        while (
                            state.stack[0] === stateType.comment &&
                            !stream.eol()
                        ) {
                            if (
                                state.commentType === commentType.slash &&
                                stream.match("*/")
                            ) {
                                state.stack.shift(); // Clear flag
                                state.commentType = null;
                            } else if (
                                state.commentType === commentType.parenthesis &&
                                stream.match("*)")
                            ) {
                                state.stack.shift(); // Clear flag
                                state.commentType = null;
                            } else {
                                stream.match(/^.[^\*]*/);
                            }
                        }
                        return "comment";

                    case stateType.characterClass:
                        while (
                            state.stack[0] === stateType.characterClass &&
                            !stream.eol()
                        ) {
                            if (
                                !(
                                    stream.match(/^[^\]\\]+/) ||
                                    stream.match(".")
                                )
                            ) {
                                state.stack.shift();
                            }
                        }
                        return "operator";
                }

                var peek = stream.peek();

                //no stack
                switch (peek) {
                    case "[":
                        stream.next();
                        state.stack.unshift(stateType.characterClass);
                        return "bracket";
                    case ":":
                    case "|":
                    case ";":
                        stream.next();
                        return "operator";
                    case "%":
                        if (stream.match("%%")) {
                            return "header";
                        } else if (stream.match(/[%][A-Za-z]+/)) {
                            return "keyword";
                        } else if (stream.match(/[%][}]/)) {
                            return "bracket";
                        }
                        break;
                    case "/":
                        if (stream.match(/[\/][A-Za-z]+/)) {
                            return "keyword";
                        }
                    case "\\":
                        if (stream.match(/[\][a-z]+/)) {
                            return "string.special";
                        }
                    case ".":
                        if (stream.match(".")) {
                            return "atom";
                        }
                    case "*":
                    case "-":
                    case "+":
                    case "^":
                        if (stream.match(peek)) {
                            return "atom";
                        }
                    case "$":
                        if (stream.match("$$")) {
                            return "builtin";
                        } else if (stream.match(/[$][0-9]+/)) {
                            return "variableName.special";
                        }
                    case "<":
                        if (stream.match(/<<[a-zA-Z_]+>>/)) {
                            return "builtin";
                        }
                }

                if (stream.match("//")) {
                    stream.skipToEnd();
                    return "comment";
                } else if (stream.match("return")) {
                    return "operator";
                } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
                    if (stream.match(/(?=[\(.])/)) {
                        return "variable";
                    } else if (stream.match(/(?=[\s\n]*[:=])/)) {
                        return "def";
                    }
                    return "variableName.special";
                } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
                    stream.next();
                    return "bracket";
                } else if (!stream.eatSpace()) {
                    stream.next();
                }
                return null;
            },
        };

        exports.ebnf = ebnf;
    }
    _M16();
    function _M17() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function simpleMode(states) {
            ensureState(states, "start");
            var states_ = {},
                meta = states.languageData || {},
                hasIndentation = false;
            for (var state in states)
                if (state != meta && states.hasOwnProperty(state)) {
                    var list = (states_[state] = []),
                        orig = states[state];
                    for (var i = 0; i < orig.length; i++) {
                        var data = orig[i];
                        list.push(new Rule(data, states));
                        if (data.indent || data.dedent) hasIndentation = true;
                    }
                }
            return {
                startState: function() {
                    return {
                        state: "start",
                        pending: null,
                        indent: hasIndentation ? [] : null,
                    };
                },
                copyState: function(state) {
                    var s = {
                        state: state.state,
                        pending: state.pending,
                        indent: state.indent && state.indent.slice(0),
                    };
                    if (state.stack) s.stack = state.stack.slice(0);
                    return s;
                },
                token: tokenFunction(states_),
                indent: indentFunction(states_, meta),
                languageData: meta,
            };
        }
        function ensureState(states, name) {
            if (!states.hasOwnProperty(name))
                throw new Error("Undefined state " + name + " in simple mode");
        }

        function toRegex(val, caret) {
            if (!val) return /(?:)/;
            var flags = "";
            if (val instanceof RegExp) {
                if (val.ignoreCase) flags = "i";
                val = val.source;
            } else {
                val = String(val);
            }
            return new RegExp(
                (caret === false ? "" : "^") + "(?:" + val + ")",
                flags
            );
        }

        function asToken(val) {
            if (!val) return null;
            if (val.apply) return val;
            if (typeof val == "string") return val.replace(/\./g, " ");
            var result = [];
            for (var i = 0; i < val.length; i++)
                result.push(val[i] && val[i].replace(/\./g, " "));
            return result;
        }

        function Rule(data, states) {
            if (data.next || data.push)
                ensureState(states, data.next || data.push);
            this.regex = toRegex(data.regex);
            this.token = asToken(data.token);
            this.data = data;
        }

        function tokenFunction(states) {
            return function(stream, state) {
                if (state.pending) {
                    var pend = state.pending.shift();
                    if (state.pending.length == 0) state.pending = null;
                    stream.pos += pend.text.length;
                    return pend.token;
                }

                var curState = states[state.state];
                for (var i = 0; i < curState.length; i++) {
                    var rule = curState[i];
                    var matches =
                        (!rule.data.sol || stream.sol()) &&
                        stream.match(rule.regex);
                    if (matches) {
                        if (rule.data.next) {
                            state.state = rule.data.next;
                        } else if (rule.data.push) {
                            (state.stack || (state.stack = [])).push(
                                state.state
                            );
                            state.state = rule.data.push;
                        } else if (
                            rule.data.pop &&
                            state.stack &&
                            state.stack.length
                        ) {
                            state.state = state.stack.pop();
                        }

                        if (rule.data.indent)
                            state.indent.push(
                                stream.indentation() + stream.indentUnit
                            );
                        if (rule.data.dedent) state.indent.pop();
                        var token = rule.token;
                        if (token && token.apply) token = token(matches);
                        if (
                            matches.length > 2 &&
                            rule.token &&
                            typeof rule.token != "string"
                        ) {
                            state.pending = [];
                            for (var j = 2; j < matches.length; j++)
                                if (matches[j])
                                    state.pending.push({
                                        text: matches[j],
                                        token: rule.token[j - 1],
                                    });
                            stream.backUp(
                                matches[0].length -
                                (matches[1] ? matches[1].length : 0)
                            );
                            return token[0];
                        } else if (token && token.join) {
                            return token[0];
                        } else {
                            return token;
                        }
                    }
                }
                stream.next();
                return null;
            };
        }

        function indentFunction(states, meta) {
            return function(state, textAfter) {
                if (
                    state.indent == null ||
                    (meta.dontIndentStates &&
                        meta.doneIndentState.indexOf(state.state) > -1)
                )
                    return null;

                var pos = state.indent.length - 1,
                    rules = states[state.state];
                scan: for (; ;) {
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        if (
                            rule.data.dedent &&
                            rule.data.dedentIfLineStart !== false
                        ) {
                            var m = rule.regex.exec(textAfter);
                            if (m && m[0]) {
                                pos--;
                                if (rule.next || rule.push)
                                    rules = states[rule.next || rule.push];
                                textAfter = textAfter.slice(m[0].length);
                                continue scan;
                            }
                        }
                    }
                    break;
                }
                return pos < 0 ? 0 : state.indent[pos];
            };
        }

        var from = "from";
        var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");

        var shells = ["run", "cmd", "entrypoint", "shell"];
        var shellsAsArrayRegex = new RegExp(
            "^(\\s*)(" + shells.join("|") + ")(\\s+\\[)",
            "i"
        );

        var expose = "expose";
        var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");

        var others = [
            "arg",
            "from",
            "maintainer",
            "label",
            "env",
            "add",
            "copy",
            "volume",
            "user",
            "workdir",
            "onbuild",
            "stopsignal",
            "healthcheck",
            "shell",
        ];

        // Collect all Dockerfile directives
        var instructions = [from, expose].concat(shells).concat(others),
            instructionRegex = "(" + instructions.join("|") + ")",
            instructionOnlyLine = new RegExp(
                "^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$",
                "i"
            ),
            instructionWithArguments = new RegExp(
                "^(\\s*)" + instructionRegex + "(\\s+)",
                "i"
            );

        const dockerFile = simpleMode({
            start: [
                // Block comment: This is a line starting with a comment
                {
                    regex: /^\s*#.*$/,
                    sol: true,
                    token: "comment",
                },
                {
                    regex: fromRegex,
                    token: [null, "keyword"],
                    sol: true,
                    next: "from",
                },
                // Highlight an instruction without any arguments (for convenience)
                {
                    regex: instructionOnlyLine,
                    token: [null, "keyword", null, "error"],
                    sol: true,
                },
                {
                    regex: shellsAsArrayRegex,
                    token: [null, "keyword", null],
                    sol: true,
                    next: "array",
                },
                {
                    regex: exposeRegex,
                    token: [null, "keyword", null],
                    sol: true,
                    next: "expose",
                },
                // Highlight an instruction followed by arguments
                {
                    regex: instructionWithArguments,
                    token: [null, "keyword", null],
                    sol: true,
                    next: "arguments",
                },
                {
                    regex: /./,
                    token: null,
                },
            ],
            from: [
                {
                    regex: /\s*$/,
                    token: null,
                    next: "start",
                },
                {
                    // Line comment without instruction arguments is an error
                    regex: /(\s*)(#.*)$/,
                    token: [null, "error"],
                    next: "start",
                },
                {
                    regex: /(\s*\S+\s+)(as)/i,
                    token: [null, "keyword"],
                    next: "start",
                },
                // Fail safe return to start
                {
                    token: null,
                    next: "start",
                },
            ],
            single: [
                {
                    regex: /(?:[^\\']|\\.)/,
                    token: "string",
                },
                {
                    regex: /'/,
                    token: "string",
                    pop: true,
                },
            ],
            double: [
                {
                    regex: /(?:[^\\"]|\\.)/,
                    token: "string",
                },
                {
                    regex: /"/,
                    token: "string",
                    pop: true,
                },
            ],
            array: [
                {
                    regex: /\]/,
                    token: null,
                    next: "start",
                },
                {
                    regex: /"(?:[^\\"]|\\.)*"?/,
                    token: "string",
                },
            ],
            expose: [
                {
                    regex: /\d+$/,
                    token: "number",
                    next: "start",
                },
                {
                    regex: /[^\d]+$/,
                    token: null,
                    next: "start",
                },
                {
                    regex: /\d+/,
                    token: "number",
                },
                {
                    regex: /[^\d]+/,
                    token: null,
                },
                // Fail safe return to start
                {
                    token: null,
                    next: "start",
                },
            ],
            arguments: [
                {
                    regex: /^\s*#.*$/,
                    sol: true,
                    token: "comment",
                },
                {
                    regex: /"(?:[^\\"]|\\.)*"?$/,
                    token: "string",
                    next: "start",
                },
                {
                    regex: /"/,
                    token: "string",
                    push: "double",
                },
                {
                    regex: /'(?:[^\\']|\\.)*'?$/,
                    token: "string",
                    next: "start",
                },
                {
                    regex: /'/,
                    token: "string",
                    push: "single",
                },
                {
                    regex: /[^#"']+[\\`]$/,
                    token: null,
                },
                {
                    regex: /[^#"']+$/,
                    token: null,
                    next: "start",
                },
                {
                    regex: /[^#"']+/,
                    token: null,
                },
                // Fail safe return to start
                {
                    token: null,
                    next: "start",
                },
            ],
            languageData: {
                commentTokens: { line: "#" },
            },
        });

        exports.dockerFile = dockerFile;
    }
    _M17();
    function _M18() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        const defaults = {
            keywords: words(
                "DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION" +
                " REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED" +
                " WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN" +
                " IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS" +
                " MINACCESS MAXACCESS REVISION STATUS DESCRIPTION" +
                " SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName" +
                " ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY" +
                " IMPLIED EXPORTS"
            ),
            cmipVerbs: words("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
            compareTypes: words(
                "OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY" +
                " MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY" +
                " OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL" +
                " SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL" +
                " TEXTUAL-CONVENTION"
            ),
            status: words("current deprecated mandatory obsolete"),
            tags: words(
                "APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS" +
                " UNIVERSAL"
            ),
            storage: words(
                "BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING" +
                " UTCTime InterfaceIndex IANAifType CMIP-Attribute" +
                " REAL PACKAGE PACKAGES IpAddress PhysAddress" +
                " NetworkAddress BITS BMPString TimeStamp TimeTicks" +
                " TruthValue RowStatus DisplayString GeneralString" +
                " GraphicString IA5String NumericString" +
                " PrintableString SnmpAdminString TeletexString" +
                " UTF8String VideotexString VisibleString StringStore" +
                " ISO646String T61String UniversalString Unsigned32" +
                " Integer32 Gauge Gauge32 Counter Counter32 Counter64"
            ),
            modifier: words(
                "ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS" +
                " GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS" +
                " DEFINED"
            ),
            accessTypes: words(
                "not-accessible accessible-for-notify read-only" +
                " read-create read-write"
            ),
            multiLineStrings: true,
        };

        function asn1(parserConfig) {
            var keywords = parserConfig.keywords || defaults.keywords,
                cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,
                compareTypes =
                    parserConfig.compareTypes || defaults.compareTypes,
                status = parserConfig.status || defaults.status,
                tags = parserConfig.tags || defaults.tags,
                storage = parserConfig.storage || defaults.storage,
                modifier = parserConfig.modifier || defaults.modifier,
                accessTypes = parserConfig.accessTypes || defaults.accessTypes,
                multiLineStrings =
                    parserConfig.multiLineStrings || defaults.multiLineStrings,
                indentStatements = parserConfig.indentStatements !== false;
            var isOperatorChar = /[\|\^]/;
            var curPunc;

            function tokenBase(stream, state) {
                var ch = stream.next();
                if (ch == '"' || ch == "'") {
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                }
                if (/[\[\]\(\){}:=,;]/.test(ch)) {
                    curPunc = ch;
                    return "punctuation";
                }
                if (ch == "-") {
                    if (stream.eat("-")) {
                        stream.skipToEnd();
                        return "comment";
                    }
                }
                if (/\d/.test(ch)) {
                    stream.eatWhile(/[\w\.]/);
                    return "number";
                }
                if (isOperatorChar.test(ch)) {
                    stream.eatWhile(isOperatorChar);
                    return "operator";
                }

                stream.eatWhile(/[\w\-]/);
                var cur = stream.current();
                if (keywords.propertyIsEnumerable(cur)) return "keyword";
                if (cmipVerbs.propertyIsEnumerable(cur)) return "variableName";
                if (compareTypes.propertyIsEnumerable(cur)) return "atom";
                if (status.propertyIsEnumerable(cur)) return "comment";
                if (tags.propertyIsEnumerable(cur)) return "typeName";
                if (storage.propertyIsEnumerable(cur)) return "modifier";
                if (modifier.propertyIsEnumerable(cur)) return "modifier";
                if (accessTypes.propertyIsEnumerable(cur)) return "modifier";

                return "variableName";
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        next,
                        end = false;
                    while ((next = stream.next()) != null) {
                        if (next == quote && !escaped) {
                            var afterNext = stream.peek();
                            //look if the character if the quote is like the B in '10100010'B
                            if (afterNext) {
                                afterNext = afterNext.toLowerCase();
                                if (
                                    afterNext == "b" ||
                                    afterNext == "h" ||
                                    afterNext == "o"
                                )
                                    stream.next();
                            }
                            end = true;
                            break;
                        }
                        escaped = !escaped && next == "\\";
                    }
                    if (end || !(escaped || multiLineStrings))
                        state.tokenize = null;
                    return "string";
                };
            }

            function Context(indented, column, type, align, prev) {
                this.indented = indented;
                this.column = column;
                this.type = type;
                this.align = align;
                this.prev = prev;
            }
            function pushContext(state, col, type) {
                var indent = state.indented;
                if (state.context && state.context.type == "statement")
                    indent = state.context.indented;
                return (state.context = new Context(
                    indent,
                    col,
                    type,
                    null,
                    state.context
                ));
            }
            function popContext(state) {
                var t = state.context.type;
                if (t == ")" || t == "]" || t == "}")
                    state.indented = state.context.indented;
                return (state.context = state.context.prev);
            }

            //Interface
            return {
                startState: function() {
                    return {
                        tokenize: null,
                        context: new Context(-2, 0, "top", false),
                        indented: 0,
                        startOfLine: true,
                    };
                },

                token: function(stream, state) {
                    var ctx = state.context;
                    if (stream.sol()) {
                        if (ctx.align == null) ctx.align = false;
                        state.indented = stream.indentation();
                        state.startOfLine = true;
                    }
                    if (stream.eatSpace()) return null;
                    curPunc = null;
                    var style = (state.tokenize || tokenBase)(stream, state);
                    if (style == "comment") return style;
                    if (ctx.align == null) ctx.align = true;

                    if (
                        (curPunc == ";" || curPunc == ":" || curPunc == ",") &&
                        ctx.type == "statement"
                    ) {
                        popContext(state);
                    } else if (curPunc == "{")
                        pushContext(state, stream.column(), "}");
                    else if (curPunc == "[")
                        pushContext(state, stream.column(), "]");
                    else if (curPunc == "(")
                        pushContext(state, stream.column(), ")");
                    else if (curPunc == "}") {
                        while (ctx.type == "statement") ctx = popContext(state);
                        if (ctx.type == "}") ctx = popContext(state);
                        while (ctx.type == "statement") ctx = popContext(state);
                    } else if (curPunc == ctx.type) popContext(state);
                    else if (
                        indentStatements &&
                        (((ctx.type == "}" || ctx.type == "top") &&
                            curPunc != ";") ||
                            (ctx.type == "statement" &&
                                curPunc == "newstatement"))
                    )
                        pushContext(state, stream.column(), "statement");

                    state.startOfLine = false;
                    return style;
                },

                languageData: {
                    indentOnInput: /^\s*[{}]$/,
                    commentTokens: { line: "--" },
                },
            };
        }

        exports.asn1 = asn1;
    }
    _M18();
    function _M19() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function forEach(arr, f) {
            for (var i = 0; i < arr.length; i++) f(arr[i], i);
        }
        function some(arr, f) {
            for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;
            return false;
        }

        // Words
        var words = {
            // Words that introduce unnamed definitions like "define interface"
            unnamedDefinition: ["interface"],

            // Words that introduce simple named definitions like "define library"
            namedDefinition: [
                "module",
                "library",
                "macro",
                "C-struct",
                "C-union",
                "C-function",
                "C-callable-wrapper",
            ],

            // Words that introduce type definitions like "define class".
            // These are also parameterized like "define method" and are
            // appended to otherParameterizedDefinitionWords
            typeParameterizedDefinition: [
                "class",
                "C-subtype",
                "C-mapped-subtype",
            ],

            // Words that introduce trickier definitions like "define method".
            // These require special definitions to be added to startExpressions
            otherParameterizedDefinition: [
                "method",
                "function",
                "C-variable",
                "C-address",
            ],

            // Words that introduce module constant definitions.
            // These must also be simple definitions and are
            // appended to otherSimpleDefinitionWords
            constantSimpleDefinition: ["constant"],

            // Words that introduce module variable definitions.
            // These must also be simple definitions and are
            // appended to otherSimpleDefinitionWords
            variableSimpleDefinition: ["variable"],

            // Other words that introduce simple definitions
            // (without implicit bodies).
            otherSimpleDefinition: [
                "generic",
                "domain",
                "C-pointer-type",
                "table",
            ],

            // Words that begin statements with implicit bodies.
            statement: [
                "if",
                "block",
                "begin",
                "method",
                "case",
                "for",
                "select",
                "when",
                "unless",
                "until",
                "while",
                "iterate",
                "profiling",
                "dynamic-bind",
            ],

            // Patterns that act as separators in compound statements.
            // This may include any general pattern that must be indented
            // specially.
            separator: [
                "finally",
                "exception",
                "cleanup",
                "else",
                "elseif",
                "afterwards",
            ],

            // Keywords that do not require special indentation handling,
            // but which should be highlighted
            other: [
                "above",
                "below",
                "by",
                "from",
                "handler",
                "in",
                "instance",
                "let",
                "local",
                "otherwise",
                "slot",
                "subclass",
                "then",
                "to",
                "keyed-by",
                "virtual",
            ],

            // Condition signaling function calls
            signalingCalls: [
                "signal",
                "error",
                "cerror",
                "break",
                "check-type",
                "abort",
            ],
        };

        words["otherDefinition"] = words["unnamedDefinition"]
            .concat(words["namedDefinition"])
            .concat(words["otherParameterizedDefinition"]);

        words["definition"] = words["typeParameterizedDefinition"].concat(
            words["otherDefinition"]
        );

        words["parameterizedDefinition"] = words[
            "typeParameterizedDefinition"
        ].concat(words["otherParameterizedDefinition"]);

        words["simpleDefinition"] = words["constantSimpleDefinition"]
            .concat(words["variableSimpleDefinition"])
            .concat(words["otherSimpleDefinition"]);

        words["keyword"] = words["statement"]
            .concat(words["separator"])
            .concat(words["other"]);

        // Patterns
        var symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
        var symbol = new RegExp("^" + symbolPattern);
        var patterns = {
            // Symbols with special syntax
            symbolKeyword: symbolPattern + ":",
            symbolClass: "<" + symbolPattern + ">",
            symbolGlobal: "\\*" + symbolPattern + "\\*",
            symbolConstant: "\\$" + symbolPattern,
        };
        var patternStyles = {
            symbolKeyword: "atom",
            symbolClass: "tag",
            symbolGlobal: "variableName.standard",
            symbolConstant: "variableName.constant",
        };

        // Compile all patterns to regular expressions
        for (var patternName in patterns)
            if (patterns.hasOwnProperty(patternName))
                patterns[patternName] = new RegExp("^" + patterns[patternName]);

        // Names beginning "with-" and "without-" are commonly
        // used as statement macro
        patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];

        var styles = {};
        styles["keyword"] = "keyword";
        styles["definition"] = "def";
        styles["simpleDefinition"] = "def";
        styles["signalingCalls"] = "builtin";

        // protected words lookup table
        var wordLookup = {};
        var styleLookup = {};

        forEach(
            ["keyword", "definition", "simpleDefinition", "signalingCalls"],
            function(type) {
                forEach(words[type], function(word) {
                    wordLookup[word] = type;
                    styleLookup[word] = styles[type];
                });
            }
        );

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }

        function tokenBase(stream, state) {
            // String
            var ch = stream.peek();
            if (ch == "'" || ch == '"') {
                stream.next();
                return chain(stream, state, tokenString(ch, "string"));
            }
            // Comment
            else if (ch == "/") {
                stream.next();
                if (stream.eat("*")) {
                    return chain(stream, state, tokenComment);
                } else if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
                stream.backUp(1);
            }
            // Decimal
            else if (/[+\-\d\.]/.test(ch)) {
                if (
                    stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||
                    stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||
                    stream.match(/^[+-]?\d+/)
                ) {
                    return "number";
                }
            }
            // Hash
            else if (ch == "#") {
                stream.next();
                // Symbol with string syntax
                ch = stream.peek();
                if (ch == '"') {
                    stream.next();
                    return chain(stream, state, tokenString('"', "string"));
                }
                // Binary number
                else if (ch == "b") {
                    stream.next();
                    stream.eatWhile(/[01]/);
                    return "number";
                }
                // Hex number
                else if (ch == "x") {
                    stream.next();
                    stream.eatWhile(/[\da-f]/i);
                    return "number";
                }
                // Octal number
                else if (ch == "o") {
                    stream.next();
                    stream.eatWhile(/[0-7]/);
                    return "number";
                }
                // Token concatenation in macros
                else if (ch == "#") {
                    stream.next();
                    return "punctuation";
                }
                // Sequence literals
                else if (ch == "[" || ch == "(") {
                    stream.next();
                    return "bracket";
                    // Hash symbol
                } else if (
                    stream.match(/f|t|all-keys|include|key|next|rest/i)
                ) {
                    return "atom";
                } else {
                    stream.eatWhile(/[-a-zA-Z]/);
                    return "error";
                }
            } else if (ch == "~") {
                stream.next();
                ch = stream.peek();
                if (ch == "=") {
                    stream.next();
                    ch = stream.peek();
                    if (ch == "=") {
                        stream.next();
                        return "operator";
                    }
                    return "operator";
                }
                return "operator";
            } else if (ch == ":") {
                stream.next();
                ch = stream.peek();
                if (ch == "=") {
                    stream.next();
                    return "operator";
                } else if (ch == ":") {
                    stream.next();
                    return "punctuation";
                }
            } else if ("[](){}".indexOf(ch) != -1) {
                stream.next();
                return "bracket";
            } else if (".,".indexOf(ch) != -1) {
                stream.next();
                return "punctuation";
            } else if (stream.match("end")) {
                return "keyword";
            }
            for (var name in patterns) {
                if (patterns.hasOwnProperty(name)) {
                    var pattern = patterns[name];
                    if (
                        (pattern instanceof Array &&
                            some(pattern, function(p) {
                                return stream.match(p);
                            })) ||
                        stream.match(pattern)
                    )
                        return patternStyles[name];
                }
            }
            if (/[+\-*\/^=<>&|]/.test(ch)) {
                stream.next();
                return "operator";
            }
            if (stream.match("define")) {
                return "def";
            } else {
                stream.eatWhile(/[\w\-]/);
                // Keyword
                if (wordLookup.hasOwnProperty(stream.current())) {
                    return styleLookup[stream.current()];
                } else if (stream.current().match(symbol)) {
                    return "variable";
                } else {
                    stream.next();
                    return "variableName.standard";
                }
            }
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                maybeNested = false,
                nestedCount = 0,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    if (nestedCount > 0) {
                        nestedCount--;
                    } else {
                        state.tokenize = tokenBase;
                        break;
                    }
                } else if (ch == "*" && maybeNested) {
                    nestedCount++;
                }
                maybeEnd = ch == "*";
                maybeNested = ch == "/";
            }
            return "comment";
        }

        function tokenString(quote, style) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) {
                    state.tokenize = tokenBase;
                }
                return style;
            };
        }

        // Interface
        const dylan = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    currentIndent: 0,
                };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                return style;
            },
            languageData: {
                commentTokens: { block: { open: "/*", close: "*/" } },
            },
        };

        exports.dylan = dylan;
    }
    _M19();
    function _M20() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        function metaHook(stream, state) {
            if (!state.startOfLine) return false;
            stream.skipToEnd();
            return "meta";
        }

        var keyword = words(
            "abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode"
        );
        var variable = words(
            "apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait"
        );
        var variable_2 = words(
            "__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath"
        );
        var variable_3 = words(
            "ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode"
        );
        var builtin = words(
            "checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when"
        );
        var blockKeywords = words(
            "catch class do else finally for if switch try while"
        );
        var atoms = words("true false null");
        var hooks = { "#": metaHook };
        var isOperatorChar = /[+\-*&%=<>!?|\/]/;

        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (hooks[ch]) {
                var result = hooks[ch](stream, state);
                if (result !== false) return result;
            }
            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                curPunc = ch;
                return null;
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (ch == "/") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_]/);
            var cur = stream.current().toLowerCase();
            if (keyword.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "keyword";
            } else if (variable.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "variable";
            } else if (variable_2.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "modifier";
            } else if (variable_3.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "type";
            } else if (builtin.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "builtin";
            } else {
                //Data types are of from KEYWORD##
                var i = cur.length - 1;
                while (i >= 0 && (!isNaN(cur[i]) || cur[i] == "_")) --i;

                if (i > 0) {
                    var cur2 = cur.substr(0, i + 1);
                    if (variable_3.propertyIsEnumerable(cur2)) {
                        if (blockKeywords.propertyIsEnumerable(cur2))
                            curPunc = "newstatement";
                        return "type";
                    }
                }
            }
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return null;
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) state.tokenize = tokenBase;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            return (state.context = new Context(
                state.indented,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface

        const ecl = {
            startState: function(indentUnit) {
                return {
                    tokenize: null,
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment" || style == "meta") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":") &&
                    ctx.type == "statement"
                )
                    popContext(state);
                else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    ctx.type == "}" ||
                    ctx.type == "top" ||
                    (ctx.type == "statement" && curPunc == "newstatement")
                )
                    pushContext(state, stream.column(), "statement");
                state.startOfLine = false;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase && state.tokenize != null)
                    return 0;
                var ctx = state.context,
                    firstChar = textAfter && textAfter.charAt(0);
                if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
                var closing = firstChar == ctx.type;
                if (ctx.type == "statement")
                    return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
                else if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
            },
        };

        exports.ecl = ecl;
    }
    _M20();
    function _M21() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordObj(words) {
            var o = {};
            for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
            return o;
        }
        var keywords = wordObj([
            "note",
            "across",
            "when",
            "variant",
            "until",
            "unique",
            "undefine",
            "then",
            "strip",
            "select",
            "retry",
            "rescue",
            "require",
            "rename",
            "reference",
            "redefine",
            "prefix",
            "once",
            "old",
            "obsolete",
            "loop",
            "local",
            "like",
            "is",
            "inspect",
            "infix",
            "include",
            "if",
            "frozen",
            "from",
            "external",
            "export",
            "ensure",
            "end",
            "elseif",
            "else",
            "do",
            "creation",
            "create",
            "check",
            "alias",
            "agent",
            "separate",
            "invariant",
            "inherit",
            "indexing",
            "feature",
            "expanded",
            "deferred",
            "class",
            "Void",
            "True",
            "Result",
            "Precursor",
            "False",
            "Current",
            "create",
            "attached",
            "detachable",
            "as",
            "and",
            "implies",
            "not",
            "or",
        ]);
        var operators = wordObj([":=", "and then", "and", "or", "<<", ">>"]);

        function chain(newtok, stream, state) {
            state.tokenize.push(newtok);
            return newtok(stream, state);
        }

        function tokenBase(stream, state) {
            if (stream.eatSpace()) return null;
            var ch = stream.next();
            if (ch == '"' || ch == "'") {
                return chain(readQuoted(ch, "string"), stream, state);
            } else if (ch == "-" && stream.eat("-")) {
                stream.skipToEnd();
                return "comment";
            } else if (ch == ":" && stream.eat("=")) {
                return "operator";
            } else if (/[0-9]/.test(ch)) {
                stream.eatWhile(/[xXbBCc0-9\.]/);
                stream.eat(/[\?\!]/);
                return "variable";
            } else if (/[a-zA-Z_0-9]/.test(ch)) {
                stream.eatWhile(/[a-zA-Z_0-9]/);
                stream.eat(/[\?\!]/);
                return "variable";
            } else if (/[=+\-\/*^%<>~]/.test(ch)) {
                stream.eatWhile(/[=+\-\/*^%<>~]/);
                return "operator";
            } else {
                return null;
            }
        }

        function readQuoted(quote, style, unescaped) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && (unescaped || !escaped)) {
                        state.tokenize.pop();
                        break;
                    }
                    escaped = !escaped && ch == "%";
                }
                return style;
            };
        }

        const eiffel = {
            startState: function() {
                return { tokenize: [tokenBase] };
            },

            token: function(stream, state) {
                var style = state.tokenize[state.tokenize.length - 1](
                    stream,
                    state
                );
                if (style == "variable") {
                    var word = stream.current();
                    style = keywords.propertyIsEnumerable(stream.current())
                        ? "keyword"
                        : operators.propertyIsEnumerable(stream.current())
                            ? "operator"
                            : /^[A-Z][A-Z_0-9]*$/g.test(word)
                                ? "tag"
                                : /^0[bB][0-1]+$/g.test(word)
                                    ? "number"
                                    : /^0[cC][0-7]+$/g.test(word)
                                        ? "number"
                                        : /^0[xX][a-fA-F0-9]+$/g.test(word)
                                            ? "number"
                                            : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word)
                                                ? "number"
                                                : /^[0-9]+$/g.test(word)
                                                    ? "number"
                                                    : "variable";
                }
                return style;
            },
            languageData: {
                commentTokens: { line: "--" },
            },
        };

        exports.eiffel = eiffel;
    }
    _M21();
    function _M22() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function switchState(source, setState, f) {
            setState(f);
            return f(source, setState);
        }

        var lowerRE = /[a-z]/;
        var upperRE = /[A-Z]/;
        var innerRE = /[a-zA-Z0-9_]/;

        var digitRE = /[0-9]/;
        var hexRE = /[0-9A-Fa-f]/;
        var symbolRE = /[-&*+.\\/<>=?^|:]/;
        var specialRE = /[(),[\]{}]/;
        var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer

        function normal() {
            return function(source, setState) {
                if (source.eatWhile(spacesRE)) {
                    return null;
                }

                var char = source.next();

                if (specialRE.test(char)) {
                    return char === "{" && source.eat("-")
                        ? switchState(source, setState, chompMultiComment(1))
                        : char === "[" && source.match("glsl|")
                            ? switchState(source, setState, chompGlsl)
                            : "builtin";
                }

                if (char === "'") {
                    return switchState(source, setState, chompChar);
                }

                if (char === '"') {
                    return source.eat('"')
                        ? source.eat('"')
                            ? switchState(source, setState, chompMultiString)
                            : "string"
                        : switchState(source, setState, chompSingleString);
                }

                if (upperRE.test(char)) {
                    source.eatWhile(innerRE);
                    return "type";
                }

                if (lowerRE.test(char)) {
                    var isDef = source.pos === 1;
                    source.eatWhile(innerRE);
                    return isDef ? "def" : "variable";
                }

                if (digitRE.test(char)) {
                    if (char === "0") {
                        if (source.eat(/[xX]/)) {
                            source.eatWhile(hexRE); // should require at least 1
                            return "number";
                        }
                    } else {
                        source.eatWhile(digitRE);
                    }
                    if (source.eat(".")) {
                        source.eatWhile(digitRE); // should require at least 1
                    }
                    if (source.eat(/[eE]/)) {
                        source.eat(/[-+]/);
                        source.eatWhile(digitRE); // should require at least 1
                    }
                    return "number";
                }

                if (symbolRE.test(char)) {
                    if (char === "-" && source.eat("-")) {
                        source.skipToEnd();
                        return "comment";
                    }
                    source.eatWhile(symbolRE);
                    return "keyword";
                }

                if (char === "_") {
                    return "keyword";
                }

                return "error";
            };
        }

        function chompMultiComment(nest) {
            if (nest == 0) {
                return normal();
            }
            return function(source, setState) {
                while (!source.eol()) {
                    var char = source.next();
                    if (char == "{" && source.eat("-")) {
                        ++nest;
                    } else if (char == "-" && source.eat("}")) {
                        --nest;
                        if (nest === 0) {
                            setState(normal());
                            return "comment";
                        }
                    }
                }
                setState(chompMultiComment(nest));
                return "comment";
            };
        }

        function chompMultiString(source, setState) {
            while (!source.eol()) {
                var char = source.next();
                if (char === '"' && source.eat('"') && source.eat('"')) {
                    setState(normal());
                    return "string";
                }
            }
            return "string";
        }

        function chompSingleString(source, setState) {
            while (source.skipTo('\\"')) {
                source.next();
                source.next();
            }
            if (source.skipTo('"')) {
                source.next();
                setState(normal());
                return "string";
            }
            source.skipToEnd();
            setState(normal());
            return "error";
        }

        function chompChar(source, setState) {
            while (source.skipTo("\\'")) {
                source.next();
                source.next();
            }
            if (source.skipTo("'")) {
                source.next();
                setState(normal());
                return "string";
            }
            source.skipToEnd();
            setState(normal());
            return "error";
        }

        function chompGlsl(source, setState) {
            while (!source.eol()) {
                var char = source.next();
                if (char === "|" && source.eat("]")) {
                    setState(normal());
                    return "string";
                }
            }
            return "string";
        }

        var wellKnownWords = {
            case: 1,
            of: 1,
            as: 1,
            if: 1,
            then: 1,
            else: 1,
            let: 1,
            in: 1,
            type: 1,
            alias: 1,
            module: 1,
            where: 1,
            import: 1,
            exposing: 1,
            port: 1,
        };

        const elm = {
            startState: function() {
                return { f: normal() };
            },
            copyState: function(s) {
                return { f: s.f };
            },

            token: function(stream, state) {
                var type = state.f(stream, function(s) {
                    state.f = s;
                });
                var word = stream.current();
                return wellKnownWords.hasOwnProperty(word) ? "keyword" : type;
            },
        };

        exports.elm = elm;
    }
    _M22();
    function _M23() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        /////////////////////////////////////////////////////////////////////////////
        // constants

        var typeWords = ["-type", "-spec", "-export_type", "-opaque"];

        var keywordWords = [
            "after",
            "begin",
            "catch",
            "case",
            "cond",
            "end",
            "fun",
            "if",
            "let",
            "of",
            "query",
            "receive",
            "try",
            "when",
        ];

        var separatorRE = /[\->,;]/;
        var separatorWords = ["->", ";", ","];

        var operatorAtomWords = [
            "and",
            "andalso",
            "band",
            "bnot",
            "bor",
            "bsl",
            "bsr",
            "bxor",
            "div",
            "not",
            "or",
            "orelse",
            "rem",
            "xor",
        ];

        var operatorSymbolRE = /[\+\-\*\/<>=\|:!]/;
        var operatorSymbolWords = [
            "=",
            "+",
            "-",
            "*",
            "/",
            ">",
            ">=",
            "<",
            "=<",
            "=:=",
            "==",
            "=/=",
            "/=",
            "||",
            "<-",
            "!",
        ];

        var openParenRE = /[<\(\[\{]/;
        var openParenWords = ["<<", "(", "[", "{"];

        var closeParenRE = /[>\)\]\}]/;
        var closeParenWords = ["}", "]", ")", ">>"];

        var guardWords = [
            "is_atom",
            "is_binary",
            "is_bitstring",
            "is_boolean",
            "is_float",
            "is_function",
            "is_integer",
            "is_list",
            "is_number",
            "is_pid",
            "is_port",
            "is_record",
            "is_reference",
            "is_tuple",
            "atom",
            "binary",
            "bitstring",
            "boolean",
            "function",
            "integer",
            "list",
            "number",
            "pid",
            "port",
            "record",
            "reference",
            "tuple",
        ];

        var bifWords = [
            "abs",
            "adler32",
            "adler32_combine",
            "alive",
            "apply",
            "atom_to_binary",
            "atom_to_list",
            "binary_to_atom",
            "binary_to_existing_atom",
            "binary_to_list",
            "binary_to_term",
            "bit_size",
            "bitstring_to_list",
            "byte_size",
            "check_process_code",
            "contact_binary",
            "crc32",
            "crc32_combine",
            "date",
            "decode_packet",
            "delete_module",
            "disconnect_node",
            "element",
            "erase",
            "exit",
            "float",
            "float_to_list",
            "garbage_collect",
            "get",
            "get_keys",
            "group_leader",
            "halt",
            "hd",
            "integer_to_list",
            "internal_bif",
            "iolist_size",
            "iolist_to_binary",
            "is_alive",
            "is_atom",
            "is_binary",
            "is_bitstring",
            "is_boolean",
            "is_float",
            "is_function",
            "is_integer",
            "is_list",
            "is_number",
            "is_pid",
            "is_port",
            "is_process_alive",
            "is_record",
            "is_reference",
            "is_tuple",
            "length",
            "link",
            "list_to_atom",
            "list_to_binary",
            "list_to_bitstring",
            "list_to_existing_atom",
            "list_to_float",
            "list_to_integer",
            "list_to_pid",
            "list_to_tuple",
            "load_module",
            "make_ref",
            "module_loaded",
            "monitor_node",
            "node",
            "node_link",
            "node_unlink",
            "nodes",
            "notalive",
            "now",
            "open_port",
            "pid_to_list",
            "port_close",
            "port_command",
            "port_connect",
            "port_control",
            "pre_loaded",
            "process_flag",
            "process_info",
            "processes",
            "purge_module",
            "put",
            "register",
            "registered",
            "round",
            "self",
            "setelement",
            "size",
            "spawn",
            "spawn_link",
            "spawn_monitor",
            "spawn_opt",
            "split_binary",
            "statistics",
            "term_to_binary",
            "time",
            "throw",
            "tl",
            "trunc",
            "tuple_size",
            "tuple_to_list",
            "unlink",
            "unregister",
            "whereis",
        ];

        // upper case: [A-Z] [Ø-Þ] [À-Ö]
        // lower case: [a-z] [ß-ö] [ø-ÿ]
        var anumRE = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
        var escapesRE =
            /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;

        /////////////////////////////////////////////////////////////////////////////
        // tokenizer

        function tokenizer(stream, state) {
            // in multi-line string
            if (state.in_string) {
                state.in_string = !doubleQuote(stream);
                return rval(state, stream, "string");
            }

            // in multi-line atom
            if (state.in_atom) {
                state.in_atom = !singleQuote(stream);
                return rval(state, stream, "atom");
            }

            // whitespace
            if (stream.eatSpace()) {
                return rval(state, stream, "whitespace");
            }

            // attributes and type specs
            if (
                !peekToken(state) &&
                stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)
            ) {
                if (is_member(stream.current(), typeWords)) {
                    return rval(state, stream, "type");
                } else {
                    return rval(state, stream, "attribute");
                }
            }

            var ch = stream.next();

            // comment
            if (ch == "%") {
                stream.skipToEnd();
                return rval(state, stream, "comment");
            }

            // colon
            if (ch == ":") {
                return rval(state, stream, "colon");
            }

            // macro
            if (ch == "?") {
                stream.eatSpace();
                stream.eatWhile(anumRE);
                return rval(state, stream, "macro");
            }

            // record
            if (ch == "#") {
                stream.eatSpace();
                stream.eatWhile(anumRE);
                return rval(state, stream, "record");
            }

            // dollar escape
            if (ch == "$") {
                if (stream.next() == "\\" && !stream.match(escapesRE)) {
                    return rval(state, stream, "error");
                }
                return rval(state, stream, "number");
            }

            // dot
            if (ch == ".") {
                return rval(state, stream, "dot");
            }

            // quoted atom
            if (ch == "'") {
                if (!(state.in_atom = !singleQuote(stream))) {
                    if (stream.match(/\s*\/\s*[0-9]/, false)) {
                        stream.match(/\s*\/\s*[0-9]/, true);
                        return rval(state, stream, "fun"); // 'f'/0 style fun
                    }
                    if (
                        stream.match(/\s*\(/, false) ||
                        stream.match(/\s*:/, false)
                    ) {
                        return rval(state, stream, "function");
                    }
                }
                return rval(state, stream, "atom");
            }

            // string
            if (ch == '"') {
                state.in_string = !doubleQuote(stream);
                return rval(state, stream, "string");
            }

            // variable
            if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {
                stream.eatWhile(anumRE);
                return rval(state, stream, "variable");
            }

            // atom/keyword/BIF/function
            if (/[a-z_ß-öø-ÿ]/.test(ch)) {
                stream.eatWhile(anumRE);

                if (stream.match(/\s*\/\s*[0-9]/, false)) {
                    stream.match(/\s*\/\s*[0-9]/, true);
                    return rval(state, stream, "fun"); // f/0 style fun
                }

                var w = stream.current();

                if (is_member(w, keywordWords)) {
                    return rval(state, stream, "keyword");
                } else if (is_member(w, operatorAtomWords)) {
                    return rval(state, stream, "operator");
                } else if (stream.match(/\s*\(/, false)) {
                    // 'put' and 'erlang:put' are bifs, 'foo:put' is not
                    if (
                        is_member(w, bifWords) &&
                        (peekToken(state).token != ":" ||
                            peekToken(state, 2).token == "erlang")
                    ) {
                        return rval(state, stream, "builtin");
                    } else if (is_member(w, guardWords)) {
                        return rval(state, stream, "guard");
                    } else {
                        return rval(state, stream, "function");
                    }
                } else if (lookahead(stream) == ":") {
                    if (w == "erlang") {
                        return rval(state, stream, "builtin");
                    } else {
                        return rval(state, stream, "function");
                    }
                } else if (is_member(w, ["true", "false"])) {
                    return rval(state, stream, "boolean");
                } else {
                    return rval(state, stream, "atom");
                }
            }

            // number
            var digitRE = /[0-9]/;
            var radixRE = /[0-9a-zA-Z]/; // 36#zZ style int
            if (digitRE.test(ch)) {
                stream.eatWhile(digitRE);
                if (stream.eat("#")) {
                    // 36#aZ  style integer
                    if (!stream.eatWhile(radixRE)) {
                        stream.backUp(1); //"36#" - syntax error
                    }
                } else if (stream.eat(".")) {
                    // float
                    if (!stream.eatWhile(digitRE)) {
                        stream.backUp(1); // "3." - probably end of function
                    } else {
                        if (stream.eat(/[eE]/)) {
                            // float with exponent
                            if (stream.eat(/[-+]/)) {
                                if (!stream.eatWhile(digitRE)) {
                                    stream.backUp(2); // "2e-" - syntax error
                                }
                            } else {
                                if (!stream.eatWhile(digitRE)) {
                                    stream.backUp(1); // "2e" - syntax error
                                }
                            }
                        }
                    }
                }
                return rval(state, stream, "number"); // normal integer
            }

            // open parens
            if (nongreedy(stream, openParenRE, openParenWords)) {
                return rval(state, stream, "open_paren");
            }

            // close parens
            if (nongreedy(stream, closeParenRE, closeParenWords)) {
                return rval(state, stream, "close_paren");
            }

            // separators
            if (greedy(stream, separatorRE, separatorWords)) {
                return rval(state, stream, "separator");
            }

            // operators
            if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {
                return rval(state, stream, "operator");
            }

            return rval(state, stream, null);
        }

        /////////////////////////////////////////////////////////////////////////////
        // utilities
        function nongreedy(stream, re, words) {
            if (stream.current().length == 1 && re.test(stream.current())) {
                stream.backUp(1);
                while (re.test(stream.peek())) {
                    stream.next();
                    if (is_member(stream.current(), words)) {
                        return true;
                    }
                }
                stream.backUp(stream.current().length - 1);
            }
            return false;
        }

        function greedy(stream, re, words) {
            if (stream.current().length == 1 && re.test(stream.current())) {
                while (re.test(stream.peek())) {
                    stream.next();
                }
                while (0 < stream.current().length) {
                    if (is_member(stream.current(), words)) {
                        return true;
                    } else {
                        stream.backUp(1);
                    }
                }
                stream.next();
            }
            return false;
        }

        function doubleQuote(stream) {
            return quote(stream, '"', "\\");
        }

        function singleQuote(stream) {
            return quote(stream, "'", "\\");
        }

        function quote(stream, quoteChar, escapeChar) {
            while (!stream.eol()) {
                var ch = stream.next();
                if (ch == quoteChar) {
                    return true;
                } else if (ch == escapeChar) {
                    stream.next();
                }
            }
            return false;
        }

        function lookahead(stream) {
            var m = stream.match(/^\s*([^\s%])/, false);
            return m ? m[1] : "";
        }

        function is_member(element, list) {
            return -1 < list.indexOf(element);
        }

        function rval(state, stream, type) {
            // parse stack
            pushToken(state, realToken(type, stream));

            // map erlang token type to CodeMirror style class
            //     erlang             -> CodeMirror tag
            switch (type) {
                case "atom":
                    return "atom";
                case "attribute":
                    return "attribute";
                case "boolean":
                    return "atom";
                case "builtin":
                    return "builtin";
                case "close_paren":
                    return null;
                case "colon":
                    return null;
                case "comment":
                    return "comment";
                case "dot":
                    return null;
                case "error":
                    return "error";
                case "fun":
                    return "meta";
                case "function":
                    return "tag";
                case "guard":
                    return "property";
                case "keyword":
                    return "keyword";
                case "macro":
                    return "macroName";
                case "number":
                    return "number";
                case "open_paren":
                    return null;
                case "operator":
                    return "operator";
                case "record":
                    return "bracket";
                case "separator":
                    return null;
                case "string":
                    return "string";
                case "type":
                    return "def";
                case "variable":
                    return "variable";
                default:
                    return null;
            }
        }

        function aToken(tok, col, ind, typ) {
            return { token: tok, column: col, indent: ind, type: typ };
        }

        function realToken(type, stream) {
            return aToken(
                stream.current(),
                stream.column(),
                stream.indentation(),
                type
            );
        }

        function fakeToken(type) {
            return aToken(type, 0, 0, type);
        }

        function peekToken(state, depth) {
            var len = state.tokenStack.length;
            var dep = depth ? depth : 1;

            if (len < dep) {
                return false;
            } else {
                return state.tokenStack[len - dep];
            }
        }

        function pushToken(state, token) {
            if (!(token.type == "comment" || token.type == "whitespace")) {
                state.tokenStack = maybe_drop_pre(state.tokenStack, token);
                state.tokenStack = maybe_drop_post(state.tokenStack);
            }
        }

        function maybe_drop_pre(s, token) {
            var last = s.length - 1;

            if (0 < last && s[last].type === "record" && token.type === "dot") {
                s.pop();
            } else if (0 < last && s[last].type === "group") {
                s.pop();
                s.push(token);
            } else {
                s.push(token);
            }
            return s;
        }

        function maybe_drop_post(s) {
            if (!s.length) return s;
            var last = s.length - 1;

            if (s[last].type === "dot") {
                return [];
            }
            if (
                last > 1 &&
                s[last].type === "fun" &&
                s[last - 1].token === "fun"
            ) {
                return s.slice(0, last - 1);
            }
            switch (s[last].token) {
                case "}":
                    return d(s, { g: ["{"] });
                case "]":
                    return d(s, { i: ["["] });
                case ")":
                    return d(s, { i: ["("] });
                case ">>":
                    return d(s, { i: ["<<"] });
                case "end":
                    return d(s, {
                        i: ["begin", "case", "fun", "if", "receive", "try"],
                    });
                case ",":
                    return d(s, {
                        e: [
                            "begin",
                            "try",
                            "when",
                            "->",
                            ",",
                            "(",
                            "[",
                            "{",
                            "<<",
                        ],
                    });
                case "->":
                    return d(s, {
                        r: ["when"],
                        m: ["try", "if", "case", "receive"],
                    });
                case ";":
                    return d(s, {
                        E: ["case", "fun", "if", "receive", "try", "when"],
                    });
                case "catch":
                    return d(s, { e: ["try"] });
                case "of":
                    return d(s, { e: ["case"] });
                case "after":
                    return d(s, { e: ["receive", "try"] });
                default:
                    return s;
            }
        }

        function d(stack, tt) {
            // stack is a stack of Token objects.
            // tt is an object; {type:tokens}
            // type is a char, tokens is a list of token strings.
            // The function returns (possibly truncated) stack.
            // It will descend the stack, looking for a Token such that Token.token
            //  is a member of tokens. If it does not find that, it will normally (but
            //  see "E" below) return stack. If it does find a match, it will remove
            //  all the Tokens between the top and the matched Token.
            // If type is "m", that is all it does.
            // If type is "i", it will also remove the matched Token and the top Token.
            // If type is "g", like "i", but add a fake "group" token at the top.
            // If type is "r", it will remove the matched Token, but not the top Token.
            // If type is "e", it will keep the matched Token but not the top Token.
            // If type is "E", it behaves as for type "e", except if there is no match,
            //  in which case it will return an empty stack.

            for (var type in tt) {
                var len = stack.length - 1;
                var tokens = tt[type];
                for (var i = len - 1; -1 < i; i--) {
                    if (is_member(stack[i].token, tokens)) {
                        var ss = stack.slice(0, i);
                        switch (type) {
                            case "m":
                                return ss.concat(stack[i]).concat(stack[len]);
                            case "r":
                                return ss.concat(stack[len]);
                            case "i":
                                return ss;
                            case "g":
                                return ss.concat(fakeToken("group"));
                            case "E":
                                return ss.concat(stack[i]);
                            case "e":
                                return ss.concat(stack[i]);
                        }
                    }
                }
            }
            return type == "E" ? [] : stack;
        }

        /////////////////////////////////////////////////////////////////////////////
        // indenter

        function indenter(state, textAfter, cx) {
            var t;
            var wordAfter = wordafter(textAfter);
            var currT = peekToken(state, 1);
            var prevT = peekToken(state, 2);

            if (state.in_string || state.in_atom) {
                return null;
            } else if (!prevT) {
                return 0;
            } else if (currT.token == "when") {
                return currT.column + cx.unit;
            } else if (wordAfter === "when" && prevT.type === "function") {
                return prevT.indent + cx.unit;
            } else if (wordAfter === "(" && currT.token === "fun") {
                return currT.column + 3;
            } else if (
                wordAfter === "catch" &&
                (t = getToken(state, ["try"]))
            ) {
                return t.column;
            } else if (is_member(wordAfter, ["end", "after", "of"])) {
                t = getToken(state, [
                    "begin",
                    "case",
                    "fun",
                    "if",
                    "receive",
                    "try",
                ]);
                return t ? t.column : null;
            } else if (is_member(wordAfter, closeParenWords)) {
                t = getToken(state, openParenWords);
                return t ? t.column : null;
            } else if (
                is_member(currT.token, [",", "|", "||"]) ||
                is_member(wordAfter, [",", "|", "||"])
            ) {
                t = postcommaToken(state);
                return t ? t.column + t.token.length : cx.unit;
            } else if (currT.token == "->") {
                if (is_member(prevT.token, ["receive", "case", "if", "try"])) {
                    return prevT.column + cx.unit + cx.unit;
                } else {
                    return prevT.column + cx.unit;
                }
            } else if (is_member(currT.token, openParenWords)) {
                return currT.column + currT.token.length;
            } else {
                t = defaultToken(state);
                return truthy(t) ? t.column + cx.unit : 0;
            }
        }

        function wordafter(str) {
            var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);

            return truthy(m) && m.index === 0 ? m[0] : "";
        }

        function postcommaToken(state) {
            var objs = state.tokenStack.slice(0, -1);
            var i = getTokenIndex(objs, "type", ["open_paren"]);

            return truthy(objs[i]) ? objs[i] : false;
        }

        function defaultToken(state) {
            var objs = state.tokenStack;
            var stop = getTokenIndex(objs, "type", [
                "open_paren",
                "separator",
                "keyword",
            ]);
            var oper = getTokenIndex(objs, "type", ["operator"]);

            if (truthy(stop) && truthy(oper) && stop < oper) {
                return objs[stop + 1];
            } else if (truthy(stop)) {
                return objs[stop];
            } else {
                return false;
            }
        }

        function getToken(state, tokens) {
            var objs = state.tokenStack;
            var i = getTokenIndex(objs, "token", tokens);

            return truthy(objs[i]) ? objs[i] : false;
        }

        function getTokenIndex(objs, propname, propvals) {
            for (var i = objs.length - 1; -1 < i; i--) {
                if (is_member(objs[i][propname], propvals)) {
                    return i;
                }
            }
            return false;
        }

        function truthy(x) {
            return x !== false && x != null;
        }

        /////////////////////////////////////////////////////////////////////////////
        // this object defines the mode

        const erlang = {
            startState() {
                return { tokenStack: [], in_string: false, in_atom: false };
            },

            token: tokenizer,

            indent: indenter,

            languageData: {
                commentTokens: { line: "%" },
            },
        };

        exports.erlang = erlang;
    }
    _M23();
    function _M24() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function simpleMode(states) {
            ensureState(states, "start");
            var states_ = {},
                meta = states.languageData || {},
                hasIndentation = false;
            for (var state in states)
                if (state != meta && states.hasOwnProperty(state)) {
                    var list = (states_[state] = []),
                        orig = states[state];
                    for (var i = 0; i < orig.length; i++) {
                        var data = orig[i];
                        list.push(new Rule(data, states));
                        if (data.indent || data.dedent) hasIndentation = true;
                    }
                }
            return {
                startState: function() {
                    return {
                        state: "start",
                        pending: null,
                        indent: hasIndentation ? [] : null,
                    };
                },
                copyState: function(state) {
                    var s = {
                        state: state.state,
                        pending: state.pending,
                        indent: state.indent && state.indent.slice(0),
                    };
                    if (state.stack) s.stack = state.stack.slice(0);
                    return s;
                },
                token: tokenFunction(states_),
                indent: indentFunction(states_, meta),
                languageData: meta,
            };
        }
        function ensureState(states, name) {
            if (!states.hasOwnProperty(name))
                throw new Error("Undefined state " + name + " in simple mode");
        }

        function toRegex(val, caret) {
            if (!val) return /(?:)/;
            var flags = "";
            if (val instanceof RegExp) {
                if (val.ignoreCase) flags = "i";
                val = val.source;
            } else {
                val = String(val);
            }
            return new RegExp(
                (caret === false ? "" : "^") + "(?:" + val + ")",
                flags
            );
        }

        function asToken(val) {
            if (!val) return null;
            if (val.apply) return val;
            if (typeof val == "string") return val.replace(/\./g, " ");
            var result = [];
            for (var i = 0; i < val.length; i++)
                result.push(val[i] && val[i].replace(/\./g, " "));
            return result;
        }

        function Rule(data, states) {
            if (data.next || data.push)
                ensureState(states, data.next || data.push);
            this.regex = toRegex(data.regex);
            this.token = asToken(data.token);
            this.data = data;
        }

        function tokenFunction(states) {
            return function(stream, state) {
                if (state.pending) {
                    var pend = state.pending.shift();
                    if (state.pending.length == 0) state.pending = null;
                    stream.pos += pend.text.length;
                    return pend.token;
                }

                var curState = states[state.state];
                for (var i = 0; i < curState.length; i++) {
                    var rule = curState[i];
                    var matches =
                        (!rule.data.sol || stream.sol()) &&
                        stream.match(rule.regex);
                    if (matches) {
                        if (rule.data.next) {
                            state.state = rule.data.next;
                        } else if (rule.data.push) {
                            (state.stack || (state.stack = [])).push(
                                state.state
                            );
                            state.state = rule.data.push;
                        } else if (
                            rule.data.pop &&
                            state.stack &&
                            state.stack.length
                        ) {
                            state.state = state.stack.pop();
                        }

                        if (rule.data.indent)
                            state.indent.push(
                                stream.indentation() + stream.indentUnit
                            );
                        if (rule.data.dedent) state.indent.pop();
                        var token = rule.token;
                        if (token && token.apply) token = token(matches);
                        if (
                            matches.length > 2 &&
                            rule.token &&
                            typeof rule.token != "string"
                        ) {
                            state.pending = [];
                            for (var j = 2; j < matches.length; j++)
                                if (matches[j])
                                    state.pending.push({
                                        text: matches[j],
                                        token: rule.token[j - 1],
                                    });
                            stream.backUp(
                                matches[0].length -
                                (matches[1] ? matches[1].length : 0)
                            );
                            return token[0];
                        } else if (token && token.join) {
                            return token[0];
                        } else {
                            return token;
                        }
                    }
                }
                stream.next();
                return null;
            };
        }

        function indentFunction(states, meta) {
            return function(state, textAfter) {
                if (
                    state.indent == null ||
                    (meta.dontIndentStates &&
                        meta.doneIndentState.indexOf(state.state) > -1)
                )
                    return null;

                var pos = state.indent.length - 1,
                    rules = states[state.state];
                scan: for (; ;) {
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        if (
                            rule.data.dedent &&
                            rule.data.dedentIfLineStart !== false
                        ) {
                            var m = rule.regex.exec(textAfter);
                            if (m && m[0]) {
                                pos--;
                                if (rule.next || rule.push)
                                    rules = states[rule.next || rule.push];
                                textAfter = textAfter.slice(m[0].length);
                                continue scan;
                            }
                        }
                    }
                    break;
                }
                return pos < 0 ? 0 : state.indent[pos];
            };
        }

        const factor = simpleMode({
            start: [
                // comments
                { regex: /#?!.*/, token: "comment" },
                // strings """, multiline --> state
                { regex: /"""/, token: "string", next: "string3" },
                {
                    regex: /(STRING:)(\s)/,
                    token: ["keyword", null],
                    next: "string2",
                },
                { regex: /\S*?"/, token: "string", next: "string" },
                // numbers: dec, hex, unicode, bin, fractional, complex
                {
                    regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/,
                    token: "number",
                },
                //{regex: /[+-]?/} //fractional
                // definition: defining word, defined word, etc
                {
                    regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/,
                    token: ["keyword", null, "def", null, "bracket"],
                    next: "stack",
                },
                // method definition: defining word, type, defined word, etc
                {
                    regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/,
                    token: ["keyword", null, "def", null, "tag"],
                },
                // vocabulary using --> state
                { regex: /USING\:/, token: "keyword", next: "vocabulary" },
                // vocabulary definition/use
                {
                    regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/,
                    token: ["keyword", null, "tag"],
                },
                // definition: a defining word, defined word
                {
                    regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/,
                    token: ["keyword", null, "def"],
                },
                // "keywords", incl. ; t f . [ ] { } defining words
                {
                    regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/,
                    token: "keyword",
                },
                // <constructors> and the like
                { regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin" },
                { regex: /[\)><]+\S+(?=\s|$)/, token: "builtin" },
                // operators
                { regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword" },
                // any id (?)
                { regex: /\S+/, token: "variable" },
                { regex: /\s+|./, token: null },
            ],
            vocabulary: [
                { regex: /;/, token: "keyword", next: "start" },
                { regex: /\S+/, token: "tag" },
                { regex: /\s+|./, token: null },
            ],
            string: [
                { regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start" },
                { regex: /.*/, token: "string" },
            ],
            string2: [
                { regex: /^;/, token: "keyword", next: "start" },
                { regex: /.*/, token: "string" },
            ],
            string3: [
                { regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start" },
                { regex: /.*/, token: "string" },
            ],
            stack: [
                { regex: /\)/, token: "bracket", next: "start" },
                { regex: /--/, token: "bracket" },
                { regex: /\S+/, token: "meta" },
                { regex: /\s+|./, token: null },
            ],
            languageData: {
                dontIndentStates: [
                    "start",
                    "vocabulary",
                    "string",
                    "string3",
                    "stack",
                ],
                commentTokens: { line: "!" },
            },
        });

        exports.factor = factor;
    }
    _M24();
    function _M25() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var keywords = {
            term: true,
            method: true,
            accu: true,
            rule: true,
            then: true,
            is: true,
            and: true,
            or: true,
            if: true,
            default: true,
        };

        var start_blocks = {
            var_input: true,
            var_output: true,
            fuzzify: true,
            defuzzify: true,
            function_block: true,
            ruleblock: true,
        };

        var end_blocks = {
            end_ruleblock: true,
            end_defuzzify: true,
            end_function_block: true,
            end_fuzzify: true,
            end_var: true,
        };

        var atoms = {
            true: true,
            false: true,
            nan: true,
            real: true,
            min: true,
            max: true,
            cog: true,
            cogs: true,
        };

        var isOperatorChar = /[+\-*&^%:=<>!|\/]/;

        function tokenBase(stream, state) {
            var ch = stream.next();

            if (/[\d\.]/.test(ch)) {
                if (ch == ".") {
                    stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
                } else if (ch == "0") {
                    stream.match(/^[xX][0-9a-fA-F]+/) ||
                        stream.match(/^0[0-7]+/);
                } else {
                    stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
                }
                return "number";
            }

            if (ch == "/" || ch == "(") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);

            var cur = stream.current().toLowerCase();
            if (
                keywords.propertyIsEnumerable(cur) ||
                start_blocks.propertyIsEnumerable(cur) ||
                end_blocks.propertyIsEnumerable(cur)
            ) {
                return "keyword";
            }
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return "variable";
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if ((ch == "/" || ch == ")") && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }

        function pushContext(state, col, type) {
            return (state.context = new Context(
                state.indented,
                col,
                type,
                null,
                state.context
            ));
        }

        function popContext(state) {
            if (!state.context.prev) return;
            var t = state.context.type;
            if (t == "end_block") state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface

        const fcl = {
            startState: function(indentUnit) {
                return {
                    tokenize: null,
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;

                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment") return style;
                if (ctx.align == null) ctx.align = true;

                var cur = stream.current().toLowerCase();

                if (start_blocks.propertyIsEnumerable(cur))
                    pushContext(state, stream.column(), "end_block");
                else if (end_blocks.propertyIsEnumerable(cur))
                    popContext(state);

                state.startOfLine = false;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase && state.tokenize != null)
                    return 0;
                var ctx = state.context;

                var closing = end_blocks.propertyIsEnumerable(textAfter);
                if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                commentTokens: {
                    line: "//",
                    block: { open: "(*", close: "*)" },
                },
            },
        };

        exports.fcl = fcl;
    }
    _M25();
    function _M26() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function toWordList(words) {
            var ret = [];
            words.split(" ").forEach(function(e) {
                ret.push({ name: e });
            });
            return ret;
        }

        var coreWordList = toWordList(
            "INVERT AND OR XOR\
 2* 2/ LSHIFT RSHIFT\
 0= = 0< < > U< MIN MAX\
 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\
 >R R> R@\
 + - 1+ 1- ABS NEGATE\
 S>D * M* UM*\
 FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\
 HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\
 ALIGN ALIGNED +! ALLOT\
 CHAR [CHAR] [ ] BL\
 FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\
 ; DOES> >BODY\
 EVALUATE\
 SOURCE >IN\
 <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\
 FILL MOVE\
 . CR EMIT SPACE SPACES TYPE U. .R U.R\
 ACCEPT\
 TRUE FALSE\
 <> U> 0<> 0>\
 NIP TUCK ROLL PICK\
 2>R 2R@ 2R>\
 WITHIN UNUSED MARKER\
 I J\
 TO\
 COMPILE, [COMPILE]\
 SAVE-INPUT RESTORE-INPUT\
 PAD ERASE\
 2LITERAL DNEGATE\
 D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\
 M+ M*/ D. D.R 2ROT DU<\
 CATCH THROW\
 FREE RESIZE ALLOCATE\
 CS-PICK CS-ROLL\
 GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\
 PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\
 -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL"
        );

        var immediateWordList = toWordList(
            "IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE"
        );

        function searchWordList(wordList, word) {
            var i;
            for (i = wordList.length - 1; i >= 0; i--) {
                if (wordList[i].name === word.toUpperCase()) {
                    return wordList[i];
                }
            }
            return undefined;
        }
        const forth = {
            startState: function() {
                return {
                    state: "",
                    base: 10,
                    coreWordList: coreWordList,
                    immediateWordList: immediateWordList,
                    wordList: [],
                };
            },
            token: function(stream, stt) {
                var mat;
                if (stream.eatSpace()) {
                    return null;
                }
                if (stt.state === "") {
                    // interpretation
                    if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
                        stt.state = " compilation";
                        return "builtin";
                    }
                    mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
                    if (mat) {
                        stt.wordList.push({ name: mat[2].toUpperCase() });
                        stt.state = " compilation";
                        return "def";
                    }
                    mat = stream.match(
                        /^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i
                    );
                    if (mat) {
                        stt.wordList.push({ name: mat[2].toUpperCase() });
                        return "def";
                    }
                    mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
                    if (mat) {
                        return "builtin";
                    }
                } else {
                    // compilation
                    // ; [
                    if (stream.match(/^(\;|\[)(\s)/)) {
                        stt.state = "";
                        stream.backUp(1);
                        return "builtin";
                    }
                    if (stream.match(/^(\;|\[)($)/)) {
                        stt.state = "";
                        return "builtin";
                    }
                    if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
                        return "builtin";
                    }
                }

                // dynamic wordlist
                mat = stream.match(/^(\S+)(\s+|$)/);
                if (mat) {
                    if (searchWordList(stt.wordList, mat[1]) !== undefined) {
                        return "variable";
                    }

                    // comments
                    if (mat[1] === "\\") {
                        stream.skipToEnd();
                        return "comment";
                    }

                    // core words
                    if (
                        searchWordList(stt.coreWordList, mat[1]) !== undefined
                    ) {
                        return "builtin";
                    }
                    if (
                        searchWordList(stt.immediateWordList, mat[1]) !==
                        undefined
                    ) {
                        return "keyword";
                    }

                    if (mat[1] === "(") {
                        stream.eatWhile(function(s) {
                            return s !== ")";
                        });
                        stream.eat(")");
                        return "comment";
                    }

                    // // strings
                    if (mat[1] === ".(") {
                        stream.eatWhile(function(s) {
                            return s !== ")";
                        });
                        stream.eat(")");
                        return "string";
                    }
                    if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
                        stream.eatWhile(function(s) {
                            return s !== '"';
                        });
                        stream.eat('"');
                        return "string";
                    }

                    // numbers
                    if (mat[1] - 0xfffffffff) {
                        return "number";
                    }
                    // if (mat[1].match(/^[-+]?[0-9]+\.[0-9]*/)) {
                    //     return 'number';
                    // }

                    return "atom";
                }
            },
        };

        exports.forth = forth;
    }
    _M26();
    function _M27() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(array) {
            var keys = {};
            for (var i = 0; i < array.length; ++i) {
                keys[array[i]] = true;
            }
            return keys;
        }

        var keywords = words([
            "abstract",
            "accept",
            "allocatable",
            "allocate",
            "array",
            "assign",
            "asynchronous",
            "backspace",
            "bind",
            "block",
            "byte",
            "call",
            "case",
            "class",
            "close",
            "common",
            "contains",
            "continue",
            "cycle",
            "data",
            "deallocate",
            "decode",
            "deferred",
            "dimension",
            "do",
            "elemental",
            "else",
            "encode",
            "end",
            "endif",
            "entry",
            "enumerator",
            "equivalence",
            "exit",
            "external",
            "extrinsic",
            "final",
            "forall",
            "format",
            "function",
            "generic",
            "go",
            "goto",
            "if",
            "implicit",
            "import",
            "include",
            "inquire",
            "intent",
            "interface",
            "intrinsic",
            "module",
            "namelist",
            "non_intrinsic",
            "non_overridable",
            "none",
            "nopass",
            "nullify",
            "open",
            "optional",
            "options",
            "parameter",
            "pass",
            "pause",
            "pointer",
            "print",
            "private",
            "program",
            "protected",
            "public",
            "pure",
            "read",
            "recursive",
            "result",
            "return",
            "rewind",
            "save",
            "select",
            "sequence",
            "stop",
            "subroutine",
            "target",
            "then",
            "to",
            "type",
            "use",
            "value",
            "volatile",
            "where",
            "while",
            "write",
        ]);
        var builtins = words([
            "abort",
            "abs",
            "access",
            "achar",
            "acos",
            "adjustl",
            "adjustr",
            "aimag",
            "aint",
            "alarm",
            "all",
            "allocated",
            "alog",
            "amax",
            "amin",
            "amod",
            "and",
            "anint",
            "any",
            "asin",
            "associated",
            "atan",
            "besj",
            "besjn",
            "besy",
            "besyn",
            "bit_size",
            "btest",
            "cabs",
            "ccos",
            "ceiling",
            "cexp",
            "char",
            "chdir",
            "chmod",
            "clog",
            "cmplx",
            "command_argument_count",
            "complex",
            "conjg",
            "cos",
            "cosh",
            "count",
            "cpu_time",
            "cshift",
            "csin",
            "csqrt",
            "ctime",
            "c_funloc",
            "c_loc",
            "c_associated",
            "c_null_ptr",
            "c_null_funptr",
            "c_f_pointer",
            "c_null_char",
            "c_alert",
            "c_backspace",
            "c_form_feed",
            "c_new_line",
            "c_carriage_return",
            "c_horizontal_tab",
            "c_vertical_tab",
            "dabs",
            "dacos",
            "dasin",
            "datan",
            "date_and_time",
            "dbesj",
            "dbesj",
            "dbesjn",
            "dbesy",
            "dbesy",
            "dbesyn",
            "dble",
            "dcos",
            "dcosh",
            "ddim",
            "derf",
            "derfc",
            "dexp",
            "digits",
            "dim",
            "dint",
            "dlog",
            "dlog",
            "dmax",
            "dmin",
            "dmod",
            "dnint",
            "dot_product",
            "dprod",
            "dsign",
            "dsinh",
            "dsin",
            "dsqrt",
            "dtanh",
            "dtan",
            "dtime",
            "eoshift",
            "epsilon",
            "erf",
            "erfc",
            "etime",
            "exit",
            "exp",
            "exponent",
            "extends_type_of",
            "fdate",
            "fget",
            "fgetc",
            "float",
            "floor",
            "flush",
            "fnum",
            "fputc",
            "fput",
            "fraction",
            "fseek",
            "fstat",
            "ftell",
            "gerror",
            "getarg",
            "get_command",
            "get_command_argument",
            "get_environment_variable",
            "getcwd",
            "getenv",
            "getgid",
            "getlog",
            "getpid",
            "getuid",
            "gmtime",
            "hostnm",
            "huge",
            "iabs",
            "iachar",
            "iand",
            "iargc",
            "ibclr",
            "ibits",
            "ibset",
            "ichar",
            "idate",
            "idim",
            "idint",
            "idnint",
            "ieor",
            "ierrno",
            "ifix",
            "imag",
            "imagpart",
            "index",
            "int",
            "ior",
            "irand",
            "isatty",
            "ishft",
            "ishftc",
            "isign",
            "iso_c_binding",
            "is_iostat_end",
            "is_iostat_eor",
            "itime",
            "kill",
            "kind",
            "lbound",
            "len",
            "len_trim",
            "lge",
            "lgt",
            "link",
            "lle",
            "llt",
            "lnblnk",
            "loc",
            "log",
            "logical",
            "long",
            "lshift",
            "lstat",
            "ltime",
            "matmul",
            "max",
            "maxexponent",
            "maxloc",
            "maxval",
            "mclock",
            "merge",
            "move_alloc",
            "min",
            "minexponent",
            "minloc",
            "minval",
            "mod",
            "modulo",
            "mvbits",
            "nearest",
            "new_line",
            "nint",
            "not",
            "or",
            "pack",
            "perror",
            "precision",
            "present",
            "product",
            "radix",
            "rand",
            "random_number",
            "random_seed",
            "range",
            "real",
            "realpart",
            "rename",
            "repeat",
            "reshape",
            "rrspacing",
            "rshift",
            "same_type_as",
            "scale",
            "scan",
            "second",
            "selected_int_kind",
            "selected_real_kind",
            "set_exponent",
            "shape",
            "short",
            "sign",
            "signal",
            "sinh",
            "sin",
            "sleep",
            "sngl",
            "spacing",
            "spread",
            "sqrt",
            "srand",
            "stat",
            "sum",
            "symlnk",
            "system",
            "system_clock",
            "tan",
            "tanh",
            "time",
            "tiny",
            "transfer",
            "transpose",
            "trim",
            "ttynam",
            "ubound",
            "umask",
            "unlink",
            "unpack",
            "verify",
            "xor",
            "zabs",
            "zcos",
            "zexp",
            "zlog",
            "zsin",
            "zsqrt",
        ]);

        var dataTypes = words([
            "c_bool",
            "c_char",
            "c_double",
            "c_double_complex",
            "c_float",
            "c_float_complex",
            "c_funptr",
            "c_int",
            "c_int16_t",
            "c_int32_t",
            "c_int64_t",
            "c_int8_t",
            "c_int_fast16_t",
            "c_int_fast32_t",
            "c_int_fast64_t",
            "c_int_fast8_t",
            "c_int_least16_t",
            "c_int_least32_t",
            "c_int_least64_t",
            "c_int_least8_t",
            "c_intmax_t",
            "c_intptr_t",
            "c_long",
            "c_long_double",
            "c_long_double_complex",
            "c_long_long",
            "c_ptr",
            "c_short",
            "c_signed_char",
            "c_size_t",
            "character",
            "complex",
            "double",
            "integer",
            "logical",
            "real",
        ]);
        var isOperatorChar = /[+\-*&=<>\/\:]/;
        var litOperator = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;

        function tokenBase(stream, state) {
            if (stream.match(litOperator)) {
                return "operator";
            }

            var ch = stream.next();
            if (ch == "!") {
                stream.skipToEnd();
                return "comment";
            }
            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\[\]\(\),]/.test(ch)) {
                return null;
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_]/);
            var word = stream.current().toLowerCase();

            if (keywords.hasOwnProperty(word)) {
                return "keyword";
            }
            if (
                builtins.hasOwnProperty(word) ||
                dataTypes.hasOwnProperty(word)
            ) {
                return "builtin";
            }
            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) state.tokenize = null;
                return "string";
            };
        }

        // Interface

        const fortran = {
            startState: function() {
                return { tokenize: null };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment" || style == "meta") return style;
                return style;
            },
        };

        exports.fortran = fortran;
    }
    _M27();
    function _M28() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkGas(arch) {
            // If an architecture is specified, its initialization function may
            // populate this array with custom parsing functions which will be
            // tried in the event that the standard functions do not find a match.
            var custom = [];

            // The symbol used to start a line comment changes based on the target
            // architecture.
            // If no architecture is pased in "parserConfig" then only multiline
            // comments will have syntax support.
            var lineCommentStartSymbol = "";

            // These directives are architecture independent.
            // Machine specific directives should go in their respective
            // architecture initialization function.
            // Reference:
            // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops
            var directives = {
                ".abort": "builtin",
                ".align": "builtin",
                ".altmacro": "builtin",
                ".ascii": "builtin",
                ".asciz": "builtin",
                ".balign": "builtin",
                ".balignw": "builtin",
                ".balignl": "builtin",
                ".bundle_align_mode": "builtin",
                ".bundle_lock": "builtin",
                ".bundle_unlock": "builtin",
                ".byte": "builtin",
                ".cfi_startproc": "builtin",
                ".comm": "builtin",
                ".data": "builtin",
                ".def": "builtin",
                ".desc": "builtin",
                ".dim": "builtin",
                ".double": "builtin",
                ".eject": "builtin",
                ".else": "builtin",
                ".elseif": "builtin",
                ".end": "builtin",
                ".endef": "builtin",
                ".endfunc": "builtin",
                ".endif": "builtin",
                ".equ": "builtin",
                ".equiv": "builtin",
                ".eqv": "builtin",
                ".err": "builtin",
                ".error": "builtin",
                ".exitm": "builtin",
                ".extern": "builtin",
                ".fail": "builtin",
                ".file": "builtin",
                ".fill": "builtin",
                ".float": "builtin",
                ".func": "builtin",
                ".global": "builtin",
                ".gnu_attribute": "builtin",
                ".hidden": "builtin",
                ".hword": "builtin",
                ".ident": "builtin",
                ".if": "builtin",
                ".incbin": "builtin",
                ".include": "builtin",
                ".int": "builtin",
                ".internal": "builtin",
                ".irp": "builtin",
                ".irpc": "builtin",
                ".lcomm": "builtin",
                ".lflags": "builtin",
                ".line": "builtin",
                ".linkonce": "builtin",
                ".list": "builtin",
                ".ln": "builtin",
                ".loc": "builtin",
                ".loc_mark_labels": "builtin",
                ".local": "builtin",
                ".long": "builtin",
                ".macro": "builtin",
                ".mri": "builtin",
                ".noaltmacro": "builtin",
                ".nolist": "builtin",
                ".octa": "builtin",
                ".offset": "builtin",
                ".org": "builtin",
                ".p2align": "builtin",
                ".popsection": "builtin",
                ".previous": "builtin",
                ".print": "builtin",
                ".protected": "builtin",
                ".psize": "builtin",
                ".purgem": "builtin",
                ".pushsection": "builtin",
                ".quad": "builtin",
                ".reloc": "builtin",
                ".rept": "builtin",
                ".sbttl": "builtin",
                ".scl": "builtin",
                ".section": "builtin",
                ".set": "builtin",
                ".short": "builtin",
                ".single": "builtin",
                ".size": "builtin",
                ".skip": "builtin",
                ".sleb128": "builtin",
                ".space": "builtin",
                ".stab": "builtin",
                ".string": "builtin",
                ".struct": "builtin",
                ".subsection": "builtin",
                ".symver": "builtin",
                ".tag": "builtin",
                ".text": "builtin",
                ".title": "builtin",
                ".type": "builtin",
                ".uleb128": "builtin",
                ".val": "builtin",
                ".version": "builtin",
                ".vtable_entry": "builtin",
                ".vtable_inherit": "builtin",
                ".warning": "builtin",
                ".weak": "builtin",
                ".weakref": "builtin",
                ".word": "builtin",
            };

            var registers = {};

            function x86() {
                lineCommentStartSymbol = "#";

                registers.al = "variable";
                registers.ah = "variable";
                registers.ax = "variable";
                registers.eax = "variableName.special";
                registers.rax = "variableName.special";

                registers.bl = "variable";
                registers.bh = "variable";
                registers.bx = "variable";
                registers.ebx = "variableName.special";
                registers.rbx = "variableName.special";

                registers.cl = "variable";
                registers.ch = "variable";
                registers.cx = "variable";
                registers.ecx = "variableName.special";
                registers.rcx = "variableName.special";

                registers.dl = "variable";
                registers.dh = "variable";
                registers.dx = "variable";
                registers.edx = "variableName.special";
                registers.rdx = "variableName.special";

                registers.si = "variable";
                registers.esi = "variableName.special";
                registers.rsi = "variableName.special";

                registers.di = "variable";
                registers.edi = "variableName.special";
                registers.rdi = "variableName.special";

                registers.sp = "variable";
                registers.esp = "variableName.special";
                registers.rsp = "variableName.special";

                registers.bp = "variable";
                registers.ebp = "variableName.special";
                registers.rbp = "variableName.special";

                registers.ip = "variable";
                registers.eip = "variableName.special";
                registers.rip = "variableName.special";

                registers.cs = "keyword";
                registers.ds = "keyword";
                registers.ss = "keyword";
                registers.es = "keyword";
                registers.fs = "keyword";
                registers.gs = "keyword";
            }

            function armv6() {
                // Reference:
                // http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf
                // http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf
                lineCommentStartSymbol = "@";
                directives.syntax = "builtin";

                registers.r0 = "variable";
                registers.r1 = "variable";
                registers.r2 = "variable";
                registers.r3 = "variable";
                registers.r4 = "variable";
                registers.r5 = "variable";
                registers.r6 = "variable";
                registers.r7 = "variable";
                registers.r8 = "variable";
                registers.r9 = "variable";
                registers.r10 = "variable";
                registers.r11 = "variable";
                registers.r12 = "variable";

                registers.sp = "variableName.special";
                registers.lr = "variableName.special";
                registers.pc = "variableName.special";
                registers.r13 = registers.sp;
                registers.r14 = registers.lr;
                registers.r15 = registers.pc;

                custom.push(function(ch, stream) {
                    if (ch === "#") {
                        stream.eatWhile(/\w/);
                        return "number";
                    }
                });
            }

            if (arch === "x86") {
                x86();
            } else if (arch === "arm" || arch === "armv6") {
                armv6();
            }

            function nextUntilUnescaped(stream, end) {
                var escaped = false,
                    next;
                while ((next = stream.next()) != null) {
                    if (next === end && !escaped) {
                        return false;
                    }
                    escaped = !escaped && next === "\\";
                }
                return escaped;
            }

            function clikeComment(stream, state) {
                var maybeEnd = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch === "/" && maybeEnd) {
                        state.tokenize = null;
                        break;
                    }
                    maybeEnd = ch === "*";
                }
                return "comment";
            }

            return {
                startState: function() {
                    return {
                        tokenize: null,
                    };
                },

                token: function(stream, state) {
                    if (state.tokenize) {
                        return state.tokenize(stream, state);
                    }

                    if (stream.eatSpace()) {
                        return null;
                    }

                    var style,
                        cur,
                        ch = stream.next();

                    if (ch === "/") {
                        if (stream.eat("*")) {
                            state.tokenize = clikeComment;
                            return clikeComment(stream, state);
                        }
                    }

                    if (ch === lineCommentStartSymbol) {
                        stream.skipToEnd();
                        return "comment";
                    }

                    if (ch === '"') {
                        nextUntilUnescaped(stream, '"');
                        return "string";
                    }

                    if (ch === ".") {
                        stream.eatWhile(/\w/);
                        cur = stream.current().toLowerCase();
                        style = directives[cur];
                        return style || null;
                    }

                    if (ch === "=") {
                        stream.eatWhile(/\w/);
                        return "tag";
                    }

                    if (ch === "{") {
                        return "bracket";
                    }

                    if (ch === "}") {
                        return "bracket";
                    }

                    if (/\d/.test(ch)) {
                        if (ch === "0" && stream.eat("x")) {
                            stream.eatWhile(/[0-9a-fA-F]/);
                            return "number";
                        }
                        stream.eatWhile(/\d/);
                        return "number";
                    }

                    if (/\w/.test(ch)) {
                        stream.eatWhile(/\w/);
                        if (stream.eat(":")) {
                            return "tag";
                        }
                        cur = stream.current().toLowerCase();
                        style = registers[cur];
                        return style || null;
                    }

                    for (var i = 0; i < custom.length; i++) {
                        style = custom[i](ch, stream, state);
                        if (style) {
                            return style;
                        }
                    }
                },

                languageData: {
                    commentTokens: {
                        line: lineCommentStartSymbol,
                        block: { open: "/*", close: "*/" },
                    },
                },
            };
        }
        const gas = mkGas("x86");
        const gasArm = mkGas("arm");

        exports.gas = gas;
        exports.gasArm = gasArm;
    }
    _M28();
    function _M29() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        const gherkin = {
            startState: function() {
                return {
                    lineNumber: 0,
                    tableHeaderLine: false,
                    allowFeature: true,
                    allowBackground: false,
                    allowScenario: false,
                    allowSteps: false,
                    allowPlaceholders: false,
                    allowMultilineArgument: false,
                    inMultilineString: false,
                    inMultilineTable: false,
                    inKeywordLine: false,
                };
            },
            token: function(stream, state) {
                if (stream.sol()) {
                    state.lineNumber++;
                    state.inKeywordLine = false;
                    if (state.inMultilineTable) {
                        state.tableHeaderLine = false;
                        if (!stream.match(/\s*\|/, false)) {
                            state.allowMultilineArgument = false;
                            state.inMultilineTable = false;
                        }
                    }
                }

                stream.eatSpace();

                if (state.allowMultilineArgument) {
                    // STRING
                    if (state.inMultilineString) {
                        if (stream.match('"""')) {
                            state.inMultilineString = false;
                            state.allowMultilineArgument = false;
                        } else {
                            stream.match(/.*/);
                        }
                        return "string";
                    }

                    // TABLE
                    if (state.inMultilineTable) {
                        if (stream.match(/\|\s*/)) {
                            return "bracket";
                        } else {
                            stream.match(/[^\|]*/);
                            return state.tableHeaderLine ? "header" : "string";
                        }
                    }

                    // DETECT START
                    if (stream.match('"""')) {
                        // String
                        state.inMultilineString = true;
                        return "string";
                    } else if (stream.match("|")) {
                        // Table
                        state.inMultilineTable = true;
                        state.tableHeaderLine = true;
                        return "bracket";
                    }
                }

                // LINE COMMENT
                if (stream.match(/#.*/)) {
                    return "comment";

                    // TAG
                } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
                    return "tag";

                    // FEATURE
                } else if (
                    !state.inKeywordLine &&
                    state.allowFeature &&
                    stream.match(
                        /(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/
                    )
                ) {
                    state.allowScenario = true;
                    state.allowBackground = true;
                    state.allowPlaceholders = false;
                    state.allowSteps = false;
                    state.allowMultilineArgument = false;
                    state.inKeywordLine = true;
                    return "keyword";

                    // BACKGROUND
                } else if (
                    !state.inKeywordLine &&
                    state.allowBackground &&
                    stream.match(
                        /(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/
                    )
                ) {
                    state.allowPlaceholders = false;
                    state.allowSteps = true;
                    state.allowBackground = false;
                    state.allowMultilineArgument = false;
                    state.inKeywordLine = true;
                    return "keyword";

                    // SCENARIO OUTLINE
                } else if (
                    !state.inKeywordLine &&
                    state.allowScenario &&
                    stream.match(
                        /(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/
                    )
                ) {
                    state.allowPlaceholders = true;
                    state.allowSteps = true;
                    state.allowMultilineArgument = false;
                    state.inKeywordLine = true;
                    return "keyword";

                    // EXAMPLES
                } else if (
                    state.allowScenario &&
                    stream.match(
                        /(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/
                    )
                ) {
                    state.allowPlaceholders = false;
                    state.allowSteps = true;
                    state.allowBackground = false;
                    state.allowMultilineArgument = true;
                    return "keyword";

                    // SCENARIO
                } else if (
                    !state.inKeywordLine &&
                    state.allowScenario &&
                    stream.match(
                        /(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/
                    )
                ) {
                    state.allowPlaceholders = false;
                    state.allowSteps = true;
                    state.allowBackground = false;
                    state.allowMultilineArgument = false;
                    state.inKeywordLine = true;
                    return "keyword";

                    // STEPS
                } else if (
                    !state.inKeywordLine &&
                    state.allowSteps &&
                    stream.match(
                        /(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/
                    )
                ) {
                    state.inStep = true;
                    state.allowPlaceholders = true;
                    state.allowMultilineArgument = true;
                    state.inKeywordLine = true;
                    return "keyword";

                    // INLINE STRING
                } else if (stream.match(/"[^"]*"?/)) {
                    return "string";

                    // PLACEHOLDER
                } else if (
                    state.allowPlaceholders &&
                    stream.match(/<[^>]*>?/)
                ) {
                    return "variable";

                    // Fall through
                } else {
                    stream.next();
                    stream.eatWhile(/[^@"<#]/);
                    return null;
                }
            },
        };

        exports.gherkin = gherkin;
    }
    _M29();
    function _M30() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var keywords = {
            break: true,
            case: true,
            chan: true,
            const: true,
            continue: true,
            default: true,
            defer: true,
            else: true,
            fallthrough: true,
            for: true,
            func: true,
            go: true,
            goto: true,
            if: true,
            import: true,
            interface: true,
            map: true,
            package: true,
            range: true,
            return: true,
            select: true,
            struct: true,
            switch: true,
            type: true,
            var: true,
            bool: true,
            byte: true,
            complex64: true,
            complex128: true,
            float32: true,
            float64: true,
            int8: true,
            int16: true,
            int32: true,
            int64: true,
            string: true,
            uint8: true,
            uint16: true,
            uint32: true,
            uint64: true,
            int: true,
            uint: true,
            uintptr: true,
            error: true,
            rune: true,
        };

        var atoms = {
            true: true,
            false: true,
            iota: true,
            nil: true,
            append: true,
            cap: true,
            close: true,
            complex: true,
            copy: true,
            delete: true,
            imag: true,
            len: true,
            make: true,
            new: true,
            panic: true,
            print: true,
            println: true,
            real: true,
            recover: true,
        };

        var isOperatorChar = /[+\-*&^%:=<>!|\/]/;

        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == '"' || ch == "'" || ch == "`") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\d\.]/.test(ch)) {
                if (ch == ".") {
                    stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
                } else if (ch == "0") {
                    stream.match(/^[xX][0-9a-fA-F]+/) ||
                        stream.match(/^0[0-7]+/);
                } else {
                    stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
                }
                return "number";
            }
            if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                curPunc = ch;
                return null;
            }
            if (ch == "/") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            var cur = stream.current();
            if (keywords.propertyIsEnumerable(cur)) {
                if (cur == "case" || cur == "default") curPunc = "case";
                return "keyword";
            }
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && quote != "`" && next == "\\";
                }
                if (end || !(escaped || quote == "`"))
                    state.tokenize = tokenBase;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            return (state.context = new Context(
                state.indented,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            if (!state.context.prev) return;
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface

        const go = {
            startState: function(indentUnit) {
                return {
                    tokenize: null,
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                    if (ctx.type == "case") ctx.type = "}";
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment") return style;
                if (ctx.align == null) ctx.align = true;

                if (curPunc == "{") pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "case") ctx.type = "case";
                else if (curPunc == "}" && ctx.type == "}") popContext(state);
                else if (curPunc == ctx.type) popContext(state);
                state.startOfLine = false;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase && state.tokenize != null)
                    return null;
                var ctx = state.context,
                    firstChar = textAfter && textAfter.charAt(0);
                if (
                    ctx.type == "case" &&
                    /^(?:case|default)\b/.test(textAfter)
                ) {
                    state.context.type = "}";
                    return ctx.indented;
                }
                var closing = firstChar == ctx.type;
                if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s([{}]|case |default\s*:)$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
            },
        };

        exports.go = go;
    }
    _M30();
    function _M31() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        var keywords = words(
            "abstract as assert boolean break byte case catch char class const continue def default " +
            "do double else enum extends final finally float for goto if implements import in " +
            "instanceof int interface long native new package private protected public return " +
            "short static strictfp super switch synchronized threadsafe throw throws trait transient " +
            "try void volatile while"
        );
        var blockKeywords = words(
            "catch class def do else enum finally for if interface switch trait try while"
        );
        var standaloneKeywords = words("return break continue");
        var atoms = words("null true false this");

        var curPunc;
        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == '"' || ch == "'") {
                return startString(ch, stream, state);
            }
            if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                curPunc = ch;
                return null;
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                if (stream.eat(/eE/)) {
                    stream.eat(/\+\-/);
                    stream.eatWhile(/\d/);
                }
                return "number";
            }
            if (ch == "/") {
                if (stream.eat("*")) {
                    state.tokenize.push(tokenComment);
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
                if (expectExpression(state.lastToken, false)) {
                    return startString(ch, stream, state);
                }
            }
            if (ch == "-" && stream.eat(">")) {
                curPunc = "->";
                return null;
            }
            if (/[+\-*&%=<>!?|\/~]/.test(ch)) {
                stream.eatWhile(/[+\-*&%=<>|~]/);
                return "operator";
            }
            stream.eatWhile(/[\w\$_]/);
            if (ch == "@") {
                stream.eatWhile(/[\w\$_\.]/);
                return "meta";
            }
            if (state.lastToken == ".") return "property";
            if (stream.eat(":")) {
                curPunc = "proplabel";
                return "property";
            }
            var cur = stream.current();
            if (atoms.propertyIsEnumerable(cur)) {
                return "atom";
            }
            if (keywords.propertyIsEnumerable(cur)) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                else if (standaloneKeywords.propertyIsEnumerable(cur))
                    curPunc = "standalone";
                return "keyword";
            }
            return "variable";
        }
        tokenBase.isBase = true;

        function startString(quote, stream, state) {
            var tripleQuoted = false;
            if (quote != "/" && stream.eat(quote)) {
                if (stream.eat(quote)) tripleQuoted = true;
                else return "string";
            }
            function t(stream, state) {
                var escaped = false,
                    next,
                    end = !tripleQuoted;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        if (!tripleQuoted) {
                            break;
                        }
                        if (stream.match(quote + quote)) {
                            end = true;
                            break;
                        }
                    }
                    if (quote == '"' && next == "$" && !escaped) {
                        if (stream.eat("{")) {
                            state.tokenize.push(tokenBaseUntilBrace());
                            return "string";
                        } else if (stream.match(/^\w/, false)) {
                            state.tokenize.push(tokenVariableDeref);
                            return "string";
                        }
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end) state.tokenize.pop();
                return "string";
            }
            state.tokenize.push(t);
            return t(stream, state);
        }

        function tokenBaseUntilBrace() {
            var depth = 1;
            function t(stream, state) {
                if (stream.peek() == "}") {
                    depth--;
                    if (depth == 0) {
                        state.tokenize.pop();
                        return state.tokenize[state.tokenize.length - 1](
                            stream,
                            state
                        );
                    }
                } else if (stream.peek() == "{") {
                    depth++;
                }
                return tokenBase(stream, state);
            }
            t.isBase = true;
            return t;
        }

        function tokenVariableDeref(stream, state) {
            var next = stream.match(/^(\.|[\w\$_]+)/);
            if (!next) {
                state.tokenize.pop();
                return state.tokenize[state.tokenize.length - 1](stream, state);
            }
            return next[0] == "." ? null : "variable";
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize.pop();
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function expectExpression(last, newline) {
            return (
                !last ||
                last == "operator" ||
                last == "->" ||
                /[\.\[\{\(,;:]/.test(last) ||
                last == "newstatement" ||
                last == "keyword" ||
                last == "proplabel" ||
                (last == "standalone" && !newline)
            );
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            return (state.context = new Context(
                state.indented,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface

        const groovy = {
            startState: function(indentUnit) {
                return {
                    tokenize: [tokenBase],
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                    lastToken: null,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                    // Automatic semicolon insertion
                    if (
                        ctx.type == "statement" &&
                        !expectExpression(state.lastToken, true)
                    ) {
                        popContext(state);
                        ctx = state.context;
                    }
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = state.tokenize[state.tokenize.length - 1](
                    stream,
                    state
                );
                if (style == "comment") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":") &&
                    ctx.type == "statement"
                )
                    popContext(state);
                // Handle indentation for {x -> \n ... }
                else if (
                    curPunc == "->" &&
                    ctx.type == "statement" &&
                    ctx.prev.type == "}"
                ) {
                    popContext(state);
                    state.context.align = false;
                } else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    ctx.type == "}" ||
                    ctx.type == "top" ||
                    (ctx.type == "statement" && curPunc == "newstatement")
                )
                    pushContext(state, stream.column(), "statement");
                state.startOfLine = false;
                state.lastToken = curPunc || style;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (!state.tokenize[state.tokenize.length - 1].isBase)
                    return null;
                var firstChar = textAfter && textAfter.charAt(0),
                    ctx = state.context;
                if (
                    ctx.type == "statement" &&
                    !expectExpression(state.lastToken, true)
                )
                    ctx = ctx.prev;
                var closing = firstChar == ctx.type;
                if (ctx.type == "statement")
                    return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
                else if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                closeBrackets: {
                    brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
                },
            },
        };

        exports.groovy = groovy;
    }
    _M31();
    function _M32() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function switchState(source, setState, f) {
            setState(f);
            return f(source, setState);
        }

        // These should all be Unicode extended, as per the Haskell 2010 report
        var smallRE = /[a-z_]/;
        var largeRE = /[A-Z]/;
        var digitRE = /\d/;
        var hexitRE = /[0-9A-Fa-f]/;
        var octitRE = /[0-7]/;
        var idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
        var symbolRE = /[-!#$%&*+.\/<=>?@\\^|~:]/;
        var specialRE = /[(),;[\]`{}]/;
        var whiteCharRE = /[ \t\v\f]/; // newlines are handled in tokenizer

        function normal(source, setState) {
            if (source.eatWhile(whiteCharRE)) {
                return null;
            }

            var ch = source.next();
            if (specialRE.test(ch)) {
                if (ch == "{" && source.eat("-")) {
                    var t = "comment";
                    if (source.eat("#")) {
                        t = "meta";
                    }
                    return switchState(source, setState, ncomment(t, 1));
                }
                return null;
            }

            if (ch == "'") {
                if (source.eat("\\")) {
                    source.next(); // should handle other escapes here
                } else {
                    source.next();
                }
                if (source.eat("'")) {
                    return "string";
                }
                return "error";
            }

            if (ch == '"') {
                return switchState(source, setState, stringLiteral);
            }

            if (largeRE.test(ch)) {
                source.eatWhile(idRE);
                if (source.eat(".")) {
                    return "qualifier";
                }
                return "type";
            }

            if (smallRE.test(ch)) {
                source.eatWhile(idRE);
                return "variable";
            }

            if (digitRE.test(ch)) {
                if (ch == "0") {
                    if (source.eat(/[xX]/)) {
                        source.eatWhile(hexitRE); // should require at least 1
                        return "integer";
                    }
                    if (source.eat(/[oO]/)) {
                        source.eatWhile(octitRE); // should require at least 1
                        return "number";
                    }
                }
                source.eatWhile(digitRE);
                var t = "number";
                if (source.match(/^\.\d+/)) {
                    t = "number";
                }
                if (source.eat(/[eE]/)) {
                    t = "number";
                    source.eat(/[-+]/);
                    source.eatWhile(digitRE); // should require at least 1
                }
                return t;
            }

            if (ch == "." && source.eat(".")) return "keyword";

            if (symbolRE.test(ch)) {
                if (ch == "-" && source.eat(/-/)) {
                    source.eatWhile(/-/);
                    if (!source.eat(symbolRE)) {
                        source.skipToEnd();
                        return "comment";
                    }
                }
                source.eatWhile(symbolRE);
                return "variable";
            }

            return "error";
        }

        function ncomment(type, nest) {
            if (nest == 0) {
                return normal;
            }
            return function(source, setState) {
                var currNest = nest;
                while (!source.eol()) {
                    var ch = source.next();
                    if (ch == "{" && source.eat("-")) {
                        ++currNest;
                    } else if (ch == "-" && source.eat("}")) {
                        --currNest;
                        if (currNest == 0) {
                            setState(normal);
                            return type;
                        }
                    }
                }
                setState(ncomment(type, currNest));
                return type;
            };
        }

        function stringLiteral(source, setState) {
            while (!source.eol()) {
                var ch = source.next();
                if (ch == '"') {
                    setState(normal);
                    return "string";
                }
                if (ch == "\\") {
                    if (source.eol() || source.eat(whiteCharRE)) {
                        setState(stringGap);
                        return "string";
                    }
                    if (source.eat("&"));
                    else {
                        source.next(); // should handle other escapes here
                    }
                }
            }
            setState(normal);
            return "error";
        }

        function stringGap(source, setState) {
            if (source.eat("\\")) {
                return switchState(source, setState, stringLiteral);
            }
            source.next();
            setState(normal);
            return "error";
        }

        var wellKnownWords = (function() {
            var wkw = {};
            function setType(t) {
                return function() {
                    for (var i = 0; i < arguments.length; i++)
                        wkw[arguments[i]] = t;
                };
            }

            setType("keyword")(
                "case",
                "class",
                "data",
                "default",
                "deriving",
                "do",
                "else",
                "foreign",
                "if",
                "import",
                "in",
                "infix",
                "infixl",
                "infixr",
                "instance",
                "let",
                "module",
                "newtype",
                "of",
                "then",
                "type",
                "where",
                "_"
            );

            setType("keyword")(
                "..",
                ":",
                "::",
                "=",
                "\\",
                "<-",
                "->",
                "@",
                "~",
                "=>"
            );

            setType("builtin")(
                "!!",
                "$!",
                "$",
                "&&",
                "+",
                "++",
                "-",
                ".",
                "/",
                "/=",
                "<",
                "<*",
                "<=",
                "<$>",
                "<*>",
                "=<<",
                "==",
                ">",
                ">=",
                ">>",
                ">>=",
                "^",
                "^^",
                "||",
                "*",
                "*>",
                "**"
            );

            setType("builtin")(
                "Applicative",
                "Bool",
                "Bounded",
                "Char",
                "Double",
                "EQ",
                "Either",
                "Enum",
                "Eq",
                "False",
                "FilePath",
                "Float",
                "Floating",
                "Fractional",
                "Functor",
                "GT",
                "IO",
                "IOError",
                "Int",
                "Integer",
                "Integral",
                "Just",
                "LT",
                "Left",
                "Maybe",
                "Monad",
                "Nothing",
                "Num",
                "Ord",
                "Ordering",
                "Rational",
                "Read",
                "ReadS",
                "Real",
                "RealFloat",
                "RealFrac",
                "Right",
                "Show",
                "ShowS",
                "String",
                "True"
            );

            setType("builtin")(
                "abs",
                "acos",
                "acosh",
                "all",
                "and",
                "any",
                "appendFile",
                "asTypeOf",
                "asin",
                "asinh",
                "atan",
                "atan2",
                "atanh",
                "break",
                "catch",
                "ceiling",
                "compare",
                "concat",
                "concatMap",
                "const",
                "cos",
                "cosh",
                "curry",
                "cycle",
                "decodeFloat",
                "div",
                "divMod",
                "drop",
                "dropWhile",
                "either",
                "elem",
                "encodeFloat",
                "enumFrom",
                "enumFromThen",
                "enumFromThenTo",
                "enumFromTo",
                "error",
                "even",
                "exp",
                "exponent",
                "fail",
                "filter",
                "flip",
                "floatDigits",
                "floatRadix",
                "floatRange",
                "floor",
                "fmap",
                "foldl",
                "foldl1",
                "foldr",
                "foldr1",
                "fromEnum",
                "fromInteger",
                "fromIntegral",
                "fromRational",
                "fst",
                "gcd",
                "getChar",
                "getContents",
                "getLine",
                "head",
                "id",
                "init",
                "interact",
                "ioError",
                "isDenormalized",
                "isIEEE",
                "isInfinite",
                "isNaN",
                "isNegativeZero",
                "iterate",
                "last",
                "lcm",
                "length",
                "lex",
                "lines",
                "log",
                "logBase",
                "lookup",
                "map",
                "mapM",
                "mapM_",
                "max",
                "maxBound",
                "maximum",
                "maybe",
                "min",
                "minBound",
                "minimum",
                "mod",
                "negate",
                "not",
                "notElem",
                "null",
                "odd",
                "or",
                "otherwise",
                "pi",
                "pred",
                "print",
                "product",
                "properFraction",
                "pure",
                "putChar",
                "putStr",
                "putStrLn",
                "quot",
                "quotRem",
                "read",
                "readFile",
                "readIO",
                "readList",
                "readLn",
                "readParen",
                "reads",
                "readsPrec",
                "realToFrac",
                "recip",
                "rem",
                "repeat",
                "replicate",
                "return",
                "reverse",
                "round",
                "scaleFloat",
                "scanl",
                "scanl1",
                "scanr",
                "scanr1",
                "seq",
                "sequence",
                "sequence_",
                "show",
                "showChar",
                "showList",
                "showParen",
                "showString",
                "shows",
                "showsPrec",
                "significand",
                "signum",
                "sin",
                "sinh",
                "snd",
                "span",
                "splitAt",
                "sqrt",
                "subtract",
                "succ",
                "sum",
                "tail",
                "take",
                "takeWhile",
                "tan",
                "tanh",
                "toEnum",
                "toInteger",
                "toRational",
                "truncate",
                "uncurry",
                "undefined",
                "unlines",
                "until",
                "unwords",
                "unzip",
                "unzip3",
                "userError",
                "words",
                "writeFile",
                "zip",
                "zip3",
                "zipWith",
                "zipWith3"
            );

            return wkw;
        })();

        const haskell = {
            startState: function() {
                return { f: normal };
            },
            copyState: function(s) {
                return { f: s.f };
            },

            token: function(stream, state) {
                var t = state.f(stream, function(s) {
                    state.f = s;
                });
                var w = stream.current();
                return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;
            },

            languageData: {
                commentTokens: {
                    line: "--",
                    block: { open: "{-", close: "-}" },
                },
            },
        };

        exports.haskell = haskell;
    }
    _M32();
    function _M33() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // Tokenizer

        function kw(type) {
            return { type: type, style: "keyword" };
        }
        var A = kw("keyword a"),
            B = kw("keyword b"),
            C = kw("keyword c");
        var operator = kw("operator"),
            atom = { type: "atom", style: "atom" },
            attribute = { type: "attribute", style: "attribute" };
        var type = kw("typedef");
        var keywords = {
            if: A,
            while: A,
            else: B,
            do: B,
            try: B,
            return: C,
            break: C,
            continue: C,
            new: C,
            throw: C,
            var: kw("var"),
            inline: attribute,
            static: attribute,
            using: kw("import"),
            public: attribute,
            private: attribute,
            cast: kw("cast"),
            import: kw("import"),
            macro: kw("macro"),
            function: kw("function"),
            catch: kw("catch"),
            untyped: kw("untyped"),
            callback: kw("cb"),
            for: kw("for"),
            switch: kw("switch"),
            case: kw("case"),
            default: kw("default"),
            in: operator,
            never: kw("property_access"),
            trace: kw("trace"),
            class: type,
            abstract: type,
            enum: type,
            interface: type,
            typedef: type,
            extends: type,
            implements: type,
            dynamic: type,
            true: atom,
            false: atom,
            null: atom,
        };

        var isOperatorChar = /[+\-*&%=<>!?|]/;

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }

        function toUnescaped(stream, end) {
            var escaped = false,
                next;
            while ((next = stream.next()) != null) {
                if (next == end && !escaped) return true;
                escaped = !escaped && next == "\\";
            }
        }

        // Used as scratch variables to communicate multiple values without
        // consing up tons of objects.
        var type, content;
        function ret(tp, style, cont) {
            type = tp;
            content = cont;
            return style;
        }

        function haxeTokenBase(stream, state) {
            var ch = stream.next();
            if (ch == '"' || ch == "'") {
                return chain(stream, state, haxeTokenString(ch));
            } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                return ret(ch);
            } else if (ch == "0" && stream.eat(/x/i)) {
                stream.eatWhile(/[\da-f]/i);
                return ret("number", "number");
            } else if (/\d/.test(ch) || (ch == "-" && stream.eat(/\d/))) {
                stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
                return ret("number", "number");
            } else if (state.reAllowed && ch == "~" && stream.eat(/\//)) {
                toUnescaped(stream, "/");
                stream.eatWhile(/[gimsu]/);
                return ret("regexp", "string.special");
            } else if (ch == "/") {
                if (stream.eat("*")) {
                    return chain(stream, state, haxeTokenComment);
                } else if (stream.eat("/")) {
                    stream.skipToEnd();
                    return ret("comment", "comment");
                } else {
                    stream.eatWhile(isOperatorChar);
                    return ret("operator", null, stream.current());
                }
            } else if (ch == "#") {
                stream.skipToEnd();
                return ret("conditional", "meta");
            } else if (ch == "@") {
                stream.eat(/:/);
                stream.eatWhile(/[\w_]/);
                return ret("metadata", "meta");
            } else if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return ret("operator", null, stream.current());
            } else {
                var word;
                if (/[A-Z]/.test(ch)) {
                    stream.eatWhile(/[\w_<>]/);
                    word = stream.current();
                    return ret("type", "type", word);
                } else {
                    stream.eatWhile(/[\w_]/);
                    var word = stream.current(),
                        known =
                            keywords.propertyIsEnumerable(word) &&
                            keywords[word];
                    return known && state.kwAllowed
                        ? ret(known.type, known.style, word)
                        : ret("variable", "variable", word);
                }
            }
        }

        function haxeTokenString(quote) {
            return function(stream, state) {
                if (toUnescaped(stream, quote)) state.tokenize = haxeTokenBase;
                return ret("string", "string");
            };
        }

        function haxeTokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = haxeTokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return ret("comment", "comment");
        }

        // Parser

        var atomicTypes = {
            atom: true,
            number: true,
            variable: true,
            string: true,
            regexp: true,
        };

        function HaxeLexical(indented, column, type, align, prev, info) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.prev = prev;
            this.info = info;
            if (align != null) this.align = align;
        }

        function inScope(state, varname) {
            for (var v = state.localVars; v; v = v.next)
                if (v.name == varname) return true;
        }

        function parseHaxe(state, style, type, content, stream) {
            var cc = state.cc;
            // Communicate our context to the combinators.
            // (Less wasteful than consing up a hundred closures on every call.)
            cx.state = state;
            cx.stream = stream;
            (cx.marked = null), (cx.cc = cc);

            if (!state.lexical.hasOwnProperty("align"))
                state.lexical.align = true;

            while (true) {
                var combinator = cc.length ? cc.pop() : statement;
                if (combinator(type, content)) {
                    while (cc.length && cc[cc.length - 1].lex) cc.pop()();
                    if (cx.marked) return cx.marked;
                    if (type == "variable" && inScope(state, content))
                        return "variableName.local";
                    if (type == "variable" && imported(state, content))
                        return "variableName.special";
                    return style;
                }
            }
        }

        function imported(state, typename) {
            if (/[a-z]/.test(typename.charAt(0))) return false;
            var len = state.importedtypes.length;
            for (var i = 0; i < len; i++)
                if (state.importedtypes[i] == typename) return true;
        }

        function registerimport(importname) {
            var state = cx.state;
            for (var t = state.importedtypes; t; t = t.next)
                if (t.name == importname) return;
            state.importedtypes = {
                name: importname,
                next: state.importedtypes,
            };
        }
        // Combinator utils

        var cx = { state: null, column: null, marked: null, cc: null };
        function pass() {
            for (var i = arguments.length - 1; i >= 0; i--)
                cx.cc.push(arguments[i]);
        }
        function cont() {
            pass.apply(null, arguments);
            return true;
        }
        function inList(name, list) {
            for (var v = list; v; v = v.next) if (v.name == name) return true;
            return false;
        }
        function register(varname) {
            var state = cx.state;
            if (state.context) {
                cx.marked = "def";
                if (inList(varname, state.localVars)) return;
                state.localVars = { name: varname, next: state.localVars };
            } else if (state.globalVars) {
                if (inList(varname, state.globalVars)) return;
                state.globalVars = { name: varname, next: state.globalVars };
            }
        }

        // Combinators

        var defaultVars = { name: "this", next: null };
        function pushcontext() {
            if (!cx.state.context) cx.state.localVars = defaultVars;
            cx.state.context = {
                prev: cx.state.context,
                vars: cx.state.localVars,
            };
        }
        function popcontext() {
            cx.state.localVars = cx.state.context.vars;
            cx.state.context = cx.state.context.prev;
        }
        popcontext.lex = true;
        function pushlex(type, info) {
            var result = function() {
                var state = cx.state;
                state.lexical = new HaxeLexical(
                    state.indented,
                    cx.stream.column(),
                    type,
                    null,
                    state.lexical,
                    info
                );
            };
            result.lex = true;
            return result;
        }
        function poplex() {
            var state = cx.state;
            if (state.lexical.prev) {
                if (state.lexical.type == ")")
                    state.indented = state.lexical.indented;
                state.lexical = state.lexical.prev;
            }
        }
        poplex.lex = true;

        function expect(wanted) {
            function f(type) {
                if (type == wanted) return cont();
                else if (wanted == ";") return pass();
                else return cont(f);
            }
            return f;
        }

        function statement(type) {
            if (type == "@") return cont(metadef);
            if (type == "var")
                return cont(pushlex("vardef"), vardef1, expect(";"), poplex);
            if (type == "keyword a")
                return cont(pushlex("form"), expression, statement, poplex);
            if (type == "keyword b")
                return cont(pushlex("form"), statement, poplex);
            if (type == "{")
                return cont(
                    pushlex("}"),
                    pushcontext,
                    block,
                    poplex,
                    popcontext
                );
            if (type == ";") return cont();
            if (type == "attribute") return cont(maybeattribute);
            if (type == "function") return cont(functiondef);
            if (type == "for")
                return cont(
                    pushlex("form"),
                    expect("("),
                    pushlex(")"),
                    forspec1,
                    expect(")"),
                    poplex,
                    statement,
                    poplex
                );
            if (type == "variable") return cont(pushlex("stat"), maybelabel);
            if (type == "switch")
                return cont(
                    pushlex("form"),
                    expression,
                    pushlex("}", "switch"),
                    expect("{"),
                    block,
                    poplex,
                    poplex
                );
            if (type == "case") return cont(expression, expect(":"));
            if (type == "default") return cont(expect(":"));
            if (type == "catch")
                return cont(
                    pushlex("form"),
                    pushcontext,
                    expect("("),
                    funarg,
                    expect(")"),
                    statement,
                    poplex,
                    popcontext
                );
            if (type == "import") return cont(importdef, expect(";"));
            if (type == "typedef") return cont(typedef);
            return pass(pushlex("stat"), expression, expect(";"), poplex);
        }
        function expression(type) {
            if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);
            if (type == "type") return cont(maybeoperator);
            if (type == "function") return cont(functiondef);
            if (type == "keyword c") return cont(maybeexpression);
            if (type == "(")
                return cont(
                    pushlex(")"),
                    maybeexpression,
                    expect(")"),
                    poplex,
                    maybeoperator
                );
            if (type == "operator") return cont(expression);
            if (type == "[")
                return cont(
                    pushlex("]"),
                    commasep(maybeexpression, "]"),
                    poplex,
                    maybeoperator
                );
            if (type == "{")
                return cont(
                    pushlex("}"),
                    commasep(objprop, "}"),
                    poplex,
                    maybeoperator
                );
            return cont();
        }
        function maybeexpression(type) {
            if (type.match(/[;\}\)\],]/)) return pass();
            return pass(expression);
        }

        function maybeoperator(type, value) {
            if (type == "operator" && /\+\+|--/.test(value))
                return cont(maybeoperator);
            if (type == "operator" || type == ":") return cont(expression);
            if (type == ";") return;
            if (type == "(")
                return cont(
                    pushlex(")"),
                    commasep(expression, ")"),
                    poplex,
                    maybeoperator
                );
            if (type == ".") return cont(property, maybeoperator);
            if (type == "[")
                return cont(
                    pushlex("]"),
                    expression,
                    expect("]"),
                    poplex,
                    maybeoperator
                );
        }

        function maybeattribute(type) {
            if (type == "attribute") return cont(maybeattribute);
            if (type == "function") return cont(functiondef);
            if (type == "var") return cont(vardef1);
        }

        function metadef(type) {
            if (type == ":") return cont(metadef);
            if (type == "variable") return cont(metadef);
            if (type == "(")
                return cont(
                    pushlex(")"),
                    commasep(metaargs, ")"),
                    poplex,
                    statement
                );
        }
        function metaargs(type) {
            if (type == "variable") return cont();
        }

        function importdef(type, value) {
            if (type == "variable" && /[A-Z]/.test(value.charAt(0))) {
                registerimport(value);
                return cont();
            } else if (
                type == "variable" ||
                type == "property" ||
                type == "." ||
                value == "*"
            )
                return cont(importdef);
        }

        function typedef(type, value) {
            if (type == "variable" && /[A-Z]/.test(value.charAt(0))) {
                registerimport(value);
                return cont();
            } else if (type == "type" && /[A-Z]/.test(value.charAt(0))) {
                return cont();
            }
        }

        function maybelabel(type) {
            if (type == ":") return cont(poplex, statement);
            return pass(maybeoperator, expect(";"), poplex);
        }
        function property(type) {
            if (type == "variable") {
                cx.marked = "property";
                return cont();
            }
        }
        function objprop(type) {
            if (type == "variable") cx.marked = "property";
            if (atomicTypes.hasOwnProperty(type))
                return cont(expect(":"), expression);
        }
        function commasep(what, end) {
            function proceed(type) {
                if (type == ",") return cont(what, proceed);
                if (type == end) return cont();
                return cont(expect(end));
            }
            return function(type) {
                if (type == end) return cont();
                else return pass(what, proceed);
            };
        }
        function block(type) {
            if (type == "}") return cont();
            return pass(statement, block);
        }
        function vardef1(type, value) {
            if (type == "variable") {
                register(value);
                return cont(typeuse, vardef2);
            }
            return cont();
        }
        function vardef2(type, value) {
            if (value == "=") return cont(expression, vardef2);
            if (type == ",") return cont(vardef1);
        }
        function forspec1(type, value) {
            if (type == "variable") {
                register(value);
                return cont(forin, expression);
            } else {
                return pass();
            }
        }
        function forin(_type, value) {
            if (value == "in") return cont();
        }
        function functiondef(type, value) {
            //function names starting with upper-case letters are recognised as types, so cludging them together here.
            if (type == "variable" || type == "type") {
                register(value);
                return cont(functiondef);
            }
            if (value == "new") return cont(functiondef);
            if (type == "(")
                return cont(
                    pushlex(")"),
                    pushcontext,
                    commasep(funarg, ")"),
                    poplex,
                    typeuse,
                    statement,
                    popcontext
                );
        }
        function typeuse(type) {
            if (type == ":") return cont(typestring);
        }
        function typestring(type) {
            if (type == "type") return cont();
            if (type == "variable") return cont();
            if (type == "{")
                return cont(pushlex("}"), commasep(typeprop, "}"), poplex);
        }
        function typeprop(type) {
            if (type == "variable") return cont(typeuse);
        }
        function funarg(type, value) {
            if (type == "variable") {
                register(value);
                return cont(typeuse);
            }
        }

        // Interface
        const haxe = {
            startState: function(indentUnit) {
                var defaulttypes = [
                    "Int",
                    "Float",
                    "String",
                    "Void",
                    "Std",
                    "Bool",
                    "Dynamic",
                    "Array",
                ];
                var state = {
                    tokenize: haxeTokenBase,
                    reAllowed: true,
                    kwAllowed: true,
                    cc: [],
                    lexical: new HaxeLexical(-indentUnit, 0, "block", false),
                    importedtypes: defaulttypes,
                    context: null,
                    indented: 0,
                };
                return state;
            },

            token: function(stream, state) {
                if (stream.sol()) {
                    if (!state.lexical.hasOwnProperty("align"))
                        state.lexical.align = false;
                    state.indented = stream.indentation();
                }
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                if (type == "comment") return style;
                state.reAllowed = !!(
                    type == "operator" ||
                    type == "keyword c" ||
                    type.match(/^[\[{}\(,;:]$/)
                );
                state.kwAllowed = type != ".";
                return parseHaxe(state, style, type, content, stream);
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != haxeTokenBase) return 0;
                var firstChar = textAfter && textAfter.charAt(0),
                    lexical = state.lexical;
                if (lexical.type == "stat" && firstChar == "}")
                    lexical = lexical.prev;
                var type = lexical.type,
                    closing = firstChar == type;
                if (type == "vardef") return lexical.indented + 4;
                else if (type == "form" && firstChar == "{")
                    return lexical.indented;
                else if (type == "stat" || type == "form")
                    return lexical.indented + cx.unit;
                else if (lexical.info == "switch" && !closing)
                    return (
                        lexical.indented +
                        (/^(?:case|default)\b/.test(textAfter)
                            ? cx.unit
                            : 2 * cx.unit)
                    );
                else if (lexical.align)
                    return lexical.column + (closing ? 0 : 1);
                else return lexical.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
            },
        };

        const hxml = {
            startState: function() {
                return {
                    define: false,
                    inString: false,
                };
            },
            token: function(stream, state) {
                var ch = stream.peek();
                var sol = stream.sol();

                ///* comments */
                if (ch == "#") {
                    stream.skipToEnd();
                    return "comment";
                }
                if (sol && ch == "-") {
                    var style = "variable-2";

                    stream.eat(/-/);

                    if (stream.peek() == "-") {
                        stream.eat(/-/);
                        style = "keyword a";
                    }

                    if (stream.peek() == "D") {
                        stream.eat(/[D]/);
                        style = "keyword c";
                        state.define = true;
                    }

                    stream.eatWhile(/[A-Z]/i);
                    return style;
                }

                var ch = stream.peek();

                if (state.inString == false && ch == "'") {
                    state.inString = true;
                    stream.next();
                }

                if (state.inString == true) {
                    if (stream.skipTo("'"));
                    else {
                        stream.skipToEnd();
                    }

                    if (stream.peek() == "'") {
                        stream.next();
                        state.inString = false;
                    }

                    return "string";
                }

                stream.next();
                return null;
            },
            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.haxe = haxe;
        exports.hxml = hxml;
    }
    _M33();
    function _M34() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function failFirstLine(stream, state) {
            stream.skipToEnd();
            state.cur = header;
            return "error";
        }

        function start(stream, state) {
            if (stream.match(/^HTTP\/\d\.\d/)) {
                state.cur = responseStatusCode;
                return "keyword";
            } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
                state.cur = requestPath;
                return "keyword";
            } else {
                return failFirstLine(stream, state);
            }
        }

        function responseStatusCode(stream, state) {
            var code = stream.match(/^\d+/);
            if (!code) return failFirstLine(stream, state);

            state.cur = responseStatusText;
            var status = Number(code[0]);
            if (status >= 100 && status < 400) {
                return "atom";
            } else {
                return "error";
            }
        }

        function responseStatusText(stream, state) {
            stream.skipToEnd();
            state.cur = header;
            return null;
        }

        function requestPath(stream, state) {
            stream.eatWhile(/\S/);
            state.cur = requestProtocol;
            return "string.special";
        }

        function requestProtocol(stream, state) {
            if (stream.match(/^HTTP\/\d\.\d$/)) {
                state.cur = header;
                return "keyword";
            } else {
                return failFirstLine(stream, state);
            }
        }

        function header(stream) {
            if (stream.sol() && !stream.eat(/[ \t]/)) {
                if (stream.match(/^.*?:/)) {
                    return "atom";
                } else {
                    stream.skipToEnd();
                    return "error";
                }
            } else {
                stream.skipToEnd();
                return "string";
            }
        }

        function body(stream) {
            stream.skipToEnd();
            return null;
        }

        const http = {
            token: function(stream, state) {
                var cur = state.cur;
                if (cur != header && cur != body && stream.eatSpace())
                    return null;
                return cur(stream, state);
            },

            blankLine: function(state) {
                state.cur = body;
            },

            startState: function() {
                return { cur: start };
            },
        };

        exports.http = http;
    }
    _M34();
    function _M35() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }
        var builtinArray = [
            "a_correlate",
            "abs",
            "acos",
            "adapt_hist_equal",
            "alog",
            "alog2",
            "alog10",
            "amoeba",
            "annotate",
            "app_user_dir",
            "app_user_dir_query",
            "arg_present",
            "array_equal",
            "array_indices",
            "arrow",
            "ascii_template",
            "asin",
            "assoc",
            "atan",
            "axis",
            "axis",
            "bandpass_filter",
            "bandreject_filter",
            "barplot",
            "bar_plot",
            "beseli",
            "beselj",
            "beselk",
            "besely",
            "beta",
            "biginteger",
            "bilinear",
            "bin_date",
            "binary_template",
            "bindgen",
            "binomial",
            "bit_ffs",
            "bit_population",
            "blas_axpy",
            "blk_con",
            "boolarr",
            "boolean",
            "boxplot",
            "box_cursor",
            "breakpoint",
            "broyden",
            "bubbleplot",
            "butterworth",
            "bytarr",
            "byte",
            "byteorder",
            "bytscl",
            "c_correlate",
            "calendar",
            "caldat",
            "call_external",
            "call_function",
            "call_method",
            "call_procedure",
            "canny",
            "catch",
            "cd",
            "cdf",
            "ceil",
            "chebyshev",
            "check_math",
            "chisqr_cvf",
            "chisqr_pdf",
            "choldc",
            "cholsol",
            "cindgen",
            "cir_3pnt",
            "clipboard",
            "close",
            "clust_wts",
            "cluster",
            "cluster_tree",
            "cmyk_convert",
            "code_coverage",
            "color_convert",
            "color_exchange",
            "color_quan",
            "color_range_map",
            "colorbar",
            "colorize_sample",
            "colormap_applicable",
            "colormap_gradient",
            "colormap_rotation",
            "colortable",
            "comfit",
            "command_line_args",
            "common",
            "compile_opt",
            "complex",
            "complexarr",
            "complexround",
            "compute_mesh_normals",
            "cond",
            "congrid",
            "conj",
            "constrained_min",
            "contour",
            "contour",
            "convert_coord",
            "convol",
            "convol_fft",
            "coord2to3",
            "copy_lun",
            "correlate",
            "cos",
            "cosh",
            "cpu",
            "cramer",
            "createboxplotdata",
            "create_cursor",
            "create_struct",
            "create_view",
            "crossp",
            "crvlength",
            "ct_luminance",
            "cti_test",
            "cursor",
            "curvefit",
            "cv_coord",
            "cvttobm",
            "cw_animate",
            "cw_animate_getp",
            "cw_animate_load",
            "cw_animate_run",
            "cw_arcball",
            "cw_bgroup",
            "cw_clr_index",
            "cw_colorsel",
            "cw_defroi",
            "cw_field",
            "cw_filesel",
            "cw_form",
            "cw_fslider",
            "cw_light_editor",
            "cw_light_editor_get",
            "cw_light_editor_set",
            "cw_orient",
            "cw_palette_editor",
            "cw_palette_editor_get",
            "cw_palette_editor_set",
            "cw_pdmenu",
            "cw_rgbslider",
            "cw_tmpl",
            "cw_zoom",
            "db_exists",
            "dblarr",
            "dcindgen",
            "dcomplex",
            "dcomplexarr",
            "define_key",
            "define_msgblk",
            "define_msgblk_from_file",
            "defroi",
            "defsysv",
            "delvar",
            "dendro_plot",
            "dendrogram",
            "deriv",
            "derivsig",
            "determ",
            "device",
            "dfpmin",
            "diag_matrix",
            "dialog_dbconnect",
            "dialog_message",
            "dialog_pickfile",
            "dialog_printersetup",
            "dialog_printjob",
            "dialog_read_image",
            "dialog_write_image",
            "dictionary",
            "digital_filter",
            "dilate",
            "dindgen",
            "dissolve",
            "dist",
            "distance_measure",
            "dlm_load",
            "dlm_register",
            "doc_library",
            "double",
            "draw_roi",
            "edge_dog",
            "efont",
            "eigenql",
            "eigenvec",
            "ellipse",
            "elmhes",
            "emboss",
            "empty",
            "enable_sysrtn",
            "eof",
            "eos",
            "erase",
            "erf",
            "erfc",
            "erfcx",
            "erode",
            "errorplot",
            "errplot",
            "estimator_filter",
            "execute",
            "exit",
            "exp",
            "expand",
            "expand_path",
            "expint",
            "extract",
            "extract_slice",
            "f_cvf",
            "f_pdf",
            "factorial",
            "fft",
            "file_basename",
            "file_chmod",
            "file_copy",
            "file_delete",
            "file_dirname",
            "file_expand_path",
            "file_gunzip",
            "file_gzip",
            "file_info",
            "file_lines",
            "file_link",
            "file_mkdir",
            "file_move",
            "file_poll_input",
            "file_readlink",
            "file_same",
            "file_search",
            "file_tar",
            "file_test",
            "file_untar",
            "file_unzip",
            "file_which",
            "file_zip",
            "filepath",
            "findgen",
            "finite",
            "fix",
            "flick",
            "float",
            "floor",
            "flow3",
            "fltarr",
            "flush",
            "format_axis_values",
            "forward_function",
            "free_lun",
            "fstat",
            "fulstr",
            "funct",
            "function",
            "fv_test",
            "fx_root",
            "fz_roots",
            "gamma",
            "gamma_ct",
            "gauss_cvf",
            "gauss_pdf",
            "gauss_smooth",
            "gauss2dfit",
            "gaussfit",
            "gaussian_function",
            "gaussint",
            "get_drive_list",
            "get_dxf_objects",
            "get_kbrd",
            "get_login_info",
            "get_lun",
            "get_screen_size",
            "getenv",
            "getwindows",
            "greg2jul",
            "grib",
            "grid_input",
            "grid_tps",
            "grid3",
            "griddata",
            "gs_iter",
            "h_eq_ct",
            "h_eq_int",
            "hanning",
            "hash",
            "hdf",
            "hdf5",
            "heap_free",
            "heap_gc",
            "heap_nosave",
            "heap_refcount",
            "heap_save",
            "help",
            "hilbert",
            "hist_2d",
            "hist_equal",
            "histogram",
            "hls",
            "hough",
            "hqr",
            "hsv",
            "i18n_multibytetoutf8",
            "i18n_multibytetowidechar",
            "i18n_utf8tomultibyte",
            "i18n_widechartomultibyte",
            "ibeta",
            "icontour",
            "iconvertcoord",
            "idelete",
            "identity",
            "idl_base64",
            "idl_container",
            "idl_validname",
            "idlexbr_assistant",
            "idlitsys_createtool",
            "idlunit",
            "iellipse",
            "igamma",
            "igetcurrent",
            "igetdata",
            "igetid",
            "igetproperty",
            "iimage",
            "image",
            "image_cont",
            "image_statistics",
            "image_threshold",
            "imaginary",
            "imap",
            "indgen",
            "int_2d",
            "int_3d",
            "int_tabulated",
            "intarr",
            "interpol",
            "interpolate",
            "interval_volume",
            "invert",
            "ioctl",
            "iopen",
            "ir_filter",
            "iplot",
            "ipolygon",
            "ipolyline",
            "iputdata",
            "iregister",
            "ireset",
            "iresolve",
            "irotate",
            "isa",
            "isave",
            "iscale",
            "isetcurrent",
            "isetproperty",
            "ishft",
            "isocontour",
            "isosurface",
            "isurface",
            "itext",
            "itranslate",
            "ivector",
            "ivolume",
            "izoom",
            "journal",
            "json_parse",
            "json_serialize",
            "jul2greg",
            "julday",
            "keyword_set",
            "krig2d",
            "kurtosis",
            "kw_test",
            "l64indgen",
            "la_choldc",
            "la_cholmprove",
            "la_cholsol",
            "la_determ",
            "la_eigenproblem",
            "la_eigenql",
            "la_eigenvec",
            "la_elmhes",
            "la_gm_linear_model",
            "la_hqr",
            "la_invert",
            "la_least_square_equality",
            "la_least_squares",
            "la_linear_equation",
            "la_ludc",
            "la_lumprove",
            "la_lusol",
            "la_svd",
            "la_tridc",
            "la_trimprove",
            "la_triql",
            "la_trired",
            "la_trisol",
            "label_date",
            "label_region",
            "ladfit",
            "laguerre",
            "lambda",
            "lambdap",
            "lambertw",
            "laplacian",
            "least_squares_filter",
            "leefilt",
            "legend",
            "legendre",
            "linbcg",
            "lindgen",
            "linfit",
            "linkimage",
            "list",
            "ll_arc_distance",
            "lmfit",
            "lmgr",
            "lngamma",
            "lnp_test",
            "loadct",
            "locale_get",
            "logical_and",
            "logical_or",
            "logical_true",
            "lon64arr",
            "lonarr",
            "long",
            "long64",
            "lsode",
            "lu_complex",
            "ludc",
            "lumprove",
            "lusol",
            "m_correlate",
            "machar",
            "make_array",
            "make_dll",
            "make_rt",
            "map",
            "mapcontinents",
            "mapgrid",
            "map_2points",
            "map_continents",
            "map_grid",
            "map_image",
            "map_patch",
            "map_proj_forward",
            "map_proj_image",
            "map_proj_info",
            "map_proj_init",
            "map_proj_inverse",
            "map_set",
            "matrix_multiply",
            "matrix_power",
            "max",
            "md_test",
            "mean",
            "meanabsdev",
            "mean_filter",
            "median",
            "memory",
            "mesh_clip",
            "mesh_decimate",
            "mesh_issolid",
            "mesh_merge",
            "mesh_numtriangles",
            "mesh_obj",
            "mesh_smooth",
            "mesh_surfacearea",
            "mesh_validate",
            "mesh_volume",
            "message",
            "min",
            "min_curve_surf",
            "mk_html_help",
            "modifyct",
            "moment",
            "morph_close",
            "morph_distance",
            "morph_gradient",
            "morph_hitormiss",
            "morph_open",
            "morph_thin",
            "morph_tophat",
            "multi",
            "n_elements",
            "n_params",
            "n_tags",
            "ncdf",
            "newton",
            "noise_hurl",
            "noise_pick",
            "noise_scatter",
            "noise_slur",
            "norm",
            "obj_class",
            "obj_destroy",
            "obj_hasmethod",
            "obj_isa",
            "obj_new",
            "obj_valid",
            "objarr",
            "on_error",
            "on_ioerror",
            "online_help",
            "openr",
            "openu",
            "openw",
            "oplot",
            "oploterr",
            "orderedhash",
            "p_correlate",
            "parse_url",
            "particle_trace",
            "path_cache",
            "path_sep",
            "pcomp",
            "plot",
            "plot3d",
            "plot",
            "plot_3dbox",
            "plot_field",
            "ploterr",
            "plots",
            "polar_contour",
            "polar_surface",
            "polyfill",
            "polyshade",
            "pnt_line",
            "point_lun",
            "polarplot",
            "poly",
            "poly_2d",
            "poly_area",
            "poly_fit",
            "polyfillv",
            "polygon",
            "polyline",
            "polywarp",
            "popd",
            "powell",
            "pref_commit",
            "pref_get",
            "pref_set",
            "prewitt",
            "primes",
            "print",
            "printf",
            "printd",
            "pro",
            "product",
            "profile",
            "profiler",
            "profiles",
            "project_vol",
            "ps_show_fonts",
            "psafm",
            "pseudo",
            "ptr_free",
            "ptr_new",
            "ptr_valid",
            "ptrarr",
            "pushd",
            "qgrid3",
            "qhull",
            "qromb",
            "qromo",
            "qsimp",
            "query_*",
            "query_ascii",
            "query_bmp",
            "query_csv",
            "query_dicom",
            "query_gif",
            "query_image",
            "query_jpeg",
            "query_jpeg2000",
            "query_mrsid",
            "query_pict",
            "query_png",
            "query_ppm",
            "query_srf",
            "query_tiff",
            "query_video",
            "query_wav",
            "r_correlate",
            "r_test",
            "radon",
            "randomn",
            "randomu",
            "ranks",
            "rdpix",
            "read",
            "readf",
            "read_ascii",
            "read_binary",
            "read_bmp",
            "read_csv",
            "read_dicom",
            "read_gif",
            "read_image",
            "read_interfile",
            "read_jpeg",
            "read_jpeg2000",
            "read_mrsid",
            "read_pict",
            "read_png",
            "read_ppm",
            "read_spr",
            "read_srf",
            "read_sylk",
            "read_tiff",
            "read_video",
            "read_wav",
            "read_wave",
            "read_x11_bitmap",
            "read_xwd",
            "reads",
            "readu",
            "real_part",
            "rebin",
            "recall_commands",
            "recon3",
            "reduce_colors",
            "reform",
            "region_grow",
            "register_cursor",
            "regress",
            "replicate",
            "replicate_inplace",
            "resolve_all",
            "resolve_routine",
            "restore",
            "retall",
            "return",
            "reverse",
            "rk4",
            "roberts",
            "rot",
            "rotate",
            "round",
            "routine_filepath",
            "routine_info",
            "rs_test",
            "s_test",
            "save",
            "savgol",
            "scale3",
            "scale3d",
            "scatterplot",
            "scatterplot3d",
            "scope_level",
            "scope_traceback",
            "scope_varfetch",
            "scope_varname",
            "search2d",
            "search3d",
            "sem_create",
            "sem_delete",
            "sem_lock",
            "sem_release",
            "set_plot",
            "set_shading",
            "setenv",
            "sfit",
            "shade_surf",
            "shade_surf_irr",
            "shade_volume",
            "shift",
            "shift_diff",
            "shmdebug",
            "shmmap",
            "shmunmap",
            "shmvar",
            "show3",
            "showfont",
            "signum",
            "simplex",
            "sin",
            "sindgen",
            "sinh",
            "size",
            "skewness",
            "skip_lun",
            "slicer3",
            "slide_image",
            "smooth",
            "sobel",
            "socket",
            "sort",
            "spawn",
            "sph_4pnt",
            "sph_scat",
            "spher_harm",
            "spl_init",
            "spl_interp",
            "spline",
            "spline_p",
            "sprsab",
            "sprsax",
            "sprsin",
            "sprstp",
            "sqrt",
            "standardize",
            "stddev",
            "stop",
            "strarr",
            "strcmp",
            "strcompress",
            "streamline",
            "streamline",
            "stregex",
            "stretch",
            "string",
            "strjoin",
            "strlen",
            "strlowcase",
            "strmatch",
            "strmessage",
            "strmid",
            "strpos",
            "strput",
            "strsplit",
            "strtrim",
            "struct_assign",
            "struct_hide",
            "strupcase",
            "surface",
            "surface",
            "surfr",
            "svdc",
            "svdfit",
            "svsol",
            "swap_endian",
            "swap_endian_inplace",
            "symbol",
            "systime",
            "t_cvf",
            "t_pdf",
            "t3d",
            "tag_names",
            "tan",
            "tanh",
            "tek_color",
            "temporary",
            "terminal_size",
            "tetra_clip",
            "tetra_surface",
            "tetra_volume",
            "text",
            "thin",
            "thread",
            "threed",
            "tic",
            "time_test2",
            "timegen",
            "timer",
            "timestamp",
            "timestamptovalues",
            "tm_test",
            "toc",
            "total",
            "trace",
            "transpose",
            "tri_surf",
            "triangulate",
            "trigrid",
            "triql",
            "trired",
            "trisol",
            "truncate_lun",
            "ts_coef",
            "ts_diff",
            "ts_fcast",
            "ts_smooth",
            "tv",
            "tvcrs",
            "tvlct",
            "tvrd",
            "tvscl",
            "typename",
            "uindgen",
            "uint",
            "uintarr",
            "ul64indgen",
            "ulindgen",
            "ulon64arr",
            "ulonarr",
            "ulong",
            "ulong64",
            "uniq",
            "unsharp_mask",
            "usersym",
            "value_locate",
            "variance",
            "vector",
            "vector_field",
            "vel",
            "velovect",
            "vert_t3d",
            "voigt",
            "volume",
            "voronoi",
            "voxel_proj",
            "wait",
            "warp_tri",
            "watershed",
            "wdelete",
            "wf_draw",
            "where",
            "widget_base",
            "widget_button",
            "widget_combobox",
            "widget_control",
            "widget_displaycontextmenu",
            "widget_draw",
            "widget_droplist",
            "widget_event",
            "widget_info",
            "widget_label",
            "widget_list",
            "widget_propertysheet",
            "widget_slider",
            "widget_tab",
            "widget_table",
            "widget_text",
            "widget_tree",
            "widget_tree_move",
            "widget_window",
            "wiener_filter",
            "window",
            "window",
            "write_bmp",
            "write_csv",
            "write_gif",
            "write_image",
            "write_jpeg",
            "write_jpeg2000",
            "write_nrif",
            "write_pict",
            "write_png",
            "write_ppm",
            "write_spr",
            "write_srf",
            "write_sylk",
            "write_tiff",
            "write_video",
            "write_wav",
            "write_wave",
            "writeu",
            "wset",
            "wshow",
            "wtn",
            "wv_applet",
            "wv_cwt",
            "wv_cw_wavelet",
            "wv_denoise",
            "wv_dwt",
            "wv_fn_coiflet",
            "wv_fn_daubechies",
            "wv_fn_gaussian",
            "wv_fn_haar",
            "wv_fn_morlet",
            "wv_fn_paul",
            "wv_fn_symlet",
            "wv_import_data",
            "wv_import_wavelet",
            "wv_plot3d_wps",
            "wv_plot_multires",
            "wv_pwt",
            "wv_tool_denoise",
            "xbm_edit",
            "xdisplayfile",
            "xdxf",
            "xfont",
            "xinteranimate",
            "xloadct",
            "xmanager",
            "xmng_tmpl",
            "xmtool",
            "xobjview",
            "xobjview_rotate",
            "xobjview_write_image",
            "xpalette",
            "xpcolor",
            "xplot3d",
            "xregistered",
            "xroi",
            "xsq_test",
            "xsurface",
            "xvaredit",
            "xvolume",
            "xvolume_rotate",
            "xvolume_write_image",
            "xyouts",
            "zlib_compress",
            "zlib_uncompress",
            "zoom",
            "zoom_24",
        ];
        var builtins = wordRegexp(builtinArray);

        var keywordArray = [
            "begin",
            "end",
            "endcase",
            "endfor",
            "endwhile",
            "endif",
            "endrep",
            "endforeach",
            "break",
            "case",
            "continue",
            "for",
            "foreach",
            "goto",
            "if",
            "then",
            "else",
            "repeat",
            "until",
            "switch",
            "while",
            "do",
            "pro",
            "function",
        ];
        var keywords = wordRegexp(keywordArray);

        var identifiers = new RegExp(
            "^[_a-z\xa1-\uffff][_a-z0-9\xa1-\uffff]*",
            "i"
        );

        var singleOperators = /[+\-*&=<>\/@#~$]/;
        var boolOperators = new RegExp("(and|or|eq|lt|le|gt|ge|ne|not)", "i");

        function tokenBase(stream) {
            // whitespaces
            if (stream.eatSpace()) return null;

            // Handle one line Comments
            if (stream.match(";")) {
                stream.skipToEnd();
                return "comment";
            }

            // Handle Number Literals
            if (stream.match(/^[0-9\.+-]/, false)) {
                if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return "number";
                if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
                    return "number";
                if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/)) return "number";
            }

            // Handle Strings
            if (stream.match(/^"([^"]|(""))*"/)) {
                return "string";
            }
            if (stream.match(/^'([^']|(''))*'/)) {
                return "string";
            }

            // Handle words
            if (stream.match(keywords)) {
                return "keyword";
            }
            if (stream.match(builtins)) {
                return "builtin";
            }
            if (stream.match(identifiers)) {
                return "variable";
            }

            if (stream.match(singleOperators) || stream.match(boolOperators)) {
                return "operator";
            }

            // Handle non-detected items
            stream.next();
            return null;
        }
        const idl = {
            token: function(stream) {
                return tokenBase(stream);
            },
            languageData: {
                autocomplete: builtinArray.concat(keywordArray),
            },
        };

        exports.idl = idl;
    }
    _M35();
    function _M36() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkJavaScript(parserConfig) {
            var statementIndent = parserConfig.statementIndent;
            var jsonldMode = parserConfig.jsonld;
            var jsonMode = parserConfig.json || jsonldMode;
            var isTS = parserConfig.typescript;
            var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;

            // Tokenizer

            var keywords = (function() {
                function kw(type) {
                    return { type: type, style: "keyword" };
                }
                var A = kw("keyword a"),
                    B = kw("keyword b"),
                    C = kw("keyword c"),
                    D = kw("keyword d");
                var operator = kw("operator"),
                    atom = { type: "atom", style: "atom" };

                return {
                    if: kw("if"),
                    while: A,
                    with: A,
                    else: B,
                    do: B,
                    try: B,
                    finally: B,
                    return: D,
                    break: D,
                    continue: D,
                    new: kw("new"),
                    delete: C,
                    void: C,
                    throw: C,
                    debugger: kw("debugger"),
                    var: kw("var"),
                    const: kw("var"),
                    let: kw("var"),
                    function: kw("function"),
                    catch: kw("catch"),
                    for: kw("for"),
                    switch: kw("switch"),
                    case: kw("case"),
                    default: kw("default"),
                    in: operator,
                    typeof: operator,
                    instanceof: operator,
                    true: atom,
                    false: atom,
                    null: atom,
                    undefined: atom,
                    NaN: atom,
                    Infinity: atom,
                    this: kw("this"),
                    class: kw("class"),
                    super: kw("atom"),
                    yield: C,
                    export: kw("export"),
                    import: kw("import"),
                    extends: C,
                    await: C,
                };
            })();

            var isOperatorChar = /[+\-*&%=<>!?|~^@]/;
            var isJsonldKeyword =
                /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;

            function readRegexp(stream) {
                var escaped = false,
                    next,
                    inSet = false;
                while ((next = stream.next()) != null) {
                    if (!escaped) {
                        if (next == "/" && !inSet) return;
                        if (next == "[") inSet = true;
                        else if (inSet && next == "]") inSet = false;
                    }
                    escaped = !escaped && next == "\\";
                }
            }

            // Used as scratch variables to communicate multiple values without
            // consing up tons of objects.
            var type, content;
            function ret(tp, style, cont) {
                type = tp;
                content = cont;
                return style;
            }
            function tokenBase(stream, state) {
                var ch = stream.next();
                if (ch == '"' || ch == "'") {
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                } else if (
                    ch == "." &&
                    stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)
                ) {
                    return ret("number", "number");
                } else if (ch == "." && stream.match("..")) {
                    return ret("spread", "meta");
                } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                    return ret(ch);
                } else if (ch == "=" && stream.eat(">")) {
                    return ret("=>", "operator");
                } else if (
                    ch == "0" &&
                    stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)
                ) {
                    return ret("number", "number");
                } else if (/\d/.test(ch)) {
                    stream.match(
                        /^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/
                    );
                    return ret("number", "number");
                } else if (ch == "/") {
                    if (stream.eat("*")) {
                        state.tokenize = tokenComment;
                        return tokenComment(stream, state);
                    } else if (stream.eat("/")) {
                        stream.skipToEnd();
                        return ret("comment", "comment");
                    } else if (expressionAllowed(stream, state, 1)) {
                        readRegexp(stream);
                        stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
                        return ret("regexp", "string.special");
                    } else {
                        stream.eat("=");
                        return ret("operator", "operator", stream.current());
                    }
                } else if (ch == "`") {
                    state.tokenize = tokenQuasi;
                    return tokenQuasi(stream, state);
                } else if (ch == "#" && stream.peek() == "!") {
                    stream.skipToEnd();
                    return ret("meta", "meta");
                } else if (ch == "#" && stream.eatWhile(wordRE)) {
                    return ret("variable", "property");
                } else if (
                    (ch == "<" && stream.match("!--")) ||
                    (ch == "-" &&
                        stream.match("->") &&
                        !/\S/.test(stream.string.slice(0, stream.start)))
                ) {
                    stream.skipToEnd();
                    return ret("comment", "comment");
                } else if (isOperatorChar.test(ch)) {
                    if (
                        ch != ">" ||
                        !state.lexical ||
                        state.lexical.type != ">"
                    ) {
                        if (stream.eat("=")) {
                            if (ch == "!" || ch == "=") stream.eat("=");
                        } else if (/[<>*+\-|&?]/.test(ch)) {
                            stream.eat(ch);
                            if (ch == ">") stream.eat(ch);
                        }
                    }
                    if (ch == "?" && stream.eat(".")) return ret(".");
                    return ret("operator", "operator", stream.current());
                } else if (wordRE.test(ch)) {
                    stream.eatWhile(wordRE);
                    var word = stream.current();
                    if (state.lastType != ".") {
                        if (keywords.propertyIsEnumerable(word)) {
                            var kw = keywords[word];
                            return ret(kw.type, kw.style, word);
                        }
                        if (
                            word == "async" &&
                            stream.match(
                                /^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/,
                                false
                            )
                        )
                            return ret("async", "keyword", word);
                    }
                    return ret("variable", "variable", word);
                }
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        next;
                    if (
                        jsonldMode &&
                        stream.peek() == "@" &&
                        stream.match(isJsonldKeyword)
                    ) {
                        state.tokenize = tokenBase;
                        return ret("jsonld-keyword", "meta");
                    }
                    while ((next = stream.next()) != null) {
                        if (next == quote && !escaped) break;
                        escaped = !escaped && next == "\\";
                    }
                    if (!escaped) state.tokenize = tokenBase;
                    return ret("string", "string");
                };
            }

            function tokenComment(stream, state) {
                var maybeEnd = false,
                    ch;
                while ((ch = stream.next())) {
                    if (ch == "/" && maybeEnd) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    maybeEnd = ch == "*";
                }
                return ret("comment", "comment");
            }

            function tokenQuasi(stream, state) {
                var escaped = false,
                    next;
                while ((next = stream.next()) != null) {
                    if (
                        !escaped &&
                        (next == "`" || (next == "$" && stream.eat("{")))
                    ) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                return ret("quasi", "string.special", stream.current());
            }

            var brackets = "([{}])";
            // This is a crude lookahead trick to try and notice that we're
            // parsing the argument patterns for a fat-arrow function before we
            // actually hit the arrow token. It only works if the arrow is on
            // the same line as the arguments and there's no strange noise
            // (comments) in between. Fallback is to only notice when we hit the
            // arrow, and not declare the arguments as locals for the arrow
            // body.
            function findFatArrow(stream, state) {
                if (state.fatArrowAt) state.fatArrowAt = null;
                var arrow = stream.string.indexOf("=>", stream.start);
                if (arrow < 0) return;

                if (isTS) {
                    // Try to skip TypeScript return type declarations after the arguments
                    var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(
                        stream.string.slice(stream.start, arrow)
                    );
                    if (m) arrow = m.index;
                }

                var depth = 0,
                    sawSomething = false;
                for (var pos = arrow - 1; pos >= 0; --pos) {
                    var ch = stream.string.charAt(pos);
                    var bracket = brackets.indexOf(ch);
                    if (bracket >= 0 && bracket < 3) {
                        if (!depth) {
                            ++pos;
                            break;
                        }
                        if (--depth == 0) {
                            if (ch == "(") sawSomething = true;
                            break;
                        }
                    } else if (bracket >= 3 && bracket < 6) {
                        ++depth;
                    } else if (wordRE.test(ch)) {
                        sawSomething = true;
                    } else if (/["'\/`]/.test(ch)) {
                        for (; ; --pos) {
                            if (pos == 0) return;
                            var next = stream.string.charAt(pos - 1);
                            if (
                                next == ch &&
                                stream.string.charAt(pos - 2) != "\\"
                            ) {
                                pos--;
                                break;
                            }
                        }
                    } else if (sawSomething && !depth) {
                        ++pos;
                        break;
                    }
                }
                if (sawSomething && !depth) state.fatArrowAt = pos;
            }

            // Parser

            var atomicTypes = {
                atom: true,
                number: true,
                variable: true,
                string: true,
                regexp: true,
                this: true,
                import: true,
                "jsonld-keyword": true,
            };

            function JSLexical(indented, column, type, align, prev, info) {
                this.indented = indented;
                this.column = column;
                this.type = type;
                this.prev = prev;
                this.info = info;
                if (align != null) this.align = align;
            }

            function inScope(state, varname) {
                for (var v = state.localVars; v; v = v.next)
                    if (v.name == varname) return true;
                for (var cx = state.context; cx; cx = cx.prev) {
                    for (var v = cx.vars; v; v = v.next)
                        if (v.name == varname) return true;
                }
            }

            function parseJS(state, style, type, content, stream) {
                var cc = state.cc;
                // Communicate our context to the combinators.
                // (Less wasteful than consing up a hundred closures on every call.)
                cx.state = state;
                cx.stream = stream;
                cx.marked = null;
                cx.cc = cc;
                cx.style = style;

                if (!state.lexical.hasOwnProperty("align"))
                    state.lexical.align = true;

                while (true) {
                    var combinator = cc.length
                        ? cc.pop()
                        : jsonMode
                            ? expression
                            : statement;
                    if (combinator(type, content)) {
                        while (cc.length && cc[cc.length - 1].lex) cc.pop()();
                        if (cx.marked) return cx.marked;
                        if (type == "variable" && inScope(state, content))
                            return "variableName.local";
                        return style;
                    }
                }
            }

            // Combinator utils

            var cx = { state: null, column: null, marked: null, cc: null };
            function pass() {
                for (var i = arguments.length - 1; i >= 0; i--)
                    cx.cc.push(arguments[i]);
            }
            function cont() {
                pass.apply(null, arguments);
                return true;
            }
            function inList(name, list) {
                for (var v = list; v; v = v.next)
                    if (v.name == name) return true;
                return false;
            }
            function register(varname) {
                var state = cx.state;
                cx.marked = "def";
                if (state.context) {
                    if (
                        state.lexical.info == "var" &&
                        state.context &&
                        state.context.block
                    ) {
                        // FIXME function decls are also not block scoped
                        var newContext = registerVarScoped(
                            varname,
                            state.context
                        );
                        if (newContext != null) {
                            state.context = newContext;
                            return;
                        }
                    } else if (!inList(varname, state.localVars)) {
                        state.localVars = new Var(varname, state.localVars);
                        return;
                    }
                }
                // Fall through means this is global
                if (
                    parserConfig.globalVars &&
                    !inList(varname, state.globalVars)
                )
                    state.globalVars = new Var(varname, state.globalVars);
            }
            function registerVarScoped(varname, context) {
                if (!context) {
                    return null;
                } else if (context.block) {
                    var inner = registerVarScoped(varname, context.prev);
                    if (!inner) return null;
                    if (inner == context.prev) return context;
                    return new Context(inner, context.vars, true);
                } else if (inList(varname, context.vars)) {
                    return context;
                } else {
                    return new Context(
                        context.prev,
                        new Var(varname, context.vars),
                        false
                    );
                }
            }

            function isModifier(name) {
                return (
                    name == "public" ||
                    name == "private" ||
                    name == "protected" ||
                    name == "abstract" ||
                    name == "readonly"
                );
            }

            // Combinators

            function Context(prev, vars, block) {
                this.prev = prev;
                this.vars = vars;
                this.block = block;
            }
            function Var(name, next) {
                this.name = name;
                this.next = next;
            }

            var defaultVars = new Var("this", new Var("arguments", null));
            function pushcontext() {
                cx.state.context = new Context(
                    cx.state.context,
                    cx.state.localVars,
                    false
                );
                cx.state.localVars = defaultVars;
            }
            function pushblockcontext() {
                cx.state.context = new Context(
                    cx.state.context,
                    cx.state.localVars,
                    true
                );
                cx.state.localVars = null;
            }
            pushcontext.lex = pushblockcontext.lex = true;
            function popcontext() {
                cx.state.localVars = cx.state.context.vars;
                cx.state.context = cx.state.context.prev;
            }
            popcontext.lex = true;
            function pushlex(type, info) {
                var result = function() {
                    var state = cx.state,
                        indent = state.indented;
                    if (state.lexical.type == "stat")
                        indent = state.lexical.indented;
                    else
                        for (
                            var outer = state.lexical;
                            outer && outer.type == ")" && outer.align;
                            outer = outer.prev
                        )
                            indent = outer.indented;
                    state.lexical = new JSLexical(
                        indent,
                        cx.stream.column(),
                        type,
                        null,
                        state.lexical,
                        info
                    );
                };
                result.lex = true;
                return result;
            }
            function poplex() {
                var state = cx.state;
                if (state.lexical.prev) {
                    if (state.lexical.type == ")")
                        state.indented = state.lexical.indented;
                    state.lexical = state.lexical.prev;
                }
            }
            poplex.lex = true;

            function expect(wanted) {
                function exp(type) {
                    if (type == wanted) return cont();
                    else if (
                        wanted == ";" ||
                        type == "}" ||
                        type == ")" ||
                        type == "]"
                    )
                        return pass();
                    else return cont(exp);
                }
                return exp;
            }

            function statement(type, value) {
                if (type == "var")
                    return cont(
                        pushlex("vardef", value),
                        vardef,
                        expect(";"),
                        poplex
                    );
                if (type == "keyword a")
                    return cont(pushlex("form"), parenExpr, statement, poplex);
                if (type == "keyword b")
                    return cont(pushlex("form"), statement, poplex);
                if (type == "keyword d")
                    return cx.stream.match(/^\s*$/, false)
                        ? cont()
                        : cont(
                            pushlex("stat"),
                            maybeexpression,
                            expect(";"),
                            poplex
                        );
                if (type == "debugger") return cont(expect(";"));
                if (type == "{")
                    return cont(
                        pushlex("}"),
                        pushblockcontext,
                        block,
                        poplex,
                        popcontext
                    );
                if (type == ";") return cont();
                if (type == "if") {
                    if (
                        cx.state.lexical.info == "else" &&
                        cx.state.cc[cx.state.cc.length - 1] == poplex
                    )
                        cx.state.cc.pop()();
                    return cont(
                        pushlex("form"),
                        parenExpr,
                        statement,
                        poplex,
                        maybeelse
                    );
                }
                if (type == "function") return cont(functiondef);
                if (type == "for")
                    return cont(
                        pushlex("form"),
                        pushblockcontext,
                        forspec,
                        statement,
                        popcontext,
                        poplex
                    );
                if (type == "class" || (isTS && value == "interface")) {
                    cx.marked = "keyword";
                    return cont(
                        pushlex("form", type == "class" ? type : value),
                        className,
                        poplex
                    );
                }
                if (type == "variable") {
                    if (isTS && value == "declare") {
                        cx.marked = "keyword";
                        return cont(statement);
                    } else if (
                        isTS &&
                        (value == "module" ||
                            value == "enum" ||
                            value == "type") &&
                        cx.stream.match(/^\s*\w/, false)
                    ) {
                        cx.marked = "keyword";
                        if (value == "enum") return cont(enumdef);
                        else if (value == "type")
                            return cont(
                                typename,
                                expect("operator"),
                                typeexpr,
                                expect(";")
                            );
                        else
                            return cont(
                                pushlex("form"),
                                pattern,
                                expect("{"),
                                pushlex("}"),
                                block,
                                poplex,
                                poplex
                            );
                    } else if (isTS && value == "namespace") {
                        cx.marked = "keyword";
                        return cont(
                            pushlex("form"),
                            expression,
                            statement,
                            poplex
                        );
                    } else if (isTS && value == "abstract") {
                        cx.marked = "keyword";
                        return cont(statement);
                    } else {
                        return cont(pushlex("stat"), maybelabel);
                    }
                }
                if (type == "switch")
                    return cont(
                        pushlex("form"),
                        parenExpr,
                        expect("{"),
                        pushlex("}", "switch"),
                        pushblockcontext,
                        block,
                        poplex,
                        poplex,
                        popcontext
                    );
                if (type == "case") return cont(expression, expect(":"));
                if (type == "default") return cont(expect(":"));
                if (type == "catch")
                    return cont(
                        pushlex("form"),
                        pushcontext,
                        maybeCatchBinding,
                        statement,
                        poplex,
                        popcontext
                    );
                if (type == "export")
                    return cont(pushlex("stat"), afterExport, poplex);
                if (type == "import")
                    return cont(pushlex("stat"), afterImport, poplex);
                if (type == "async") return cont(statement);
                if (value == "@") return cont(expression, statement);
                return pass(pushlex("stat"), expression, expect(";"), poplex);
            }
            function maybeCatchBinding(type) {
                if (type == "(") return cont(funarg, expect(")"));
            }
            function expression(type, value) {
                return expressionInner(type, value, false);
            }
            function expressionNoComma(type, value) {
                return expressionInner(type, value, true);
            }
            function parenExpr(type) {
                if (type != "(") return pass();
                return cont(pushlex(")"), maybeexpression, expect(")"), poplex);
            }
            function expressionInner(type, value, noComma) {
                if (cx.state.fatArrowAt == cx.stream.start) {
                    var body = noComma ? arrowBodyNoComma : arrowBody;
                    if (type == "(")
                        return cont(
                            pushcontext,
                            pushlex(")"),
                            commasep(funarg, ")"),
                            poplex,
                            expect("=>"),
                            body,
                            popcontext
                        );
                    else if (type == "variable")
                        return pass(
                            pushcontext,
                            pattern,
                            expect("=>"),
                            body,
                            popcontext
                        );
                }

                var maybeop = noComma
                    ? maybeoperatorNoComma
                    : maybeoperatorComma;
                if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);
                if (type == "function") return cont(functiondef, maybeop);
                if (type == "class" || (isTS && value == "interface")) {
                    cx.marked = "keyword";
                    return cont(pushlex("form"), classExpression, poplex);
                }
                if (type == "keyword c" || type == "async")
                    return cont(noComma ? expressionNoComma : expression);
                if (type == "(")
                    return cont(
                        pushlex(")"),
                        maybeexpression,
                        expect(")"),
                        poplex,
                        maybeop
                    );
                if (type == "operator" || type == "spread")
                    return cont(noComma ? expressionNoComma : expression);
                if (type == "[")
                    return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
                if (type == "{")
                    return contCommasep(objprop, "}", null, maybeop);
                if (type == "quasi") return pass(quasi, maybeop);
                if (type == "new") return cont(maybeTarget(noComma));
                return cont();
            }
            function maybeexpression(type) {
                if (type.match(/[;\}\)\],]/)) return pass();
                return pass(expression);
            }

            function maybeoperatorComma(type, value) {
                if (type == ",") return cont(maybeexpression);
                return maybeoperatorNoComma(type, value, false);
            }
            function maybeoperatorNoComma(type, value, noComma) {
                var me =
                    noComma == false
                        ? maybeoperatorComma
                        : maybeoperatorNoComma;
                var expr = noComma == false ? expression : expressionNoComma;
                if (type == "=>")
                    return cont(
                        pushcontext,
                        noComma ? arrowBodyNoComma : arrowBody,
                        popcontext
                    );
                if (type == "operator") {
                    if (/\+\+|--/.test(value) || (isTS && value == "!"))
                        return cont(me);
                    if (
                        isTS &&
                        value == "<" &&
                        cx.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false)
                    )
                        return cont(
                            pushlex(">"),
                            commasep(typeexpr, ">"),
                            poplex,
                            me
                        );
                    if (value == "?")
                        return cont(expression, expect(":"), expr);
                    return cont(expr);
                }
                if (type == "quasi") {
                    return pass(quasi, me);
                }
                if (type == ";") return;
                if (type == "(")
                    return contCommasep(expressionNoComma, ")", "call", me);
                if (type == ".") return cont(property, me);
                if (type == "[")
                    return cont(
                        pushlex("]"),
                        maybeexpression,
                        expect("]"),
                        poplex,
                        me
                    );
                if (isTS && value == "as") {
                    cx.marked = "keyword";
                    return cont(typeexpr, me);
                }
                if (type == "regexp") {
                    cx.state.lastType = cx.marked = "operator";
                    cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);
                    return cont(expr);
                }
            }
            function quasi(type, value) {
                if (type != "quasi") return pass();
                if (value.slice(value.length - 2) != "${") return cont(quasi);
                return cont(maybeexpression, continueQuasi);
            }
            function continueQuasi(type) {
                if (type == "}") {
                    cx.marked = "string.special";
                    cx.state.tokenize = tokenQuasi;
                    return cont(quasi);
                }
            }
            function arrowBody(type) {
                findFatArrow(cx.stream, cx.state);
                return pass(type == "{" ? statement : expression);
            }
            function arrowBodyNoComma(type) {
                findFatArrow(cx.stream, cx.state);
                return pass(type == "{" ? statement : expressionNoComma);
            }
            function maybeTarget(noComma) {
                return function(type) {
                    if (type == ".")
                        return cont(noComma ? targetNoComma : target);
                    else if (type == "variable" && isTS)
                        return cont(
                            maybeTypeArgs,
                            noComma ? maybeoperatorNoComma : maybeoperatorComma
                        );
                    else return pass(noComma ? expressionNoComma : expression);
                };
            }
            function target(_, value) {
                if (value == "target") {
                    cx.marked = "keyword";
                    return cont(maybeoperatorComma);
                }
            }
            function targetNoComma(_, value) {
                if (value == "target") {
                    cx.marked = "keyword";
                    return cont(maybeoperatorNoComma);
                }
            }
            function maybelabel(type) {
                if (type == ":") return cont(poplex, statement);
                return pass(maybeoperatorComma, expect(";"), poplex);
            }
            function property(type) {
                if (type == "variable") {
                    cx.marked = "property";
                    return cont();
                }
            }
            function objprop(type, value) {
                if (type == "async") {
                    cx.marked = "property";
                    return cont(objprop);
                } else if (type == "variable" || cx.style == "keyword") {
                    cx.marked = "property";
                    if (value == "get" || value == "set")
                        return cont(getterSetter);
                    var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params
                    if (
                        isTS &&
                        cx.state.fatArrowAt == cx.stream.start &&
                        (m = cx.stream.match(/^\s*:\s*/, false))
                    )
                        cx.state.fatArrowAt = cx.stream.pos + m[0].length;
                    return cont(afterprop);
                } else if (type == "number" || type == "string") {
                    cx.marked = jsonldMode
                        ? "property"
                        : cx.style + " property";
                    return cont(afterprop);
                } else if (type == "jsonld-keyword") {
                    return cont(afterprop);
                } else if (isTS && isModifier(value)) {
                    cx.marked = "keyword";
                    return cont(objprop);
                } else if (type == "[") {
                    return cont(expression, maybetype, expect("]"), afterprop);
                } else if (type == "spread") {
                    return cont(expressionNoComma, afterprop);
                } else if (value == "*") {
                    cx.marked = "keyword";
                    return cont(objprop);
                } else if (type == ":") {
                    return pass(afterprop);
                }
            }
            function getterSetter(type) {
                if (type != "variable") return pass(afterprop);
                cx.marked = "property";
                return cont(functiondef);
            }
            function afterprop(type) {
                if (type == ":") return cont(expressionNoComma);
                if (type == "(") return pass(functiondef);
            }
            function commasep(what, end, sep) {
                function proceed(type, value) {
                    if (sep ? sep.indexOf(type) > -1 : type == ",") {
                        var lex = cx.state.lexical;
                        if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
                        return cont(function(type, value) {
                            if (type == end || value == end) return pass();
                            return pass(what);
                        }, proceed);
                    }
                    if (type == end || value == end) return cont();
                    if (sep && sep.indexOf(";") > -1) return pass(what);
                    return cont(expect(end));
                }
                return function(type, value) {
                    if (type == end || value == end) return cont();
                    return pass(what, proceed);
                };
            }
            function contCommasep(what, end, info) {
                for (var i = 3; i < arguments.length; i++)
                    cx.cc.push(arguments[i]);
                return cont(pushlex(end, info), commasep(what, end), poplex);
            }
            function block(type) {
                if (type == "}") return cont();
                return pass(statement, block);
            }
            function maybetype(type, value) {
                if (isTS) {
                    if (type == ":") return cont(typeexpr);
                    if (value == "?") return cont(maybetype);
                }
            }
            function maybetypeOrIn(type, value) {
                if (isTS && (type == ":" || value == "in"))
                    return cont(typeexpr);
            }
            function mayberettype(type) {
                if (isTS && type == ":") {
                    if (cx.stream.match(/^\s*\w+\s+is\b/, false))
                        return cont(expression, isKW, typeexpr);
                    else return cont(typeexpr);
                }
            }
            function isKW(_, value) {
                if (value == "is") {
                    cx.marked = "keyword";
                    return cont();
                }
            }
            function typeexpr(type, value) {
                if (
                    value == "keyof" ||
                    value == "typeof" ||
                    value == "infer" ||
                    value == "readonly"
                ) {
                    cx.marked = "keyword";
                    return cont(
                        value == "typeof" ? expressionNoComma : typeexpr
                    );
                }
                if (type == "variable" || value == "void") {
                    cx.marked = "type";
                    return cont(afterType);
                }
                if (value == "|" || value == "&") return cont(typeexpr);
                if (type == "string" || type == "number" || type == "atom")
                    return cont(afterType);
                if (type == "[")
                    return cont(
                        pushlex("]"),
                        commasep(typeexpr, "]", ","),
                        poplex,
                        afterType
                    );
                if (type == "{")
                    return cont(pushlex("}"), typeprops, poplex, afterType);
                if (type == "(")
                    return cont(
                        commasep(typearg, ")"),
                        maybeReturnType,
                        afterType
                    );
                if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr);
                if (type == "quasi") return pass(quasiType, afterType);
            }
            function maybeReturnType(type) {
                if (type == "=>") return cont(typeexpr);
            }
            function typeprops(type) {
                if (type.match(/[\}\)\]]/)) return cont();
                if (type == "," || type == ";") return cont(typeprops);
                return pass(typeprop, typeprops);
            }
            function typeprop(type, value) {
                if (type == "variable" || cx.style == "keyword") {
                    cx.marked = "property";
                    return cont(typeprop);
                } else if (
                    value == "?" ||
                    type == "number" ||
                    type == "string"
                ) {
                    return cont(typeprop);
                } else if (type == ":") {
                    return cont(typeexpr);
                } else if (type == "[") {
                    return cont(
                        expect("variable"),
                        maybetypeOrIn,
                        expect("]"),
                        typeprop
                    );
                } else if (type == "(") {
                    return pass(functiondecl, typeprop);
                } else if (!type.match(/[;\}\)\],]/)) {
                    return cont();
                }
            }
            function quasiType(type, value) {
                if (type != "quasi") return pass();
                if (value.slice(value.length - 2) != "${")
                    return cont(quasiType);
                return cont(typeexpr, continueQuasiType);
            }
            function continueQuasiType(type) {
                if (type == "}") {
                    cx.marked = "string-2";
                    cx.state.tokenize = tokenQuasi;
                    return cont(quasiType);
                }
            }
            function typearg(type, value) {
                if (
                    (type == "variable" &&
                        cx.stream.match(/^\s*[?:]/, false)) ||
                    value == "?"
                )
                    return cont(typearg);
                if (type == ":") return cont(typeexpr);
                if (type == "spread") return cont(typearg);
                return pass(typeexpr);
            }
            function afterType(type, value) {
                if (value == "<")
                    return cont(
                        pushlex(">"),
                        commasep(typeexpr, ">"),
                        poplex,
                        afterType
                    );
                if (value == "|" || type == "." || value == "&")
                    return cont(typeexpr);
                if (type == "[") return cont(typeexpr, expect("]"), afterType);
                if (value == "extends" || value == "implements") {
                    cx.marked = "keyword";
                    return cont(typeexpr);
                }
                if (value == "?") return cont(typeexpr, expect(":"), typeexpr);
            }
            function maybeTypeArgs(_, value) {
                if (value == "<")
                    return cont(
                        pushlex(">"),
                        commasep(typeexpr, ">"),
                        poplex,
                        afterType
                    );
            }
            function typeparam() {
                return pass(typeexpr, maybeTypeDefault);
            }
            function maybeTypeDefault(_, value) {
                if (value == "=") return cont(typeexpr);
            }
            function vardef(_, value) {
                if (value == "enum") {
                    cx.marked = "keyword";
                    return cont(enumdef);
                }
                return pass(pattern, maybetype, maybeAssign, vardefCont);
            }
            function pattern(type, value) {
                if (isTS && isModifier(value)) {
                    cx.marked = "keyword";
                    return cont(pattern);
                }
                if (type == "variable") {
                    register(value);
                    return cont();
                }
                if (type == "spread") return cont(pattern);
                if (type == "[") return contCommasep(eltpattern, "]");
                if (type == "{") return contCommasep(proppattern, "}");
            }
            function proppattern(type, value) {
                if (type == "variable" && !cx.stream.match(/^\s*:/, false)) {
                    register(value);
                    return cont(maybeAssign);
                }
                if (type == "variable") cx.marked = "property";
                if (type == "spread") return cont(pattern);
                if (type == "}") return pass();
                if (type == "[")
                    return cont(
                        expression,
                        expect("]"),
                        expect(":"),
                        proppattern
                    );
                return cont(expect(":"), pattern, maybeAssign);
            }
            function eltpattern() {
                return pass(pattern, maybeAssign);
            }
            function maybeAssign(_type, value) {
                if (value == "=") return cont(expressionNoComma);
            }
            function vardefCont(type) {
                if (type == ",") return cont(vardef);
            }
            function maybeelse(type, value) {
                if (type == "keyword b" && value == "else")
                    return cont(pushlex("form", "else"), statement, poplex);
            }
            function forspec(type, value) {
                if (value == "await") return cont(forspec);
                if (type == "(") return cont(pushlex(")"), forspec1, poplex);
            }
            function forspec1(type) {
                if (type == "var") return cont(vardef, forspec2);
                if (type == "variable") return cont(forspec2);
                return pass(forspec2);
            }
            function forspec2(type, value) {
                if (type == ")") return cont();
                if (type == ";") return cont(forspec2);
                if (value == "in" || value == "of") {
                    cx.marked = "keyword";
                    return cont(expression, forspec2);
                }
                return pass(expression, forspec2);
            }
            function functiondef(type, value) {
                if (value == "*") {
                    cx.marked = "keyword";
                    return cont(functiondef);
                }
                if (type == "variable") {
                    register(value);
                    return cont(functiondef);
                }
                if (type == "(")
                    return cont(
                        pushcontext,
                        pushlex(")"),
                        commasep(funarg, ")"),
                        poplex,
                        mayberettype,
                        statement,
                        popcontext
                    );
                if (isTS && value == "<")
                    return cont(
                        pushlex(">"),
                        commasep(typeparam, ">"),
                        poplex,
                        functiondef
                    );
            }
            function functiondecl(type, value) {
                if (value == "*") {
                    cx.marked = "keyword";
                    return cont(functiondecl);
                }
                if (type == "variable") {
                    register(value);
                    return cont(functiondecl);
                }
                if (type == "(")
                    return cont(
                        pushcontext,
                        pushlex(")"),
                        commasep(funarg, ")"),
                        poplex,
                        mayberettype,
                        popcontext
                    );
                if (isTS && value == "<")
                    return cont(
                        pushlex(">"),
                        commasep(typeparam, ">"),
                        poplex,
                        functiondecl
                    );
            }
            function typename(type, value) {
                if (type == "keyword" || type == "variable") {
                    cx.marked = "type";
                    return cont(typename);
                } else if (value == "<") {
                    return cont(pushlex(">"), commasep(typeparam, ">"), poplex);
                }
            }
            function funarg(type, value) {
                if (value == "@") cont(expression, funarg);
                if (type == "spread") return cont(funarg);
                if (isTS && isModifier(value)) {
                    cx.marked = "keyword";
                    return cont(funarg);
                }
                if (isTS && type == "this") return cont(maybetype, maybeAssign);
                return pass(pattern, maybetype, maybeAssign);
            }
            function classExpression(type, value) {
                // Class expressions may have an optional name.
                if (type == "variable") return className(type, value);
                return classNameAfter(type, value);
            }
            function className(type, value) {
                if (type == "variable") {
                    register(value);
                    return cont(classNameAfter);
                }
            }
            function classNameAfter(type, value) {
                if (value == "<")
                    return cont(
                        pushlex(">"),
                        commasep(typeparam, ">"),
                        poplex,
                        classNameAfter
                    );
                if (
                    value == "extends" ||
                    value == "implements" ||
                    (isTS && type == ",")
                ) {
                    if (value == "implements") cx.marked = "keyword";
                    return cont(isTS ? typeexpr : expression, classNameAfter);
                }
                if (type == "{") return cont(pushlex("}"), classBody, poplex);
            }
            function classBody(type, value) {
                if (
                    type == "async" ||
                    (type == "variable" &&
                        (value == "static" ||
                            value == "get" ||
                            value == "set" ||
                            (isTS && isModifier(value))) &&
                        cx.stream.match(/^\s+[\w$\xa1-\uffff]/, false))
                ) {
                    cx.marked = "keyword";
                    return cont(classBody);
                }
                if (type == "variable" || cx.style == "keyword") {
                    cx.marked = "property";
                    return cont(classfield, classBody);
                }
                if (type == "number" || type == "string")
                    return cont(classfield, classBody);
                if (type == "[")
                    return cont(
                        expression,
                        maybetype,
                        expect("]"),
                        classfield,
                        classBody
                    );
                if (value == "*") {
                    cx.marked = "keyword";
                    return cont(classBody);
                }
                if (isTS && type == "(") return pass(functiondecl, classBody);
                if (type == ";" || type == ",") return cont(classBody);
                if (type == "}") return cont();
                if (value == "@") return cont(expression, classBody);
            }
            function classfield(type, value) {
                if (value == "!" || value == "?") return cont(classfield);
                if (type == ":") return cont(typeexpr, maybeAssign);
                if (value == "=") return cont(expressionNoComma);
                var context = cx.state.lexical.prev,
                    isInterface = context && context.info == "interface";
                return pass(isInterface ? functiondecl : functiondef);
            }
            function afterExport(type, value) {
                if (value == "*") {
                    cx.marked = "keyword";
                    return cont(maybeFrom, expect(";"));
                }
                if (value == "default") {
                    cx.marked = "keyword";
                    return cont(expression, expect(";"));
                }
                if (type == "{")
                    return cont(
                        commasep(exportField, "}"),
                        maybeFrom,
                        expect(";")
                    );
                return pass(statement);
            }
            function exportField(type, value) {
                if (value == "as") {
                    cx.marked = "keyword";
                    return cont(expect("variable"));
                }
                if (type == "variable")
                    return pass(expressionNoComma, exportField);
            }
            function afterImport(type) {
                if (type == "string") return cont();
                if (type == "(") return pass(expression);
                if (type == ".") return pass(maybeoperatorComma);
                return pass(importSpec, maybeMoreImports, maybeFrom);
            }
            function importSpec(type, value) {
                if (type == "{") return contCommasep(importSpec, "}");
                if (type == "variable") register(value);
                if (value == "*") cx.marked = "keyword";
                return cont(maybeAs);
            }
            function maybeMoreImports(type) {
                if (type == ",") return cont(importSpec, maybeMoreImports);
            }
            function maybeAs(_type, value) {
                if (value == "as") {
                    cx.marked = "keyword";
                    return cont(importSpec);
                }
            }
            function maybeFrom(_type, value) {
                if (value == "from") {
                    cx.marked = "keyword";
                    return cont(expression);
                }
            }
            function arrayLiteral(type) {
                if (type == "]") return cont();
                return pass(commasep(expressionNoComma, "]"));
            }
            function enumdef() {
                return pass(
                    pushlex("form"),
                    pattern,
                    expect("{"),
                    pushlex("}"),
                    commasep(enummember, "}"),
                    poplex,
                    poplex
                );
            }
            function enummember() {
                return pass(pattern, maybeAssign);
            }

            function isContinuedStatement(state, textAfter) {
                return (
                    state.lastType == "operator" ||
                    state.lastType == "," ||
                    isOperatorChar.test(textAfter.charAt(0)) ||
                    /[,.]/.test(textAfter.charAt(0))
                );
            }

            function expressionAllowed(stream, state, backUp) {
                return (
                    (state.tokenize == tokenBase &&
                        /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(
                            state.lastType
                        )) ||
                    (state.lastType == "quasi" &&
                        /\{\s*$/.test(
                            stream.string.slice(0, stream.pos - (backUp || 0))
                        ))
                );
            }

            // Interface

            return {
                startState: function(indentUnit) {
                    var state = {
                        tokenize: tokenBase,
                        lastType: "sof",
                        cc: [],
                        lexical: new JSLexical(-indentUnit, 0, "block", false),
                        localVars: parserConfig.localVars,
                        context:
                            parserConfig.localVars &&
                            new Context(null, null, false),
                        indented: 0,
                    };
                    if (
                        parserConfig.globalVars &&
                        typeof parserConfig.globalVars == "object"
                    )
                        state.globalVars = parserConfig.globalVars;
                    return state;
                },

                token: function(stream, state) {
                    if (stream.sol()) {
                        if (!state.lexical.hasOwnProperty("align"))
                            state.lexical.align = false;
                        state.indented = stream.indentation();
                        findFatArrow(stream, state);
                    }
                    if (state.tokenize != tokenComment && stream.eatSpace())
                        return null;
                    var style = state.tokenize(stream, state);
                    if (type == "comment") return style;
                    state.lastType =
                        type == "operator" &&
                            (content == "++" || content == "--")
                            ? "incdec"
                            : type;
                    return parseJS(state, style, type, content, stream);
                },

                indent: function(state, textAfter, cx) {
                    if (
                        state.tokenize == tokenComment ||
                        state.tokenize == tokenQuasi
                    )
                        return null;
                    if (state.tokenize != tokenBase) return 0;
                    var firstChar = textAfter && textAfter.charAt(0),
                        lexical = state.lexical,
                        top;
                    // Kludge to prevent 'maybelse' from blocking lexical scope pops
                    if (!/^\s*else\b/.test(textAfter))
                        for (var i = state.cc.length - 1; i >= 0; --i) {
                            var c = state.cc[i];
                            if (c == poplex) lexical = lexical.prev;
                            else if (c != maybeelse && c != popcontext) break;
                        }
                    while (
                        (lexical.type == "stat" || lexical.type == "form") &&
                        (firstChar == "}" ||
                            ((top = state.cc[state.cc.length - 1]) &&
                                (top == maybeoperatorComma ||
                                    top == maybeoperatorNoComma) &&
                                !/^[,\.=+\-*:?[\(]/.test(textAfter)))
                    )
                        lexical = lexical.prev;
                    if (
                        statementIndent &&
                        lexical.type == ")" &&
                        lexical.prev.type == "stat"
                    )
                        lexical = lexical.prev;
                    var type = lexical.type,
                        closing = firstChar == type;

                    if (type == "vardef")
                        return (
                            lexical.indented +
                            (state.lastType == "operator" ||
                                state.lastType == ","
                                ? lexical.info.length + 1
                                : 0)
                        );
                    else if (type == "form" && firstChar == "{")
                        return lexical.indented;
                    else if (type == "form") return lexical.indented + cx.unit;
                    else if (type == "stat")
                        return (
                            lexical.indented +
                            (isContinuedStatement(state, textAfter)
                                ? statementIndent || cx.unit
                                : 0)
                        );
                    else if (
                        lexical.info == "switch" &&
                        !closing &&
                        parserConfig.doubleIndentSwitch != false
                    )
                        return (
                            lexical.indented +
                            (/^(?:case|default)\b/.test(textAfter)
                                ? cx.unit
                                : 2 * cx.unit)
                        );
                    else if (lexical.align)
                        return lexical.column + (closing ? 0 : 1);
                    else return lexical.indented + (closing ? 0 : cx.unit);
                },

                languageData: {
                    indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
                    commentTokens: jsonMode
                        ? undefined
                        : { line: "//", block: { open: "/*", close: "*/" } },
                    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
                    wordChars: "$",
                },
            };
        }
        const javascript = mkJavaScript({});
        const json = mkJavaScript({ json: true });
        const jsonld = mkJavaScript({ jsonld: true });
        const typescript = mkJavaScript({ typescript: true });

        exports.javascript = javascript;
        exports.json = json;
        exports.jsonld = jsonld;
        exports.typescript = typescript;
    }
    _M36();
    function _M37() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var keywords = [
            "and",
            "as",
            "block",
            "endblock",
            "by",
            "cycle",
            "debug",
            "else",
            "elif",
            "extends",
            "filter",
            "endfilter",
            "firstof",
            "for",
            "endfor",
            "if",
            "endif",
            "ifchanged",
            "endifchanged",
            "ifequal",
            "endifequal",
            "ifnotequal",
            "endifnotequal",
            "in",
            "include",
            "load",
            "not",
            "now",
            "or",
            "parsed",
            "regroup",
            "reversed",
            "spaceless",
            "endspaceless",
            "ssi",
            "templatetag",
            "openblock",
            "closeblock",
            "openvariable",
            "closevariable",
            "openbrace",
            "closebrace",
            "opencomment",
            "closecomment",
            "widthratio",
            "url",
            "with",
            "endwith",
            "get_current_language",
            "trans",
            "endtrans",
            "noop",
            "blocktrans",
            "endblocktrans",
            "get_available_languages",
            "get_current_language_bidi",
            "plural",
        ],
            operator = /^[+\-*&%=<>!?|~^]/,
            sign = /^[:\[\(\{]/,
            atom = ["true", "false"],
            number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;

        keywords = new RegExp("((" + keywords.join(")|(") + "))\\b");
        atom = new RegExp("((" + atom.join(")|(") + "))\\b");

        function tokenBase(stream, state) {
            var ch = stream.peek();

            //Comment
            if (state.incomment) {
                if (!stream.skipTo("#}")) {
                    stream.skipToEnd();
                } else {
                    stream.eatWhile(/\#|}/);
                    state.incomment = false;
                }
                return "comment";
                //Tag
            } else if (state.intag) {
                //After operator
                if (state.operator) {
                    state.operator = false;
                    if (stream.match(atom)) {
                        return "atom";
                    }
                    if (stream.match(number)) {
                        return "number";
                    }
                }
                //After sign
                if (state.sign) {
                    state.sign = false;
                    if (stream.match(atom)) {
                        return "atom";
                    }
                    if (stream.match(number)) {
                        return "number";
                    }
                }

                if (state.instring) {
                    if (ch == state.instring) {
                        state.instring = false;
                    }
                    stream.next();
                    return "string";
                } else if (ch == "'" || ch == '"') {
                    state.instring = ch;
                    stream.next();
                    return "string";
                } else if (
                    stream.match(state.intag + "}") ||
                    (stream.eat("-") && stream.match(state.intag + "}"))
                ) {
                    state.intag = false;
                    return "tag";
                } else if (stream.match(operator)) {
                    state.operator = true;
                    return "operator";
                } else if (stream.match(sign)) {
                    state.sign = true;
                } else {
                    if (stream.eat(" ") || stream.sol()) {
                        if (stream.match(keywords)) {
                            return "keyword";
                        }
                        if (stream.match(atom)) {
                            return "atom";
                        }
                        if (stream.match(number)) {
                            return "number";
                        }
                        if (stream.sol()) {
                            stream.next();
                        }
                    } else {
                        stream.next();
                    }
                }
                return "variable";
            } else if (stream.eat("{")) {
                if (stream.eat("#")) {
                    state.incomment = true;
                    if (!stream.skipTo("#}")) {
                        stream.skipToEnd();
                    } else {
                        stream.eatWhile(/\#|}/);
                        state.incomment = false;
                    }
                    return "comment";
                    //Open tag
                } else if ((ch = stream.eat(/\{|%/))) {
                    //Cache close tag
                    state.intag = ch;
                    if (ch == "{") {
                        state.intag = "}";
                    }
                    stream.eat("-");
                    return "tag";
                }
            }
            stream.next();
        }
        const jinja2 = {
            startState: function() {
                return { tokenize: tokenBase };
            },
            token: function(stream, state) {
                return state.tokenize(stream, state);
            },
            languageData: {
                commentTokens: { block: { open: "{#", close: "#}" } },
            },
        };

        exports.jinja2 = jinja2;
    }
    _M37();
    function _M38() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words, end, pre) {
            if (typeof pre === "undefined") pre = "";
            if (typeof end === "undefined") {
                end = "\\b";
            }
            return new RegExp(
                "^" + pre + "((" + words.join(")|(") + "))" + end
            );
        }

        var octChar = "\\\\[0-7]{1,3}";
        var hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
        var sChar = "\\\\[abefnrtv0%?'\"\\\\]";
        var uChar =
            "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";

        var asciiOperatorsList = [
            "[<>]:",
            "[<>=]=",
            "<<=?",
            ">>>?=?",
            "=>",
            "--?>",
            "<--[->]?",
            "\\/\\/",
            "\\.{2,3}",
            "[\\.\\\\%*+\\-<>!\\/^|&]=?",
            "\\?",
            "\\$",
            "~",
            ":",
        ];
        var operators = wordRegexp(
            [
                "[<>]:",
                "[<>=]=",
                "[!=]==",
                "<<=?",
                ">>>?=?",
                "=>?",
                "--?>",
                "<--[->]?",
                "\\/\\/",
                "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?",
                "\\?",
                "\\$",
                "~",
                ":",
                "\\u00D7",
                "\\u2208",
                "\\u2209",
                "\\u220B",
                "\\u220C",
                "\\u2218",
                "\\u221A",
                "\\u221B",
                "\\u2229",
                "\\u222A",
                "\\u2260",
                "\\u2264",
                "\\u2265",
                "\\u2286",
                "\\u2288",
                "\\u228A",
                "\\u22C5",
                "\\b(in|isa)\\b(?!.?\\()",
            ],
            ""
        );
        var delimiters = /^[;,()[\]{}]/;
        var identifiers =
            /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;

        var chars = wordRegexp([octChar, hexChar, sChar, uChar], "'");

        var openersList = [
            "begin",
            "function",
            "type",
            "struct",
            "immutable",
            "let",
            "macro",
            "for",
            "while",
            "quote",
            "if",
            "else",
            "elseif",
            "try",
            "finally",
            "catch",
            "do",
        ];

        var closersList = ["end", "else", "elseif", "catch", "finally"];

        var keywordsList = [
            "if",
            "else",
            "elseif",
            "while",
            "for",
            "begin",
            "let",
            "end",
            "do",
            "try",
            "catch",
            "finally",
            "return",
            "break",
            "continue",
            "global",
            "local",
            "const",
            "export",
            "import",
            "importall",
            "using",
            "function",
            "where",
            "macro",
            "module",
            "baremodule",
            "struct",
            "type",
            "mutable",
            "immutable",
            "quote",
            "typealias",
            "abstract",
            "primitive",
            "bitstype",
        ];

        var builtinsList = ["true", "false", "nothing", "NaN", "Inf"];

        var openers = wordRegexp(openersList);
        var closers = wordRegexp(closersList);
        var keywords = wordRegexp(keywordsList);
        var builtins = wordRegexp(builtinsList);

        var macro = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
        var symbol = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
        var stringPrefixes = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;

        var macroOperators = wordRegexp(asciiOperatorsList, "", "@");
        var symbolOperators = wordRegexp(asciiOperatorsList, "", ":");

        function inArray(state) {
            return state.nestedArrays > 0;
        }

        function inGenerator(state) {
            return state.nestedGenerators > 0;
        }

        function currentScope(state, n) {
            if (typeof n === "undefined") {
                n = 0;
            }
            if (state.scopes.length <= n) {
                return null;
            }
            return state.scopes[state.scopes.length - (n + 1)];
        }

        // tokenizers
        function tokenBase(stream, state) {
            // Handle multiline comments
            if (stream.match("#=", false)) {
                state.tokenize = tokenComment;
                return state.tokenize(stream, state);
            }

            // Handle scope changes
            var leavingExpr = state.leavingExpr;
            if (stream.sol()) {
                leavingExpr = false;
            }
            state.leavingExpr = false;

            if (leavingExpr) {
                if (stream.match(/^'+/)) {
                    return "operator";
                }
            }

            if (stream.match(/\.{4,}/)) {
                return "error";
            } else if (stream.match(/\.{1,3}/)) {
                return "operator";
            }

            if (stream.eatSpace()) {
                return null;
            }

            var ch = stream.peek();

            // Handle single line comments
            if (ch === "#") {
                stream.skipToEnd();
                return "comment";
            }

            if (ch === "[") {
                state.scopes.push("[");
                state.nestedArrays++;
            }

            if (ch === "(") {
                state.scopes.push("(");
                state.nestedGenerators++;
            }

            if (inArray(state) && ch === "]") {
                while (state.scopes.length && currentScope(state) !== "[") {
                    state.scopes.pop();
                }
                state.scopes.pop();
                state.nestedArrays--;
                state.leavingExpr = true;
            }

            if (inGenerator(state) && ch === ")") {
                while (state.scopes.length && currentScope(state) !== "(") {
                    state.scopes.pop();
                }
                state.scopes.pop();
                state.nestedGenerators--;
                state.leavingExpr = true;
            }

            if (inArray(state)) {
                if (state.lastToken == "end" && stream.match(":")) {
                    return "operator";
                }
                if (stream.match("end")) {
                    return "number";
                }
            }

            var match;
            if ((match = stream.match(openers, false))) {
                state.scopes.push(match[0]);
            }

            if (stream.match(closers, false)) {
                state.scopes.pop();
            }

            // Handle type annotations
            if (stream.match(/^::(?![:\$])/)) {
                state.tokenize = tokenAnnotation;
                return state.tokenize(stream, state);
            }

            // Handle symbols
            if (
                !leavingExpr &&
                (stream.match(symbol) || stream.match(symbolOperators))
            ) {
                return "builtin";
            }

            // Handle parametric types
            //if (stream.match(/^{[^}]*}(?=\()/)) {
            //  return "builtin";
            //}

            // Handle operators and Delimiters
            if (stream.match(operators)) {
                return "operator";
            }

            // Handle Number Literals
            if (stream.match(/^\.?\d/, false)) {
                var imMatcher = RegExp(/^im\b/);
                var numberLiteral = false;
                if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) {
                    numberLiteral = true;
                }
                // Integers
                if (stream.match(/^0x[0-9a-f_]+/i)) {
                    numberLiteral = true;
                } // Hex
                if (stream.match(/^0b[01_]+/i)) {
                    numberLiteral = true;
                } // Binary
                if (stream.match(/^0o[0-7_]+/i)) {
                    numberLiteral = true;
                } // Octal
                // Floats
                if (
                    stream.match(
                        /^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i
                    )
                ) {
                    numberLiteral = true;
                }
                if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) {
                    numberLiteral = true;
                } // Decimal
                if (numberLiteral) {
                    // Integer literals may be "long"
                    stream.match(imMatcher);
                    state.leavingExpr = true;
                    return "number";
                }
            }

            // Handle Chars
            if (stream.match("'")) {
                state.tokenize = tokenChar;
                return state.tokenize(stream, state);
            }

            // Handle Strings
            if (stream.match(stringPrefixes)) {
                state.tokenize = tokenStringFactory(stream.current());
                return state.tokenize(stream, state);
            }

            if (stream.match(macro) || stream.match(macroOperators)) {
                return "meta";
            }

            if (stream.match(delimiters)) {
                return null;
            }

            if (stream.match(keywords)) {
                return "keyword";
            }

            if (stream.match(builtins)) {
                return "builtin";
            }

            var isDefinition =
                state.isDefinition ||
                state.lastToken == "function" ||
                state.lastToken == "macro" ||
                state.lastToken == "type" ||
                state.lastToken == "struct" ||
                state.lastToken == "immutable";

            if (stream.match(identifiers)) {
                if (isDefinition) {
                    if (stream.peek() === ".") {
                        state.isDefinition = true;
                        return "variable";
                    }
                    state.isDefinition = false;
                    return "def";
                }
                state.leavingExpr = true;
                return "variable";
            }

            // Handle non-detected items
            stream.next();
            return "error";
        }

        function tokenAnnotation(stream, state) {
            stream.match(/.*?(?=[,;{}()=\s]|$)/);
            if (stream.match("{")) {
                state.nestedParameters++;
            } else if (stream.match("}") && state.nestedParameters > 0) {
                state.nestedParameters--;
            }
            if (state.nestedParameters > 0) {
                stream.match(/.*?(?={|})/) || stream.next();
            } else if (state.nestedParameters == 0) {
                state.tokenize = tokenBase;
            }
            return "builtin";
        }

        function tokenComment(stream, state) {
            if (stream.match("#=")) {
                state.nestedComments++;
            }
            if (!stream.match(/.*?(?=(#=|=#))/)) {
                stream.skipToEnd();
            }
            if (stream.match("=#")) {
                state.nestedComments--;
                if (state.nestedComments == 0) state.tokenize = tokenBase;
            }
            return "comment";
        }

        function tokenChar(stream, state) {
            var isChar = false,
                match;
            if (stream.match(chars)) {
                isChar = true;
            } else if ((match = stream.match(/\\u([a-f0-9]{1,4})(?=')/i))) {
                var value = parseInt(match[1], 16);
                if (value <= 55295 || value >= 57344) {
                    // (U+0,U+D7FF), (U+E000,U+FFFF)
                    isChar = true;
                    stream.next();
                }
            } else if ((match = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/))) {
                var value = parseInt(match[1], 16);
                if (value <= 1114111) {
                    // U+10FFFF
                    isChar = true;
                    stream.next();
                }
            }
            if (isChar) {
                state.leavingExpr = true;
                state.tokenize = tokenBase;
                return "string";
            }
            if (!stream.match(/^[^']+(?=')/)) {
                stream.skipToEnd();
            }
            if (stream.match("'")) {
                state.tokenize = tokenBase;
            }
            return "error";
        }

        function tokenStringFactory(delimiter) {
            if (delimiter.substr(-3) === '"""') {
                delimiter = '"""';
            } else if (delimiter.substr(-1) === '"') {
                delimiter = '"';
            }
            function tokenString(stream, state) {
                if (stream.eat("\\")) {
                    stream.next();
                } else if (stream.match(delimiter)) {
                    state.tokenize = tokenBase;
                    state.leavingExpr = true;
                    return "string";
                } else {
                    stream.eat(/[`"]/);
                }
                stream.eatWhile(/[^\\`"]/);
                return "string";
            }
            return tokenString;
        }

        const julia = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    scopes: [],
                    lastToken: null,
                    leavingExpr: false,
                    isDefinition: false,
                    nestedArrays: 0,
                    nestedComments: 0,
                    nestedGenerators: 0,
                    nestedParameters: 0,
                    firstParenPos: -1,
                };
            },

            token: function(stream, state) {
                var style = state.tokenize(stream, state);
                var current = stream.current();

                if (current && style) {
                    state.lastToken = current;
                }

                return style;
            },

            indent: function(state, textAfter, cx) {
                var delta = 0;
                if (
                    textAfter === "]" ||
                    textAfter === ")" ||
                    /^end\b/.test(textAfter) ||
                    /^else/.test(textAfter) ||
                    /^catch\b/.test(textAfter) ||
                    /^elseif\b/.test(textAfter) ||
                    /^finally/.test(textAfter)
                ) {
                    delta = -1;
                }
                return (state.scopes.length + delta) * cx.unit;
            },

            languageData: {
                indentOnInput: /^\s*(end|else|catch|finally)\b$/,
                commentTokens: {
                    line: "#",
                    block: { open: "#=", close: "=#" },
                },
                closeBrackets: { brackets: ["(", "[", "{", '"'] },
                autocomplete: keywordsList.concat(builtinsList),
            },
        };

        exports.julia = julia;
    }
    _M38();
    function _M39() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var tokenBase = function(stream, state) {
            var next_rule = state.next || "start";
            if (next_rule) {
                state.next = state.next;
                var nr = Rules[next_rule];
                if (nr.splice) {
                    for (var i$ = 0; i$ < nr.length; ++i$) {
                        var r = nr[i$];
                        if (r.regex && stream.match(r.regex)) {
                            state.next = r.next || state.next;
                            return r.token;
                        }
                    }
                    stream.next();
                    return "error";
                }
                if (stream.match((r = Rules[next_rule]))) {
                    if (r.regex && stream.match(r.regex)) {
                        state.next = r.next;
                        return r.token;
                    } else {
                        stream.next();
                        return "error";
                    }
                }
            }
            stream.next();
            return "error";
        };

        var identifier =
            "(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*";
        var indenter = RegExp(
            "(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*" +
            identifier +
            ")?))\\s*$"
        );
        var keywordend = "(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))";
        var stringfill = {
            token: "string",
            regex: ".+",
        };
        var Rules = {
            start: [
                {
                    token: "docComment",
                    regex: "/\\*",
                    next: "comment",
                },
                {
                    token: "comment",
                    regex: "#.*",
                },
                {
                    token: "keyword",
                    regex:
                        "(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)" +
                        keywordend,
                },
                {
                    token: "atom",
                    regex:
                        "(?:true|false|yes|no|on|off|null|void|undefined)" +
                        keywordend,
                },
                {
                    token: "invalid",
                    regex:
                        "(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)" +
                        keywordend,
                },
                {
                    token: "className.standard",
                    regex:
                        "(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)" +
                        keywordend,
                },
                {
                    token: "variableName.function.standard",
                    regex:
                        "(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)" +
                        keywordend,
                },
                {
                    token: "variableName.standard",
                    regex:
                        "(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)" +
                        keywordend,
                },
                {
                    token: "variableName",
                    regex: identifier + "\\s*:(?![:=])",
                },
                {
                    token: "variableName",
                    regex: identifier,
                },
                {
                    token: "operatorKeyword",
                    regex: "(?:\\.{3}|\\s+\\?)",
                },
                {
                    token: "keyword",
                    regex: "(?:@+|::|\\.\\.)",
                    next: "key",
                },
                {
                    token: "operatorKeyword",
                    regex: "\\.\\s*",
                    next: "key",
                },
                {
                    token: "string",
                    regex: "\\\\\\S[^\\s,;)}\\]]*",
                },
                {
                    token: "docString",
                    regex: "'''",
                    next: "qdoc",
                },
                {
                    token: "docString",
                    regex: '"""',
                    next: "qqdoc",
                },
                {
                    token: "string",
                    regex: "'",
                    next: "qstring",
                },
                {
                    token: "string",
                    regex: '"',
                    next: "qqstring",
                },
                {
                    token: "string",
                    regex: "`",
                    next: "js",
                },
                {
                    token: "string",
                    regex: "<\\[",
                    next: "words",
                },
                {
                    token: "regexp",
                    regex: "//",
                    next: "heregex",
                },
                {
                    token: "regexp",
                    regex: "\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}",
                    next: "key",
                },
                {
                    token: "number",
                    regex: "(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)",
                },
                {
                    token: "paren",
                    regex: "[({[]",
                },
                {
                    token: "paren",
                    regex: "[)}\\]]",
                    next: "key",
                },
                {
                    token: "operatorKeyword",
                    regex: "\\S+",
                },
                {
                    token: "content",
                    regex: "\\s+",
                },
            ],
            heregex: [
                {
                    token: "regexp",
                    regex: ".*?//[gimy$?]{0,4}",
                    next: "start",
                },
                {
                    token: "regexp",
                    regex: "\\s*#{",
                },
                {
                    token: "comment",
                    regex: "\\s+(?:#.*)?",
                },
                {
                    token: "regexp",
                    regex: "\\S+",
                },
            ],
            key: [
                {
                    token: "operatorKeyword",
                    regex: "[.?@!]+",
                },
                {
                    token: "variableName",
                    regex: identifier,
                    next: "start",
                },
                {
                    token: "content",
                    regex: "",
                    next: "start",
                },
            ],
            comment: [
                {
                    token: "docComment",
                    regex: ".*?\\*/",
                    next: "start",
                },
                {
                    token: "docComment",
                    regex: ".+",
                },
            ],
            qdoc: [
                {
                    token: "string",
                    regex: ".*?'''",
                    next: "key",
                },
                stringfill,
            ],
            qqdoc: [
                {
                    token: "string",
                    regex: '.*?"""',
                    next: "key",
                },
                stringfill,
            ],
            qstring: [
                {
                    token: "string",
                    regex: "[^\\\\']*(?:\\\\.[^\\\\']*)*'",
                    next: "key",
                },
                stringfill,
            ],
            qqstring: [
                {
                    token: "string",
                    regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
                    next: "key",
                },
                stringfill,
            ],
            js: [
                {
                    token: "string",
                    regex: "[^\\\\`]*(?:\\\\.[^\\\\`]*)*`",
                    next: "key",
                },
                stringfill,
            ],
            words: [
                {
                    token: "string",
                    regex: ".*?\\]>",
                    next: "key",
                },
                stringfill,
            ],
        };
        for (var idx in Rules) {
            var r = Rules[idx];
            if (r.splice) {
                for (var i = 0, len = r.length; i < len; ++i) {
                    var rr = r[i];
                    if (typeof rr.regex === "string") {
                        Rules[idx][i].regex = new RegExp("^" + rr.regex);
                    }
                }
            } else if (typeof rr.regex === "string") {
                Rules[idx].regex = new RegExp("^" + r.regex);
            }
        }

        const liveScript = {
            startState: function() {
                return {
                    next: "start",
                    lastToken: { style: null, indent: 0, content: "" },
                };
            },
            token: function(stream, state) {
                while (stream.pos == stream.start)
                    var style = tokenBase(stream, state);
                state.lastToken = {
                    style: style,
                    indent: stream.indentation(),
                    content: stream.current(),
                };
                return style.replace(/\./g, " ");
            },
            indent: function(state) {
                var indentation = state.lastToken.indent;
                if (state.lastToken.content.match(indenter)) {
                    indentation += 2;
                }
                return indentation;
            },
        };

        exports.liveScript = liveScript;
    }
    _M39();
    function _M40() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // used pattern building blocks
        var Identifier = "[a-zA-Z\\$][a-zA-Z0-9\\$]*";
        var pBase = "(?:\\d+)";
        var pFloat = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
        var pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
        var pPrecision = "(?:`(?:`?" + pFloat + ")?)";

        // regular expressions
        var reBaseForm = new RegExp(
            "(?:" +
            pBase +
            "(?:\\^\\^" +
            pFloatBase +
            pPrecision +
            "?(?:\\*\\^[+-]?\\d+)?))"
        );
        var reFloatForm = new RegExp(
            "(?:" + pFloat + pPrecision + "?(?:\\*\\^[+-]?\\d+)?)"
        );
        var reIdInContext = new RegExp(
            "(?:`?)(?:" + Identifier + ")(?:`(?:" + Identifier + "))*(?:`?)"
        );

        function tokenBase(stream, state) {
            var ch;

            // get next character
            ch = stream.next();

            // string
            if (ch === '"') {
                state.tokenize = tokenString;
                return state.tokenize(stream, state);
            }

            // comment
            if (ch === "(") {
                if (stream.eat("*")) {
                    state.commentLevel++;
                    state.tokenize = tokenComment;
                    return state.tokenize(stream, state);
                }
            }

            // go back one character
            stream.backUp(1);

            // look for numbers
            // Numbers in a baseform
            if (stream.match(reBaseForm, true, false)) {
                return "number";
            }

            // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition
            // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.
            if (stream.match(reFloatForm, true, false)) {
                return "number";
            }

            /* In[23] and Out[34] */
            if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
                return "atom";
            }

            // usage
            if (
                stream.match(
                    /([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/,
                    true,
                    false
                )
            ) {
                return "meta";
            }

            // message
            if (
                stream.match(
                    /([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/,
                    true,
                    false
                )
            ) {
                return "string.special";
            }

            // this makes a look-ahead match for something like variable:{_Integer}
            // the match is then forwarded to the mma-patterns tokenizer.
            if (
                stream.match(
                    /([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/,
                    true,
                    false
                )
            ) {
                return "variableName.special";
            }

            // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)
            // Cannot start with a number, but can have numbers at any other position. Examples
            // blub__Integer, a1_, b34_Integer32
            if (
                stream.match(
                    /[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/,
                    true,
                    false
                )
            ) {
                return "variableName.special";
            }
            if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
                return "variableName.special";
            }
            if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
                return "variableName.special";
            }

            // Named characters in Mathematica, like \[Gamma].
            if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
                return "character";
            }

            // Match all braces separately
            if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
                return "bracket";
            }

            // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match
            // only one.
            if (
                stream.match(
                    /(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/,
                    true,
                    false
                )
            ) {
                return "variableName.constant";
            }

            // Literals like variables, keywords, functions
            if (stream.match(reIdInContext, true, false)) {
                return "keyword";
            }

            // operators. Note that operators like @@ or /; are matched separately for each symbol.
            if (
                stream.match(
                    /(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/,
                    true,
                    false
                )
            ) {
                return "operator";
            }

            // everything else is an error
            stream.next(); // advance the stream.
            return "error";
        }

        function tokenString(stream, state) {
            var next,
                end = false,
                escaped = false;
            while ((next = stream.next()) != null) {
                if (next === '"' && !escaped) {
                    end = true;
                    break;
                }
                escaped = !escaped && next === "\\";
            }
            if (end && !escaped) {
                state.tokenize = tokenBase;
            }
            return "string";
        }
        function tokenComment(stream, state) {
            var prev, next;
            while (state.commentLevel > 0 && (next = stream.next()) != null) {
                if (prev === "(" && next === "*") state.commentLevel++;
                if (prev === "*" && next === ")") state.commentLevel--;
                prev = next;
            }
            if (state.commentLevel <= 0) {
                state.tokenize = tokenBase;
            }
            return "comment";
        }

        const mathematica = {
            startState: function() {
                return { tokenize: tokenBase, commentLevel: 0 };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
            languageData: {
                commentTokens: { block: { open: "(*", close: "*)" } },
            },
        };

        exports.mathematica = mathematica;
    }
    _M40();
    function _M41() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function prefixRE(words) {
            return new RegExp("^(?:" + words.join("|") + ")", "i");
        }
        function wordRE(words) {
            return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }

        // long list of standard functions from lua manual
        var builtins = wordRE([
            "_G",
            "_VERSION",
            "assert",
            "collectgarbage",
            "dofile",
            "error",
            "getfenv",
            "getmetatable",
            "ipairs",
            "load",
            "loadfile",
            "loadstring",
            "module",
            "next",
            "pairs",
            "pcall",
            "print",
            "rawequal",
            "rawget",
            "rawset",
            "require",
            "select",
            "setfenv",
            "setmetatable",
            "tonumber",
            "tostring",
            "type",
            "unpack",
            "xpcall",

            "coroutine.create",
            "coroutine.resume",
            "coroutine.running",
            "coroutine.status",
            "coroutine.wrap",
            "coroutine.yield",

            "debug.debug",
            "debug.getfenv",
            "debug.gethook",
            "debug.getinfo",
            "debug.getlocal",
            "debug.getmetatable",
            "debug.getregistry",
            "debug.getupvalue",
            "debug.setfenv",
            "debug.sethook",
            "debug.setlocal",
            "debug.setmetatable",
            "debug.setupvalue",
            "debug.traceback",

            "close",
            "flush",
            "lines",
            "read",
            "seek",
            "setvbuf",
            "write",

            "io.close",
            "io.flush",
            "io.input",
            "io.lines",
            "io.open",
            "io.output",
            "io.popen",
            "io.read",
            "io.stderr",
            "io.stdin",
            "io.stdout",
            "io.tmpfile",
            "io.type",
            "io.write",

            "math.abs",
            "math.acos",
            "math.asin",
            "math.atan",
            "math.atan2",
            "math.ceil",
            "math.cos",
            "math.cosh",
            "math.deg",
            "math.exp",
            "math.floor",
            "math.fmod",
            "math.frexp",
            "math.huge",
            "math.ldexp",
            "math.log",
            "math.log10",
            "math.max",
            "math.min",
            "math.modf",
            "math.pi",
            "math.pow",
            "math.rad",
            "math.random",
            "math.randomseed",
            "math.sin",
            "math.sinh",
            "math.sqrt",
            "math.tan",
            "math.tanh",

            "os.clock",
            "os.date",
            "os.difftime",
            "os.execute",
            "os.exit",
            "os.getenv",
            "os.remove",
            "os.rename",
            "os.setlocale",
            "os.time",
            "os.tmpname",

            "package.cpath",
            "package.loaded",
            "package.loaders",
            "package.loadlib",
            "package.path",
            "package.preload",
            "package.seeall",

            "string.byte",
            "string.char",
            "string.dump",
            "string.find",
            "string.format",
            "string.gmatch",
            "string.gsub",
            "string.len",
            "string.lower",
            "string.match",
            "string.rep",
            "string.reverse",
            "string.sub",
            "string.upper",

            "table.concat",
            "table.insert",
            "table.maxn",
            "table.remove",
            "table.sort",
        ]);
        var keywords = wordRE([
            "and",
            "break",
            "elseif",
            "false",
            "nil",
            "not",
            "or",
            "return",
            "true",
            "function",
            "end",
            "if",
            "then",
            "else",
            "do",
            "while",
            "repeat",
            "until",
            "for",
            "in",
            "local",
        ]);

        var indentTokens = wordRE([
            "function",
            "if",
            "repeat",
            "do",
            "\\(",
            "{",
        ]);
        var dedentTokens = wordRE(["end", "until", "\\)", "}"]);
        var dedentPartial = prefixRE([
            "end",
            "until",
            "\\)",
            "}",
            "else",
            "elseif",
        ]);

        function readBracket(stream) {
            var level = 0;
            while (stream.eat("=")) ++level;
            stream.eat("[");
            return level;
        }

        function normal(stream, state) {
            var ch = stream.next();
            if (ch == "-" && stream.eat("-")) {
                if (stream.eat("[") && stream.eat("["))
                    return (state.cur = bracketed(
                        readBracket(stream),
                        "comment"
                    ))(stream, state);
                stream.skipToEnd();
                return "comment";
            }
            if (ch == '"' || ch == "'")
                return (state.cur = string(ch))(stream, state);
            if (ch == "[" && /[\[=]/.test(stream.peek()))
                return (state.cur = bracketed(readBracket(stream), "string"))(
                    stream,
                    state
                );
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w.%]/);
                return "number";
            }
            if (/[\w_]/.test(ch)) {
                stream.eatWhile(/[\w\\\-_.]/);
                return "variable";
            }
            return null;
        }

        function bracketed(level, style) {
            return function(stream, state) {
                var curlev = null,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (curlev == null) {
                        if (ch == "]") curlev = 0;
                    } else if (ch == "=") ++curlev;
                    else if (ch == "]" && curlev == level) {
                        state.cur = normal;
                        break;
                    } else curlev = null;
                }
                return style;
            };
        }

        function string(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) break;
                    escaped = !escaped && ch == "\\";
                }
                if (!escaped) state.cur = normal;
                return "string";
            };
        }

        const lua = {
            startState: function(basecol) {
                return { basecol: 0, indentDepth: 0, cur: normal };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.cur(stream, state);
                var word = stream.current();
                if (style == "variable") {
                    if (keywords.test(word)) style = "keyword";
                    else if (builtins.test(word)) style = "builtin";
                }
                if (style != "comment" && style != "string") {
                    if (indentTokens.test(word)) ++state.indentDepth;
                    else if (dedentTokens.test(word)) --state.indentDepth;
                }
                return style;
            },

            indent: function(state, textAfter, cx) {
                var closing = dedentPartial.test(textAfter);
                return (
                    state.basecol +
                    cx.unit * (state.indentDepth - (closing ? 1 : 0))
                );
            },

            languageData: {
                indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
                commentTokens: {
                    line: "--",
                    block: { open: "--[[", close: "]]--" },
                },
            },
        };

        exports.lua = lua;
    }
    _M41();
    function _M42() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var rfc2822 = [
            "From",
            "Sender",
            "Reply-To",
            "To",
            "Cc",
            "Bcc",
            "Message-ID",
            "In-Reply-To",
            "References",
            "Resent-From",
            "Resent-Sender",
            "Resent-To",
            "Resent-Cc",
            "Resent-Bcc",
            "Resent-Message-ID",
            "Return-Path",
            "Received",
        ];
        var rfc2822NoEmail = [
            "Date",
            "Subject",
            "Comments",
            "Keywords",
            "Resent-Date",
        ];

        var whitespace = /^[ \t]/;
        var separator = /^From /; // See RFC 4155
        var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
        var rfc2822HeaderNoEmail = new RegExp(
            "^(" + rfc2822NoEmail.join("|") + "): "
        );
        var header = /^[^:]+:/; // Optional fields defined in RFC 2822
        var email = /^[^ ]+@[^ ]+/;
        var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
        var bracketedEmail = /^<.*?>/;
        var untilBracketedEmail = /^.*?(?=<.*>)/;

        function styleForHeader(header) {
            if (header === "Subject") return "header";
            return "string";
        }

        function readToken(stream, state) {
            if (stream.sol()) {
                // From last line
                state.inSeparator = false;
                if (state.inHeader && stream.match(whitespace)) {
                    // Header folding
                    return null;
                } else {
                    state.inHeader = false;
                    state.header = null;
                }

                if (stream.match(separator)) {
                    state.inHeaders = true;
                    state.inSeparator = true;
                    return "atom";
                }

                var match;
                var emailPermitted = false;
                if (
                    (match = stream.match(rfc2822HeaderNoEmail)) ||
                    ((emailPermitted = true) &&
                        (match = stream.match(rfc2822Header)))
                ) {
                    state.inHeaders = true;
                    state.inHeader = true;
                    state.emailPermitted = emailPermitted;
                    state.header = match[1];
                    return "atom";
                }

                // Use vim's heuristics: recognize custom headers only if the line is in a
                // block of legitimate headers.
                if (state.inHeaders && (match = stream.match(header))) {
                    state.inHeader = true;
                    state.emailPermitted = true;
                    state.header = match[1];
                    return "atom";
                }

                state.inHeaders = false;
                stream.skipToEnd();
                return null;
            }

            if (state.inSeparator) {
                if (stream.match(email)) return "link";
                if (stream.match(untilEmail)) return "atom";
                stream.skipToEnd();
                return "atom";
            }

            if (state.inHeader) {
                var style = styleForHeader(state.header);

                if (state.emailPermitted) {
                    if (stream.match(bracketedEmail)) return style + " link";
                    if (stream.match(untilBracketedEmail)) return style;
                }
                stream.skipToEnd();
                return style;
            }

            stream.skipToEnd();
            return null;
        }
        const mbox = {
            startState: function() {
                return {
                    // Is in a mbox separator
                    inSeparator: false,
                    // Is in a mail header
                    inHeader: false,
                    // If bracketed email is permitted. Only applicable when inHeader
                    emailPermitted: false,
                    // Name of current header
                    header: null,
                    // Is in a region of mail headers
                    inHeaders: false,
                };
            },
            token: readToken,
            blankLine: function(state) {
                state.inHeaders = state.inSeparator = state.inHeader = false;
            },
            languageData: {
                autocomplete: rfc2822.concat(rfc2822NoEmail),
            },
        };

        exports.mbox = mbox;
    }
    _M42();
    function _M43() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function parseWords(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        var specials = parseWords(
            "$! $$ $& $? $+ $abook $abs $active $activecid " +
            "$activewid $address $addtok $agent $agentname $agentstat $agentver " +
            "$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime " +
            "$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind " +
            "$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes " +
            "$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color " +
            "$com $comcall $comchan $comerr $compact $compress $comval $cos $count " +
            "$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight " +
            "$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress " +
            "$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll " +
            "$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error " +
            "$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir " +
            "$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve " +
            "$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt " +
            "$group $halted $hash $height $hfind $hget $highlight $hnick $hotline " +
            "$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil " +
            "$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect " +
            "$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile " +
            "$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive " +
            "$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock " +
            "$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer " +
            "$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext " +
            "$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode " +
            "$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile " +
            "$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly " +
            "$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree " +
            "$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo " +
            "$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex " +
            "$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline " +
            "$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin " +
            "$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname " +
            "$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped " +
            "$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp " +
            "$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel " +
            "$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver " +
            "$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor"
        );
        var keywords = parseWords(
            "abook ajinvite alias aline ame amsg anick aop auser autojoin avoice " +
            "away background ban bcopy beep bread break breplace bset btrunc bunset bwrite " +
            "channel clear clearall cline clipboard close cnick color comclose comopen " +
            "comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver " +
            "debug dec describe dialog did didtok disable disconnect dlevel dline dll " +
            "dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace " +
            "drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable " +
            "events exit fclose filter findtext finger firewall flash flist flood flush " +
            "flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove " +
            "gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd " +
            "halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear " +
            "ialmark identd if ignore iline inc invite iuser join kick linesep links list " +
            "load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice " +
            "notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice " +
            "qme qmsg query queryn quit raw reload remini remote remove rename renwin " +
            "reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini " +
            "say scid scon server set showmirc signam sline sockaccept sockclose socklist " +
            "socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite " +
            "sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize " +
            "toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho " +
            "var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum " +
            "isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower " +
            "isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs " +
            "elseif else goto menu nicklist status title icon size option text edit " +
            "button check radio box scroll list combo link tab item"
        );
        var functions = parseWords(
            "if elseif else and not or eq ne in ni for foreach while switch"
        );
        var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }
        function tokenBase(stream, state) {
            var beforeParams = state.beforeParams;
            state.beforeParams = false;
            var ch = stream.next();
            if (/[\[\]{}\(\),\.]/.test(ch)) {
                if (ch == "(" && beforeParams) state.inParams = true;
                else if (ch == ")") state.inParams = false;
                return null;
            } else if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            } else if (ch == "\\") {
                stream.eat("\\");
                stream.eat(/./);
                return "number";
            } else if (ch == "/" && stream.eat("*")) {
                return chain(stream, state, tokenComment);
            } else if (ch == ";" && stream.match(/ *\( *\(/)) {
                return chain(stream, state, tokenUnparsed);
            } else if (ch == ";" && !state.inParams) {
                stream.skipToEnd();
                return "comment";
            } else if (ch == '"') {
                stream.eat(/"/);
                return "keyword";
            } else if (ch == "$") {
                stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
                if (
                    specials &&
                    specials.propertyIsEnumerable(
                        stream.current().toLowerCase()
                    )
                ) {
                    return "keyword";
                } else {
                    state.beforeParams = true;
                    return "builtin";
                }
            } else if (ch == "%") {
                stream.eatWhile(/[^,\s()]/);
                state.beforeParams = true;
                return "string";
            } else if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            } else {
                stream.eatWhile(/[\w\$_{}]/);
                var word = stream.current().toLowerCase();
                if (keywords && keywords.propertyIsEnumerable(word))
                    return "keyword";
                if (functions && functions.propertyIsEnumerable(word)) {
                    state.beforeParams = true;
                    return "keyword";
                }
                return null;
            }
        }
        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }
        function tokenUnparsed(stream, state) {
            var maybeEnd = 0,
                ch;
            while ((ch = stream.next())) {
                if (ch == ";" && maybeEnd == 2) {
                    state.tokenize = tokenBase;
                    break;
                }
                if (ch == ")") maybeEnd++;
                else if (ch != " ") maybeEnd = 0;
            }
            return "meta";
        }
        const mirc = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    beforeParams: false,
                    inParams: false,
                };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
        };

        exports.mirc = mirc;
    }
    _M43();
    function _M44() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mlLike(parserConfig) {
            var words = {
                as: "keyword",
                do: "keyword",
                else: "keyword",
                end: "keyword",
                exception: "keyword",
                fun: "keyword",
                functor: "keyword",
                if: "keyword",
                in: "keyword",
                include: "keyword",
                let: "keyword",
                of: "keyword",
                open: "keyword",
                rec: "keyword",
                struct: "keyword",
                then: "keyword",
                type: "keyword",
                val: "keyword",
                while: "keyword",
                with: "keyword",
            };

            var extraWords = parserConfig.extraWords || {};
            for (var prop in extraWords) {
                if (extraWords.hasOwnProperty(prop)) {
                    words[prop] = parserConfig.extraWords[prop];
                }
            }
            var hintWords = [];
            for (var k in words) {
                hintWords.push(k);
            }

            function tokenBase(stream, state) {
                var ch = stream.next();

                if (ch === '"') {
                    state.tokenize = tokenString;
                    return state.tokenize(stream, state);
                }
                if (ch === "{") {
                    if (stream.eat("|")) {
                        state.longString = true;
                        state.tokenize = tokenLongString;
                        return state.tokenize(stream, state);
                    }
                }
                if (ch === "(") {
                    if (stream.match(/^\*(?!\))/)) {
                        state.commentLevel++;
                        state.tokenize = tokenComment;
                        return state.tokenize(stream, state);
                    }
                }
                if (ch === "~" || ch === "?") {
                    stream.eatWhile(/\w/);
                    return "variableName.special";
                }
                if (ch === "`") {
                    stream.eatWhile(/\w/);
                    return "quote";
                }
                if (
                    ch === "/" &&
                    parserConfig.slashComments &&
                    stream.eat("/")
                ) {
                    stream.skipToEnd();
                    return "comment";
                }
                if (/\d/.test(ch)) {
                    if (ch === "0" && stream.eat(/[bB]/)) {
                        stream.eatWhile(/[01]/);
                    }
                    if (ch === "0" && stream.eat(/[xX]/)) {
                        stream.eatWhile(/[0-9a-fA-F]/);
                    }
                    if (ch === "0" && stream.eat(/[oO]/)) {
                        stream.eatWhile(/[0-7]/);
                    } else {
                        stream.eatWhile(/[\d_]/);
                        if (stream.eat(".")) {
                            stream.eatWhile(/[\d]/);
                        }
                        if (stream.eat(/[eE]/)) {
                            stream.eatWhile(/[\d\-+]/);
                        }
                    }
                    return "number";
                }
                if (/[+\-*&%=<>!?|@\.~:]/.test(ch)) {
                    return "operator";
                }
                if (/[\w\xa1-\uffff]/.test(ch)) {
                    stream.eatWhile(/[\w\xa1-\uffff]/);
                    var cur = stream.current();
                    return words.hasOwnProperty(cur) ? words[cur] : "variable";
                }
                return null;
            }

            function tokenString(stream, state) {
                var next,
                    end = false,
                    escaped = false;
                while ((next = stream.next()) != null) {
                    if (next === '"' && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next === "\\";
                }
                if (end && !escaped) {
                    state.tokenize = tokenBase;
                }
                return "string";
            }
            function tokenComment(stream, state) {
                var prev, next;
                while (
                    state.commentLevel > 0 &&
                    (next = stream.next()) != null
                ) {
                    if (prev === "(" && next === "*") state.commentLevel++;
                    if (prev === "*" && next === ")") state.commentLevel--;
                    prev = next;
                }
                if (state.commentLevel <= 0) {
                    state.tokenize = tokenBase;
                }
                return "comment";
            }

            function tokenLongString(stream, state) {
                var prev, next;
                while (state.longString && (next = stream.next()) != null) {
                    if (prev === "|" && next === "}") state.longString = false;
                    prev = next;
                }
                if (!state.longString) {
                    state.tokenize = tokenBase;
                }
                return "string";
            }

            return {
                startState: function() {
                    return {
                        tokenize: tokenBase,
                        commentLevel: 0,
                        longString: false,
                    };
                },
                token: function(stream, state) {
                    if (stream.eatSpace()) return null;
                    return state.tokenize(stream, state);
                },

                languageData: {
                    autocomplete: hintWords,
                    commentTokens: {
                        line: parserConfig.slashComments ? "//" : undefined,
                        block: { open: "(*", close: "*)" },
                    },
                },
            };
        }
        const oCaml = mlLike({
            extraWords: {
                and: "keyword",
                assert: "keyword",
                begin: "keyword",
                class: "keyword",
                constraint: "keyword",
                done: "keyword",
                downto: "keyword",
                external: "keyword",
                function: "keyword",
                initializer: "keyword",
                lazy: "keyword",
                match: "keyword",
                method: "keyword",
                module: "keyword",
                mutable: "keyword",
                new: "keyword",
                nonrec: "keyword",
                object: "keyword",
                private: "keyword",
                sig: "keyword",
                to: "keyword",
                try: "keyword",
                value: "keyword",
                virtual: "keyword",
                when: "keyword",

                // builtins
                raise: "builtin",
                failwith: "builtin",
                true: "builtin",
                false: "builtin",

                // Pervasives builtins
                asr: "builtin",
                land: "builtin",
                lor: "builtin",
                lsl: "builtin",
                lsr: "builtin",
                lxor: "builtin",
                mod: "builtin",
                or: "builtin",

                // More Pervasives
                raise_notrace: "builtin",
                trace: "builtin",
                exit: "builtin",
                print_string: "builtin",
                print_endline: "builtin",

                int: "type",
                float: "type",
                bool: "type",
                char: "type",
                string: "type",
                unit: "type",

                // Modules
                List: "builtin",
            },
        });

        const fSharp = mlLike({
            extraWords: {
                abstract: "keyword",
                assert: "keyword",
                base: "keyword",
                begin: "keyword",
                class: "keyword",
                default: "keyword",
                delegate: "keyword",
                "do!": "keyword",
                done: "keyword",
                downcast: "keyword",
                downto: "keyword",
                elif: "keyword",
                extern: "keyword",
                finally: "keyword",
                for: "keyword",
                function: "keyword",
                global: "keyword",
                inherit: "keyword",
                inline: "keyword",
                interface: "keyword",
                internal: "keyword",
                lazy: "keyword",
                "let!": "keyword",
                match: "keyword",
                member: "keyword",
                module: "keyword",
                mutable: "keyword",
                namespace: "keyword",
                new: "keyword",
                null: "keyword",
                override: "keyword",
                private: "keyword",
                public: "keyword",
                "return!": "keyword",
                return: "keyword",
                select: "keyword",
                static: "keyword",
                to: "keyword",
                try: "keyword",
                upcast: "keyword",
                "use!": "keyword",
                use: "keyword",
                void: "keyword",
                when: "keyword",
                "yield!": "keyword",
                yield: "keyword",

                // Reserved words
                atomic: "keyword",
                break: "keyword",
                checked: "keyword",
                component: "keyword",
                const: "keyword",
                constraint: "keyword",
                constructor: "keyword",
                continue: "keyword",
                eager: "keyword",
                event: "keyword",
                external: "keyword",
                fixed: "keyword",
                method: "keyword",
                mixin: "keyword",
                object: "keyword",
                parallel: "keyword",
                process: "keyword",
                protected: "keyword",
                pure: "keyword",
                sealed: "keyword",
                tailcall: "keyword",
                trait: "keyword",
                virtual: "keyword",
                volatile: "keyword",

                // builtins
                List: "builtin",
                Seq: "builtin",
                Map: "builtin",
                Set: "builtin",
                Option: "builtin",
                int: "builtin",
                string: "builtin",
                not: "builtin",
                true: "builtin",
                false: "builtin",

                raise: "builtin",
                failwith: "builtin",
            },
            slashComments: true,
        });

        const sml = mlLike({
            extraWords: {
                abstype: "keyword",
                and: "keyword",
                andalso: "keyword",
                case: "keyword",
                datatype: "keyword",
                fn: "keyword",
                handle: "keyword",
                infix: "keyword",
                infixr: "keyword",
                local: "keyword",
                nonfix: "keyword",
                op: "keyword",
                orelse: "keyword",
                raise: "keyword",
                withtype: "keyword",
                eqtype: "keyword",
                sharing: "keyword",
                sig: "keyword",
                signature: "keyword",
                structure: "keyword",
                where: "keyword",
                true: "keyword",
                false: "keyword",

                // types
                int: "builtin",
                real: "builtin",
                string: "builtin",
                char: "builtin",
                bool: "builtin",
            },
            slashComments: true,
        });
        exports.mllike = {
            fSharp,
            oCaml,
            sml
        };
    }
    _M44();
    function _M45() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var keywords = words(
            "algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within"
        );
        var builtin = words(
            "abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh"
        );
        var atoms = words("Real Boolean Integer String");

        var completions = [].concat(
            Object.keys(keywords),
            Object.keys(builtin),
            Object.keys(atoms)
        );

        var isSingleOperatorChar = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
        var isDoubleOperatorChar = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
        var isDigit = /[0-9]/;
        var isNonDigit = /[_a-zA-Z]/;

        function tokenLineComment(stream, state) {
            stream.skipToEnd();
            state.tokenize = null;
            return "comment";
        }

        function tokenBlockComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenString(stream, state) {
            var escaped = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (ch == '"' && !escaped) {
                    state.tokenize = null;
                    state.sol = false;
                    break;
                }
                escaped = !escaped && ch == "\\";
            }

            return "string";
        }

        function tokenIdent(stream, state) {
            stream.eatWhile(isDigit);
            while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }

            var cur = stream.current();

            if (
                state.sol &&
                (cur == "package" ||
                    cur == "model" ||
                    cur == "when" ||
                    cur == "connector")
            )
                state.level++;
            else if (state.sol && cur == "end" && state.level > 0)
                state.level--;

            state.tokenize = null;
            state.sol = false;

            if (keywords.propertyIsEnumerable(cur)) return "keyword";
            else if (builtin.propertyIsEnumerable(cur)) return "builtin";
            else if (atoms.propertyIsEnumerable(cur)) return "atom";
            else return "variable";
        }

        function tokenQIdent(stream, state) {
            while (stream.eat(/[^']/)) { }

            state.tokenize = null;
            state.sol = false;

            if (stream.eat("'")) return "variable";
            else return "error";
        }

        function tokenUnsignedNumber(stream, state) {
            stream.eatWhile(isDigit);
            if (stream.eat(".")) {
                stream.eatWhile(isDigit);
            }
            if (stream.eat("e") || stream.eat("E")) {
                if (!stream.eat("-")) stream.eat("+");
                stream.eatWhile(isDigit);
            }

            state.tokenize = null;
            state.sol = false;
            return "number";
        }

        // Interface
        const modelica = {
            startState: function() {
                return {
                    tokenize: null,
                    level: 0,
                    sol: true,
                };
            },

            token: function(stream, state) {
                if (state.tokenize != null) {
                    return state.tokenize(stream, state);
                }

                if (stream.sol()) {
                    state.sol = true;
                }

                // WHITESPACE
                if (stream.eatSpace()) {
                    state.tokenize = null;
                    return null;
                }

                var ch = stream.next();

                // LINECOMMENT
                if (ch == "/" && stream.eat("/")) {
                    state.tokenize = tokenLineComment;
                }
                // BLOCKCOMMENT
                else if (ch == "/" && stream.eat("*")) {
                    state.tokenize = tokenBlockComment;
                }
                // TWO SYMBOL TOKENS
                else if (isDoubleOperatorChar.test(ch + stream.peek())) {
                    stream.next();
                    state.tokenize = null;
                    return "operator";
                }
                // SINGLE SYMBOL TOKENS
                else if (isSingleOperatorChar.test(ch)) {
                    state.tokenize = null;
                    return "operator";
                }
                // IDENT
                else if (isNonDigit.test(ch)) {
                    state.tokenize = tokenIdent;
                }
                // Q-IDENT
                else if (ch == "'" && stream.peek() && stream.peek() != "'") {
                    state.tokenize = tokenQIdent;
                }
                // STRING
                else if (ch == '"') {
                    state.tokenize = tokenString;
                }
                // UNSIGNED_NUMBER
                else if (isDigit.test(ch)) {
                    state.tokenize = tokenUnsignedNumber;
                }
                // ERROR
                else {
                    state.tokenize = null;
                    return "error";
                }

                return state.tokenize(stream, state);
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != null) return null;

                var level = state.level;
                if (/(algorithm)/.test(textAfter)) level--;
                if (/(equation)/.test(textAfter)) level--;
                if (/(initial algorithm)/.test(textAfter)) level--;
                if (/(initial equation)/.test(textAfter)) level--;
                if (/(end)/.test(textAfter)) level--;

                if (level > 0) return cx.unit * level;
                else return 0;
            },

            languageData: {
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                autocomplete: completions,
            },
        };

        exports.modelica = modelica;
    }
    _M45();
    function _M46() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkParser(lang) {
            return {
                startState: startStateFn,
                copyState: copyStateFn,
                token: produceTokenFunction(lang),
                languageData: {
                    commentTokens: {
                        line: "#",
                        block: { open: "/*", close: "*/" },
                    },
                },
            };
        }

        const mscgen = mkParser({
            keywords: ["msc"],
            options: ["hscale", "width", "arcgradient", "wordwraparcs"],
            constants: ["true", "false", "on", "off"],
            attributes: [
                "label",
                "idurl",
                "id",
                "url",
                "linecolor",
                "linecolour",
                "textcolor",
                "textcolour",
                "textbgcolor",
                "textbgcolour",
                "arclinecolor",
                "arclinecolour",
                "arctextcolor",
                "arctextcolour",
                "arctextbgcolor",
                "arctextbgcolour",
                "arcskip",
            ],
            brackets: ["\\{", "\\}"], // [ and  ] are brackets too, but these get handled in with lists
            arcsWords: ["note", "abox", "rbox", "box"],
            arcsOthers: [
                "\\|\\|\\|",
                "\\.\\.\\.",
                "---",
                "--",
                "<->",
                "==",
                "<<=>>",
                "<=>",
                "\\.\\.",
                "<<>>",
                "::",
                "<:>",
                "->",
                "=>>",
                "=>",
                ">>",
                ":>",
                "<-",
                "<<=",
                "<=",
                "<<",
                "<:",
                "x-",
                "-x",
            ],
            singlecomment: ["//", "#"],
            operators: ["="],
        });

        const msgenny = mkParser({
            keywords: null,
            options: [
                "hscale",
                "width",
                "arcgradient",
                "wordwraparcs",
                "wordwrapentities",
                "watermark",
            ],
            constants: ["true", "false", "on", "off", "auto"],
            attributes: null,
            brackets: ["\\{", "\\}"],
            arcsWords: [
                "note",
                "abox",
                "rbox",
                "box",
                "alt",
                "else",
                "opt",
                "break",
                "par",
                "seq",
                "strict",
                "neg",
                "critical",
                "ignore",
                "consider",
                "assert",
                "loop",
                "ref",
                "exc",
            ],
            arcsOthers: [
                "\\|\\|\\|",
                "\\.\\.\\.",
                "---",
                "--",
                "<->",
                "==",
                "<<=>>",
                "<=>",
                "\\.\\.",
                "<<>>",
                "::",
                "<:>",
                "->",
                "=>>",
                "=>",
                ">>",
                ":>",
                "<-",
                "<<=",
                "<=",
                "<<",
                "<:",
                "x-",
                "-x",
            ],
            singlecomment: ["//", "#"],
            operators: ["="],
        });

        const xu = mkParser({
            keywords: ["msc", "xu"],
            options: [
                "hscale",
                "width",
                "arcgradient",
                "wordwraparcs",
                "wordwrapentities",
                "watermark",
            ],
            constants: ["true", "false", "on", "off", "auto"],
            attributes: [
                "label",
                "idurl",
                "id",
                "url",
                "linecolor",
                "linecolour",
                "textcolor",
                "textcolour",
                "textbgcolor",
                "textbgcolour",
                "arclinecolor",
                "arclinecolour",
                "arctextcolor",
                "arctextcolour",
                "arctextbgcolor",
                "arctextbgcolour",
                "arcskip",
                "title",
                "deactivate",
                "activate",
                "activation",
            ],
            brackets: ["\\{", "\\}"], // [ and  ] are brackets too, but these get handled in with lists
            arcsWords: [
                "note",
                "abox",
                "rbox",
                "box",
                "alt",
                "else",
                "opt",
                "break",
                "par",
                "seq",
                "strict",
                "neg",
                "critical",
                "ignore",
                "consider",
                "assert",
                "loop",
                "ref",
                "exc",
            ],
            arcsOthers: [
                "\\|\\|\\|",
                "\\.\\.\\.",
                "---",
                "--",
                "<->",
                "==",
                "<<=>>",
                "<=>",
                "\\.\\.",
                "<<>>",
                "::",
                "<:>",
                "->",
                "=>>",
                "=>",
                ">>",
                ":>",
                "<-",
                "<<=",
                "<=",
                "<<",
                "<:",
                "x-",
                "-x",
            ],
            singlecomment: ["//", "#"],
            operators: ["="],
        });

        function wordRegexpBoundary(pWords) {
            return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
        }

        function wordRegexp(pWords) {
            return new RegExp("^(?:" + pWords.join("|") + ")", "i");
        }

        function startStateFn() {
            return {
                inComment: false,
                inString: false,
                inAttributeList: false,
                inScript: false,
            };
        }

        function copyStateFn(pState) {
            return {
                inComment: pState.inComment,
                inString: pState.inString,
                inAttributeList: pState.inAttributeList,
                inScript: pState.inScript,
            };
        }

        function produceTokenFunction(pConfig) {
            return function(pStream, pState) {
                if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {
                    return "bracket";
                }
                /* comments */
                if (!pState.inComment) {
                    if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
                        pState.inComment = true;
                        return "comment";
                    }
                    if (
                        pStream.match(
                            wordRegexp(pConfig.singlecomment),
                            true,
                            true
                        )
                    ) {
                        pStream.skipToEnd();
                        return "comment";
                    }
                }
                if (pState.inComment) {
                    if (pStream.match(/[^\*\/]*\*\//, true, true))
                        pState.inComment = false;
                    else pStream.skipToEnd();
                    return "comment";
                }
                /* strings */
                if (
                    !pState.inString &&
                    pStream.match(/\"(\\\"|[^\"])*/, true, true)
                ) {
                    pState.inString = true;
                    return "string";
                }
                if (pState.inString) {
                    if (pStream.match(/[^\"]*\"/, true, true))
                        pState.inString = false;
                    else pStream.skipToEnd();
                    return "string";
                }
                /* keywords & operators */
                if (
                    !!pConfig.keywords &&
                    pStream.match(
                        wordRegexpBoundary(pConfig.keywords),
                        true,
                        true
                    )
                )
                    return "keyword";

                if (
                    pStream.match(
                        wordRegexpBoundary(pConfig.options),
                        true,
                        true
                    )
                )
                    return "keyword";

                if (
                    pStream.match(
                        wordRegexpBoundary(pConfig.arcsWords),
                        true,
                        true
                    )
                )
                    return "keyword";

                if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))
                    return "keyword";

                if (
                    !!pConfig.operators &&
                    pStream.match(wordRegexp(pConfig.operators), true, true)
                )
                    return "operator";

                if (
                    !!pConfig.constants &&
                    pStream.match(wordRegexp(pConfig.constants), true, true)
                )
                    return "variable";

                /* attribute lists */
                if (
                    !pConfig.inAttributeList &&
                    !!pConfig.attributes &&
                    pStream.match("[", true, true)
                ) {
                    pConfig.inAttributeList = true;
                    return "bracket";
                }
                if (pConfig.inAttributeList) {
                    if (
                        pConfig.attributes !== null &&
                        pStream.match(
                            wordRegexpBoundary(pConfig.attributes),
                            true,
                            true
                        )
                    ) {
                        return "attribute";
                    }
                    if (pStream.match("]", true, true)) {
                        pConfig.inAttributeList = false;
                        return "bracket";
                    }
                }

                pStream.next();
                return null;
            };
        }
        exports.mscgen = mscgen;
        exports.msgenny = msgenny;
        exports.xu = xu;

    }
    _M46();
    function _M47() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var keywords = words(
            /* ngxDirectiveControl */ "break return rewrite set" +
                /* ngxDirective */ " accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
        );

        var keywords_block = words(
            /* ngxDirectiveBlock */ "http mail events server types location upstream charset_map limit_except if geo map"
        );

        var keywords_important = words(
            /* ngxDirectiveImportant */ "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
        );

        var type;
        function ret(style, tp) {
            type = tp;
            return style;
        }

        function tokenBase(stream, state) {
            stream.eatWhile(/[\w\$_]/);

            var cur = stream.current();

            if (keywords.propertyIsEnumerable(cur)) {
                return "keyword";
            } else if (keywords_block.propertyIsEnumerable(cur)) {
                return "controlKeyword";
            } else if (keywords_important.propertyIsEnumerable(cur)) {
                return "controlKeyword";
            }
            /**/

            var ch = stream.next();
            if (ch == "@") {
                stream.eatWhile(/[\w\\\-]/);
                return ret("meta", stream.current());
            } else if (ch == "/" && stream.eat("*")) {
                state.tokenize = tokenCComment;
                return tokenCComment(stream, state);
            } else if (ch == "<" && stream.eat("!")) {
                state.tokenize = tokenSGMLComment;
                return tokenSGMLComment(stream, state);
            } else if (ch == "=") ret(null, "compare");
            else if ((ch == "~" || ch == "|") && stream.eat("="))
                return ret(null, "compare");
            else if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            } else if (ch == "#") {
                stream.skipToEnd();
                return ret("comment", "comment");
            } else if (ch == "!") {
                stream.match(/^\s*\w*/);
                return ret("keyword", "important");
            } else if (/\d/.test(ch)) {
                stream.eatWhile(/[\w.%]/);
                return ret("number", "unit");
            } else if (/[,.+>*\/]/.test(ch)) {
                return ret(null, "select-op");
            } else if (/[;{}:\[\]]/.test(ch)) {
                return ret(null, ch);
            } else {
                stream.eatWhile(/[\w\\\-]/);
                return ret("variable", "variable");
            }
        }

        function tokenCComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return ret("comment", "comment");
        }

        function tokenSGMLComment(stream, state) {
            var dashes = 0,
                ch;
            while ((ch = stream.next()) != null) {
                if (dashes >= 2 && ch == ">") {
                    state.tokenize = tokenBase;
                    break;
                }
                dashes = ch == "-" ? dashes + 1 : 0;
            }
            return ret("comment", "comment");
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) break;
                    escaped = !escaped && ch == "\\";
                }
                if (!escaped) state.tokenize = tokenBase;
                return ret("string", "string");
            };
        }

        const nginx = {
            startState: function() {
                return { tokenize: tokenBase, baseIndent: 0, stack: [] };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                type = null;
                var style = state.tokenize(stream, state);

                var context = state.stack[state.stack.length - 1];
                if (type == "hash" && context == "rule") style = "atom";
                else if (style == "variable") {
                    if (context == "rule") style = "number";
                    else if (!context || context == "@media{") style = "tag";
                }

                if (context == "rule" && /^[\{\};]$/.test(type))
                    state.stack.pop();
                if (type == "{") {
                    if (context == "@media")
                        state.stack[state.stack.length - 1] = "@media{";
                    else state.stack.push("{");
                } else if (type == "}") state.stack.pop();
                else if (type == "@media") state.stack.push("@media");
                else if (context == "{" && type != "comment")
                    state.stack.push("rule");
                return style;
            },

            indent: function(state, textAfter, cx) {
                var n = state.stack.length;
                if (/^\}/.test(textAfter))
                    n -= state.stack[state.stack.length - 1] == "rule" ? 2 : 1;
                return state.baseIndent + n * cx.unit;
            },

            languageData: {
                indentOnInput: /^\s*\}$/,
            },
        };

        exports.nginx = nginx;
    }
    _M47();
    function _M48() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }

        var singleOperators = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
        var doubleOperators = new RegExp(
            "^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))"
        );
        var singleDelimiters = new RegExp("^[\\.,:]");
        var brackets = new RegExp("[()]");
        var identifiers = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
        var commandKeywords = [
            "break",
            "close",
            "do",
            "else",
            "for",
            "goto",
            "halt",
            "hang",
            "if",
            "job",
            "kill",
            "lock",
            "merge",
            "new",
            "open",
            "quit",
            "read",
            "set",
            "tcommit",
            "trollback",
            "tstart",
            "use",
            "view",
            "write",
            "xecute",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "q",
            "r",
            "s",
            "tc",
            "tro",
            "ts",
            "u",
            "v",
            "w",
            "x",
        ];
        // The following list includes intrinsic functions _and_ special variables
        var intrinsicFuncsWords = [
            "\\$ascii",
            "\\$char",
            "\\$data",
            "\\$ecode",
            "\\$estack",
            "\\$etrap",
            "\\$extract",
            "\\$find",
            "\\$fnumber",
            "\\$get",
            "\\$horolog",
            "\\$io",
            "\\$increment",
            "\\$job",
            "\\$justify",
            "\\$length",
            "\\$name",
            "\\$next",
            "\\$order",
            "\\$piece",
            "\\$qlength",
            "\\$qsubscript",
            "\\$query",
            "\\$quit",
            "\\$random",
            "\\$reverse",
            "\\$select",
            "\\$stack",
            "\\$test",
            "\\$text",
            "\\$translate",
            "\\$view",
            "\\$x",
            "\\$y",
            "\\$a",
            "\\$c",
            "\\$d",
            "\\$e",
            "\\$ec",
            "\\$es",
            "\\$et",
            "\\$f",
            "\\$fn",
            "\\$g",
            "\\$h",
            "\\$i",
            "\\$j",
            "\\$l",
            "\\$n",
            "\\$na",
            "\\$o",
            "\\$p",
            "\\$q",
            "\\$ql",
            "\\$qs",
            "\\$r",
            "\\$re",
            "\\$s",
            "\\$st",
            "\\$t",
            "\\$tr",
            "\\$v",
            "\\$z",
        ];
        var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);
        var command = wordRegexp(commandKeywords);

        function tokenBase(stream, state) {
            if (stream.sol()) {
                state.label = true;
                state.commandMode = 0;
            }

            // The <space> character has meaning in MUMPS. Ignoring consecutive
            // spaces would interfere with interpreting whether the next non-space
            // character belongs to the command or argument context.

            // Examine each character and update a mode variable whose interpretation is:
            //   >0 => command    0 => argument    <0 => command post-conditional
            var ch = stream.peek();

            if (ch == " " || ch == "\t") {
                // Pre-process <space>
                state.label = false;
                if (state.commandMode == 0) state.commandMode = 1;
                else if (state.commandMode < 0 || state.commandMode == 2)
                    state.commandMode = 0;
            } else if (ch != "." && state.commandMode > 0) {
                if (ch == ":")
                    state.commandMode = -1; // SIS - Command post-conditional
                else state.commandMode = 2;
            }

            // Do not color parameter list as line tag
            if (ch === "(" || ch === "\u0009") state.label = false;

            // MUMPS comment starts with ";"
            if (ch === ";") {
                stream.skipToEnd();
                return "comment";
            }

            // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
            if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
                return "number";

            // Handle Strings
            if (ch == '"') {
                if (stream.skipTo('"')) {
                    stream.next();
                    return "string";
                } else {
                    stream.skipToEnd();
                    return "error";
                }
            }

            // Handle operators and Delimiters
            if (stream.match(doubleOperators) || stream.match(singleOperators))
                return "operator";

            // Prevents leading "." in DO block from falling through to error
            if (stream.match(singleDelimiters)) return null;

            if (brackets.test(ch)) {
                stream.next();
                return "bracket";
            }

            if (state.commandMode > 0 && stream.match(command))
                return "controlKeyword";

            if (stream.match(intrinsicFuncs)) return "builtin";

            if (stream.match(identifiers)) return "variable";

            // Detect dollar-sign when not a documented intrinsic function
            // "^" may introduce a GVN or SSVN - Color same as function
            if (ch === "$" || ch === "^") {
                stream.next();
                return "builtin";
            }

            // MUMPS Indirection
            if (ch === "@") {
                stream.next();
                return "string.special";
            }

            if (/[\w%]/.test(ch)) {
                stream.eatWhile(/[\w%]/);
                return "variable";
            }

            // Handle non-detected items
            stream.next();
            return "error";
        }

        const mumps = {
            startState: function() {
                return {
                    label: false,
                    commandMode: 0,
                };
            },

            token: function(stream, state) {
                var style = tokenBase(stream, state);
                if (state.label) return "tag";
                return style;
            },
        };

        exports.mumps = mumps;
    }
    _M48();
    function _M49() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function simpleMode(states) {
            ensureState(states, "start");
            var states_ = {},
                meta = states.languageData || {},
                hasIndentation = false;
            for (var state in states)
                if (state != meta && states.hasOwnProperty(state)) {
                    var list = (states_[state] = []),
                        orig = states[state];
                    for (var i = 0; i < orig.length; i++) {
                        var data = orig[i];
                        list.push(new Rule(data, states));
                        if (data.indent || data.dedent) hasIndentation = true;
                    }
                }
            return {
                startState: function() {
                    return {
                        state: "start",
                        pending: null,
                        indent: hasIndentation ? [] : null,
                    };
                },
                copyState: function(state) {
                    var s = {
                        state: state.state,
                        pending: state.pending,
                        indent: state.indent && state.indent.slice(0),
                    };
                    if (state.stack) s.stack = state.stack.slice(0);
                    return s;
                },
                token: tokenFunction(states_),
                indent: indentFunction(states_, meta),
                languageData: meta,
            };
        }
        function ensureState(states, name) {
            if (!states.hasOwnProperty(name))
                throw new Error("Undefined state " + name + " in simple mode");
        }

        function toRegex(val, caret) {
            if (!val) return /(?:)/;
            var flags = "";
            if (val instanceof RegExp) {
                if (val.ignoreCase) flags = "i";
                val = val.source;
            } else {
                val = String(val);
            }
            return new RegExp(
                (caret === false ? "" : "^") + "(?:" + val + ")",
                flags
            );
        }

        function asToken(val) {
            if (!val) return null;
            if (val.apply) return val;
            if (typeof val == "string") return val.replace(/\./g, " ");
            var result = [];
            for (var i = 0; i < val.length; i++)
                result.push(val[i] && val[i].replace(/\./g, " "));
            return result;
        }

        function Rule(data, states) {
            if (data.next || data.push)
                ensureState(states, data.next || data.push);
            this.regex = toRegex(data.regex);
            this.token = asToken(data.token);
            this.data = data;
        }

        function tokenFunction(states) {
            return function(stream, state) {
                if (state.pending) {
                    var pend = state.pending.shift();
                    if (state.pending.length == 0) state.pending = null;
                    stream.pos += pend.text.length;
                    return pend.token;
                }

                var curState = states[state.state];
                for (var i = 0; i < curState.length; i++) {
                    var rule = curState[i];
                    var matches =
                        (!rule.data.sol || stream.sol()) &&
                        stream.match(rule.regex);
                    if (matches) {
                        if (rule.data.next) {
                            state.state = rule.data.next;
                        } else if (rule.data.push) {
                            (state.stack || (state.stack = [])).push(
                                state.state
                            );
                            state.state = rule.data.push;
                        } else if (
                            rule.data.pop &&
                            state.stack &&
                            state.stack.length
                        ) {
                            state.state = state.stack.pop();
                        }

                        if (rule.data.indent)
                            state.indent.push(
                                stream.indentation() + stream.indentUnit
                            );
                        if (rule.data.dedent) state.indent.pop();
                        var token = rule.token;
                        if (token && token.apply) token = token(matches);
                        if (
                            matches.length > 2 &&
                            rule.token &&
                            typeof rule.token != "string"
                        ) {
                            state.pending = [];
                            for (var j = 2; j < matches.length; j++)
                                if (matches[j])
                                    state.pending.push({
                                        text: matches[j],
                                        token: rule.token[j - 1],
                                    });
                            stream.backUp(
                                matches[0].length -
                                (matches[1] ? matches[1].length : 0)
                            );
                            return token[0];
                        } else if (token && token.join) {
                            return token[0];
                        } else {
                            return token;
                        }
                    }
                }
                stream.next();
                return null;
            };
        }

        function indentFunction(states, meta) {
            return function(state, textAfter) {
                if (
                    state.indent == null ||
                    (meta.dontIndentStates &&
                        meta.doneIndentState.indexOf(state.state) > -1)
                )
                    return null;

                var pos = state.indent.length - 1,
                    rules = states[state.state];
                scan: for (; ;) {
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        if (
                            rule.data.dedent &&
                            rule.data.dedentIfLineStart !== false
                        ) {
                            var m = rule.regex.exec(textAfter);
                            if (m && m[0]) {
                                pos--;
                                if (rule.next || rule.push)
                                    rules = states[rule.next || rule.push];
                                textAfter = textAfter.slice(m[0].length);
                                continue scan;
                            }
                        }
                    }
                    break;
                }
                return pos < 0 ? 0 : state.indent[pos];
            };
        }

        const nsis = simpleMode({
            start: [
                // Numbers
                {
                    regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/,
                    token: "number",
                },

                // Strings
                { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
                { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
                { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },

                // Compile Time Commands
                {
                    regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i,
                    token: "keyword",
                },

                // Conditional Compilation
                {
                    regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i,
                    token: "keyword",
                    indent: true,
                },
                {
                    regex: /^\s*(?:\!(else|endif|macroend))\b/i,
                    token: "keyword",
                    dedent: true,
                },

                // Runtime Commands
                {
                    regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i,
                    token: "keyword",
                },
                {
                    regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i,
                    token: "keyword",
                    indent: true,
                },
                {
                    regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i,
                    token: "keyword",
                    dedent: true,
                },

                // Command Options
                {
                    regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i,
                    token: "atom",
                },
                {
                    regex: /\b(?:admin|all|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|zlib)\b/i,
                    token: "builtin",
                },

                // LogicLib.nsh
                {
                    regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i,
                    token: "variable-2",
                    indent: true,
                },

                // FileFunc.nsh
                {
                    regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i,
                    token: "variable-2",
                    dedent: true,
                },

                // Memento.nsh
                {
                    regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i,
                    token: "variable-2",
                    dedent: true,
                },

                // TextFunc.nsh
                {
                    regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i,
                    token: "variable-2",
                    dedent: true,
                },

                // WinVer.nsh
                {
                    regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i,
                    token: "variable",
                    dedent: true,
                },

                // WordFunc.nsh
                {
                    regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i,
                    token: "keyword",
                    dedent: true,
                },

                // x64.nsh
                {
                    regex: /\$\{(?:RunningX64)\}/i,
                    token: "variable",
                    dedent: true,
                },
                {
                    regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i,
                    token: "keyword",
                    dedent: true,
                },

                // Line Comment
                { regex: /(#|;).*/, token: "comment" },

                // Block Comment
                { regex: /\/\*/, token: "comment", next: "comment" },

                // Operator
                { regex: /[-+\/*=<>!]+/, token: "operator" },

                // Variable
                { regex: /\$\w[\w\.]*/, token: "variable" },

                // Constant
                { regex: /\${[\!\w\.:-]+}/, token: "variableName.constant" },

                // Language String
                { regex: /\$\([\!\w\.:-]+\)/, token: "atom" },
            ],
            comment: [
                { regex: /.*?\*\//, token: "comment", next: "start" },
                { regex: /.*/, token: "comment" },
            ],
            languageData: {
                indentOnInput:
                    /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
                commentTokens: {
                    line: "#",
                    block: { open: "/*", close: "*/" },
                },
            },
        });

        exports.nsis = nsis;
    }
    _M49();
    function _M50() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var Location = {
            PRE_SUBJECT: 0,
            WRITING_SUB_URI: 1,
            WRITING_BNODE_URI: 2,
            PRE_PRED: 3,
            WRITING_PRED_URI: 4,
            PRE_OBJ: 5,
            WRITING_OBJ_URI: 6,
            WRITING_OBJ_BNODE: 7,
            WRITING_OBJ_LITERAL: 8,
            WRITING_LIT_LANG: 9,
            WRITING_LIT_TYPE: 10,
            POST_OBJ: 11,
            ERROR: 12,
        };
        function transitState(currState, c) {
            var currLocation = currState.location;
            var ret;

            // Opening.
            if (currLocation == Location.PRE_SUBJECT && c == "<")
                ret = Location.WRITING_SUB_URI;
            else if (currLocation == Location.PRE_SUBJECT && c == "_")
                ret = Location.WRITING_BNODE_URI;
            else if (currLocation == Location.PRE_PRED && c == "<")
                ret = Location.WRITING_PRED_URI;
            else if (currLocation == Location.PRE_OBJ && c == "<")
                ret = Location.WRITING_OBJ_URI;
            else if (currLocation == Location.PRE_OBJ && c == "_")
                ret = Location.WRITING_OBJ_BNODE;
            else if (currLocation == Location.PRE_OBJ && c == '"')
                ret = Location.WRITING_OBJ_LITERAL;
            // Closing.
            else if (currLocation == Location.WRITING_SUB_URI && c == ">")
                ret = Location.PRE_PRED;
            else if (currLocation == Location.WRITING_BNODE_URI && c == " ")
                ret = Location.PRE_PRED;
            else if (currLocation == Location.WRITING_PRED_URI && c == ">")
                ret = Location.PRE_OBJ;
            else if (currLocation == Location.WRITING_OBJ_URI && c == ">")
                ret = Location.POST_OBJ;
            else if (currLocation == Location.WRITING_OBJ_BNODE && c == " ")
                ret = Location.POST_OBJ;
            else if (currLocation == Location.WRITING_OBJ_LITERAL && c == '"')
                ret = Location.POST_OBJ;
            else if (currLocation == Location.WRITING_LIT_LANG && c == " ")
                ret = Location.POST_OBJ;
            else if (currLocation == Location.WRITING_LIT_TYPE && c == ">")
                ret = Location.POST_OBJ;
            // Closing typed and language literal.
            else if (currLocation == Location.WRITING_OBJ_LITERAL && c == "@")
                ret = Location.WRITING_LIT_LANG;
            else if (currLocation == Location.WRITING_OBJ_LITERAL && c == "^")
                ret = Location.WRITING_LIT_TYPE;
            // Spaces.
            else if (
                c == " " &&
                (currLocation == Location.PRE_SUBJECT ||
                    currLocation == Location.PRE_PRED ||
                    currLocation == Location.PRE_OBJ ||
                    currLocation == Location.POST_OBJ)
            )
                ret = currLocation;
            // Reset.
            else if (currLocation == Location.POST_OBJ && c == ".")
                ret = Location.PRE_SUBJECT;
            // Error
            else ret = Location.ERROR;

            currState.location = ret;
        }

        const ntriples = {
            startState: function() {
                return {
                    location: Location.PRE_SUBJECT,
                    uris: [],
                    anchors: [],
                    bnodes: [],
                    langs: [],
                    types: [],
                };
            },
            token: function(stream, state) {
                var ch = stream.next();
                if (ch == "<") {
                    transitState(state, ch);
                    var parsedURI = "";
                    stream.eatWhile(function(c) {
                        if (c != "#" && c != ">") {
                            parsedURI += c;
                            return true;
                        }
                        return false;
                    });
                    state.uris.push(parsedURI);
                    if (stream.match("#", false)) return "variable";
                    stream.next();
                    transitState(state, ">");
                    return "variable";
                }
                if (ch == "#") {
                    var parsedAnchor = "";
                    stream.eatWhile(function(c) {
                        if (c != ">" && c != " ") {
                            parsedAnchor += c;
                            return true;
                        }
                        return false;
                    });
                    state.anchors.push(parsedAnchor);
                    return "url";
                }
                if (ch == ">") {
                    transitState(state, ">");
                    return "variable";
                }
                if (ch == "_") {
                    transitState(state, ch);
                    var parsedBNode = "";
                    stream.eatWhile(function(c) {
                        if (c != " ") {
                            parsedBNode += c;
                            return true;
                        }
                        return false;
                    });
                    state.bnodes.push(parsedBNode);
                    stream.next();
                    transitState(state, " ");
                    return "builtin";
                }
                if (ch == '"') {
                    transitState(state, ch);
                    stream.eatWhile(function(c) {
                        return c != '"';
                    });
                    stream.next();
                    if (stream.peek() != "@" && stream.peek() != "^") {
                        transitState(state, '"');
                    }
                    return "string";
                }
                if (ch == "@") {
                    transitState(state, "@");
                    var parsedLang = "";
                    stream.eatWhile(function(c) {
                        if (c != " ") {
                            parsedLang += c;
                            return true;
                        }
                        return false;
                    });
                    state.langs.push(parsedLang);
                    stream.next();
                    transitState(state, " ");
                    return "string.special";
                }
                if (ch == "^") {
                    stream.next();
                    transitState(state, "^");
                    var parsedType = "";
                    stream.eatWhile(function(c) {
                        if (c != ">") {
                            parsedType += c;
                            return true;
                        }
                        return false;
                    });
                    state.types.push(parsedType);
                    stream.next();
                    transitState(state, ">");
                    return "variable";
                }
                if (ch == " ") {
                    transitState(state, ch);
                }
                if (ch == ".") {
                    transitState(state, ch);
                }
            },
        };

        exports.ntriples = ntriples;
    }
    _M50();
    function _M51() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }

        var singleOperators = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
        var singleDelimiters = new RegExp("^[\\(\\[\\{\\},:=;\\.]");
        var doubleOperators = new RegExp(
            "^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))"
        );
        var doubleDelimiters = new RegExp(
            "^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))"
        );
        var tripleDelimiters = new RegExp("^((>>=)|(<<=))");
        var expressionEnd = new RegExp("^[\\]\\)]");
        var identifiers = new RegExp(
            "^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*"
        );

        var builtins = wordRegexp([
            "error",
            "eval",
            "function",
            "abs",
            "acos",
            "atan",
            "asin",
            "cos",
            "cosh",
            "exp",
            "log",
            "prod",
            "sum",
            "log10",
            "max",
            "min",
            "sign",
            "sin",
            "sinh",
            "sqrt",
            "tan",
            "reshape",
            "break",
            "zeros",
            "default",
            "margin",
            "round",
            "ones",
            "rand",
            "syn",
            "ceil",
            "floor",
            "size",
            "clear",
            "zeros",
            "eye",
            "mean",
            "std",
            "cov",
            "det",
            "eig",
            "inv",
            "norm",
            "rank",
            "trace",
            "expm",
            "logm",
            "sqrtm",
            "linspace",
            "plot",
            "title",
            "xlabel",
            "ylabel",
            "legend",
            "text",
            "grid",
            "meshgrid",
            "mesh",
            "num2str",
            "fft",
            "ifft",
            "arrayfun",
            "cellfun",
            "input",
            "fliplr",
            "flipud",
            "ismember",
        ]);

        var keywords = wordRegexp([
            "return",
            "case",
            "switch",
            "else",
            "elseif",
            "end",
            "endif",
            "endfunction",
            "if",
            "otherwise",
            "do",
            "for",
            "while",
            "try",
            "catch",
            "classdef",
            "properties",
            "events",
            "methods",
            "global",
            "persistent",
            "endfor",
            "endwhile",
            "printf",
            "sprintf",
            "disp",
            "until",
            "continue",
            "pkg",
        ]);

        // tokenizers
        function tokenTranspose(stream, state) {
            if (!stream.sol() && stream.peek() === "'") {
                stream.next();
                state.tokenize = tokenBase;
                return "operator";
            }
            state.tokenize = tokenBase;
            return tokenBase(stream, state);
        }

        function tokenComment(stream, state) {
            if (stream.match(/^.*%}/)) {
                state.tokenize = tokenBase;
                return "comment";
            }
            stream.skipToEnd();
            return "comment";
        }

        function tokenBase(stream, state) {
            // whitespaces
            if (stream.eatSpace()) return null;

            // Handle one line Comments
            if (stream.match("%{")) {
                state.tokenize = tokenComment;
                stream.skipToEnd();
                return "comment";
            }

            if (stream.match(/^[%#]/)) {
                stream.skipToEnd();
                return "comment";
            }

            // Handle Number Literals
            if (stream.match(/^[0-9\.+-]/, false)) {
                if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
                    stream.tokenize = tokenBase;
                    return "number";
                }
                if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) {
                    return "number";
                }
                if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) {
                    return "number";
                }
            }
            if (stream.match(wordRegexp(["nan", "NaN", "inf", "Inf"]))) {
                return "number";
            }
            // Handle Strings
            var m =
                stream.match(/^"(?:[^"]|"")*("|$)/) ||
                stream.match(/^'(?:[^']|'')*('|$)/);
            if (m) {
                return m[1] ? "string" : "error";
            }

            // Handle words
            if (stream.match(keywords)) {
                return "keyword";
            }
            if (stream.match(builtins)) {
                return "builtin";
            }
            if (stream.match(identifiers)) {
                return "variable";
            }
            if (
                stream.match(singleOperators) ||
                stream.match(doubleOperators)
            ) {
                return "operator";
            }
            if (
                stream.match(singleDelimiters) ||
                stream.match(doubleDelimiters) ||
                stream.match(tripleDelimiters)
            ) {
                return null;
            }
            if (stream.match(expressionEnd)) {
                state.tokenize = tokenTranspose;
                return null;
            }

            // Handle non-detected items
            stream.next();
            return "error";
        }

        const octave = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                };
            },

            token: function(stream, state) {
                var style = state.tokenize(stream, state);
                if (style === "number" || style === "variable") {
                    state.tokenize = tokenTranspose;
                }
                return style;
            },

            languageData: {
                commentTokens: { line: "%" },
            },
        };

        exports.octave = octave;
    }
    _M51();
    function _M52() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }

        var singleOperators = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
        var doubleOperators =
            /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
        var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;

        var middle = [
            "in",
            "then",
            "else",
            "of",
            "elseof",
            "elsecase",
            "elseif",
            "catch",
            "finally",
            "with",
            "require",
            "prepare",
            "import",
            "export",
            "define",
            "do",
        ];
        var end = ["end"];

        var atoms = wordRegexp(["true", "false", "nil", "unit"]);
        var commonKeywords = wordRegexp([
            "andthen",
            "at",
            "attr",
            "declare",
            "feat",
            "from",
            "lex",
            "mod",
            "div",
            "mode",
            "orelse",
            "parser",
            "prod",
            "prop",
            "scanner",
            "self",
            "syn",
            "token",
        ]);
        var openingKeywords = wordRegexp([
            "local",
            "proc",
            "fun",
            "case",
            "class",
            "if",
            "cond",
            "or",
            "dis",
            "choice",
            "not",
            "thread",
            "try",
            "raise",
            "lock",
            "for",
            "suchthat",
            "meth",
            "functor",
        ]);
        var middleKeywords = wordRegexp(middle);
        var endKeywords = wordRegexp(end);

        // Tokenizers
        function tokenBase(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            // Brackets
            if (stream.match(/[{}]/)) {
                return "bracket";
            }

            // Special [] keyword
            if (stream.match("[]")) {
                return "keyword";
            }

            // Operators
            if (
                stream.match(tripleOperators) ||
                stream.match(doubleOperators)
            ) {
                return "operator";
            }

            // Atoms
            if (stream.match(atoms)) {
                return "atom";
            }

            // Opening keywords
            var matched = stream.match(openingKeywords);
            if (matched) {
                if (!state.doInCurrentLine) state.currentIndent++;
                else state.doInCurrentLine = false;

                // Special matching for signatures
                if (matched[0] == "proc" || matched[0] == "fun")
                    state.tokenize = tokenFunProc;
                else if (matched[0] == "class") state.tokenize = tokenClass;
                else if (matched[0] == "meth") state.tokenize = tokenMeth;

                return "keyword";
            }

            // Middle and other keywords
            if (stream.match(middleKeywords) || stream.match(commonKeywords)) {
                return "keyword";
            }

            // End keywords
            if (stream.match(endKeywords)) {
                state.currentIndent--;
                return "keyword";
            }

            // Eat the next char for next comparisons
            var ch = stream.next();

            // Strings
            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }

            // Numbers
            if (/[~\d]/.test(ch)) {
                if (ch == "~") {
                    if (!/^[0-9]/.test(stream.peek())) return null;
                    else if (
                        (stream.next() == "0" &&
                            stream.match(/^[xX][0-9a-fA-F]+/)) ||
                        stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/)
                    )
                        return "number";
                }

                if (
                    (ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) ||
                    stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/)
                )
                    return "number";

                return null;
            }

            // Comments
            if (ch == "%") {
                stream.skipToEnd();
                return "comment";
            } else if (ch == "/") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
            }

            // Single operators
            if (singleOperators.test(ch)) {
                return "operator";
            }

            // If nothing match, we skip the entire alphanumerical block
            stream.eatWhile(/\w/);

            return "variable";
        }

        function tokenClass(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }
            stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
            state.tokenize = tokenBase;
            return "type";
        }

        function tokenMeth(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }
            stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
            state.tokenize = tokenBase;
            return "def";
        }

        function tokenFunProc(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            if (!state.hasPassedFirstStage && stream.eat("{")) {
                state.hasPassedFirstStage = true;
                return "bracket";
            } else if (state.hasPassedFirstStage) {
                stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
                state.hasPassedFirstStage = false;
                state.tokenize = tokenBase;
                return "def";
            } else {
                state.tokenize = tokenBase;
                return null;
            }
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) state.tokenize = tokenBase;
                return "string";
            };
        }

        function buildElectricInputRegEx() {
            // Reindentation should occur on [] or on a match of any of
            // the block closing keywords, at the end of a line.
            var allClosings = middle.concat(end);
            return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
        }

        const oz = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    currentIndent: 0,
                    doInCurrentLine: false,
                    hasPassedFirstStage: false,
                };
            },

            token: function(stream, state) {
                if (stream.sol()) state.doInCurrentLine = 0;

                return state.tokenize(stream, state);
            },

            indent: function(state, textAfter, cx) {
                var trueText = textAfter.replace(/^\s+|\s+$/g, "");

                if (
                    trueText.match(endKeywords) ||
                    trueText.match(middleKeywords) ||
                    trueText.match(/(\[])/)
                )
                    return cx.unit * (state.currentIndent - 1);

                if (state.currentIndent < 0) return 0;

                return state.currentIndent * cx.unit;
            },

            languageData: {
                indentOnInut: buildElectricInputRegEx(),
                commentTokens: {
                    line: "%",
                    block: { open: "/*", close: "*/" },
                },
            },
        };

        exports.oz = oz;
    }
    _M52();
    function _M53() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        var keywords = words(
            "absolute and array asm begin case const constructor destructor div do " +
            "downto else end file for function goto if implementation in inherited " +
            "inline interface label mod nil not object of operator or packed procedure " +
            "program record reintroduce repeat self set shl shr string then to type " +
            "unit until uses var while with xor as class dispinterface except exports " +
            "finalization finally initialization inline is library on out packed " +
            "property raise resourcestring threadvar try absolute abstract alias " +
            "assembler bitpacked break cdecl continue cppdecl cvar default deprecated " +
            "dynamic enumerator experimental export external far far16 forward generic " +
            "helper implements index interrupt iocheck local message name near " +
            "nodefault noreturn nostackframe oldfpccall otherwise overload override " +
            "pascal platform private protected public published read register " +
            "reintroduce result safecall saveregisters softfloat specialize static " +
            "stdcall stored strict unaligned unimplemented varargs virtual write"
        );
        var atoms = { null: true };

        var isOperatorChar = /[+\-*&%=<>!?|\/]/;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == "#" && state.startOfLine) {
                stream.skipToEnd();
                return "meta";
            }
            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (ch == "(" && stream.eat("*")) {
                state.tokenize = tokenComment;
                return tokenComment(stream, state);
            }
            if (ch == "{") {
                state.tokenize = tokenCommentBraces;
                return tokenCommentBraces(stream, state);
            }
            if (/[\[\]\(\),;\:\.]/.test(ch)) {
                return null;
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (ch == "/") {
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_]/);
            var cur = stream.current();
            if (keywords.propertyIsEnumerable(cur)) return "keyword";
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) state.tokenize = null;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == ")" && maybeEnd) {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenCommentBraces(stream, state) {
            var ch;
            while ((ch = stream.next())) {
                if (ch == "}") {
                    state.tokenize = null;
                    break;
                }
            }
            return "comment";
        }

        // Interface

        const pascal = {
            startState: function() {
                return { tokenize: null };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment" || style == "meta") return style;
                return style;
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: { block: { open: "(*", close: "*)" } },
            },
        };

        exports.pascal = pascal;
    }
    _M53();
    function _M54() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        // builtin funcs taken from trunk revision 1303237
        var pBuiltins =
            "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL " +
            "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS " +
            "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG " +
            "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN " +
            "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER " +
            "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS " +
            "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  " +
            "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE " +
            "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG " +
            "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";

        // taken from QueryLexer.g
        var pKeywords =
            "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP " +
            "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL " +
            "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE " +
            "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE " +
            "NEQ MATCHES TRUE FALSE DUMP";

        // data types
        var pTypes =
            "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";

        var builtins = words(pBuiltins),
            keywords = words(pKeywords),
            types = words(pTypes);

        var isOperatorChar = /[*+\-%<>=&?:\/!|]/;

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }

        function tokenComment(stream, state) {
            var isEnd = false;
            var ch;
            while ((ch = stream.next())) {
                if (ch == "/" && isEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                isEnd = ch == "*";
            }
            return "comment";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !escaped) state.tokenize = tokenBase;
                return "error";
            };
        }

        function tokenBase(stream, state) {
            var ch = stream.next();

            // is a start of string?
            if (ch == '"' || ch == "'")
                return chain(stream, state, tokenString(ch));
            // is it one of the special chars
            else if (/[\[\]{}\(\),;\.]/.test(ch)) return null;
            // is it a number?
            else if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            // multi line comment or operator
            else if (ch == "/") {
                if (stream.eat("*")) {
                    return chain(stream, state, tokenComment);
                } else {
                    stream.eatWhile(isOperatorChar);
                    return "operator";
                }
            }
            // single line comment or operator
            else if (ch == "-") {
                if (stream.eat("-")) {
                    stream.skipToEnd();
                    return "comment";
                } else {
                    stream.eatWhile(isOperatorChar);
                    return "operator";
                }
            }
            // is it an operator
            else if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            } else {
                // get the while word
                stream.eatWhile(/[\w\$_]/);
                // is it one of the listed keywords?
                if (
                    keywords &&
                    keywords.propertyIsEnumerable(
                        stream.current().toUpperCase()
                    )
                ) {
                    //keywords can be used as variables like flatten(group), group.$0 etc..
                    if (!stream.eat(")") && !stream.eat(".")) return "keyword";
                }
                // is it one of the builtin functions?
                if (
                    builtins &&
                    builtins.propertyIsEnumerable(
                        stream.current().toUpperCase()
                    )
                )
                    return "builtin";
                // is it one of the listed types?
                if (
                    types &&
                    types.propertyIsEnumerable(stream.current().toUpperCase())
                )
                    return "type";
                // default is a 'variable'
                return "variable";
            }
        }

        // Interface
        const pig = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                return style;
            },

            languageData: {
                autocomplete: (pBuiltins + pTypes + pKeywords).split(" "),
            },
        };

        exports.pig = pig;
    }
    _M54();
    function _M55() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // it's like "peek", but need for look-ahead or look-behind if index < 0
        function look(stream, c) {
            return stream.string.charAt(stream.pos + (c || 0));
        }

        // return a part of prefix of current stream from current position
        function prefix(stream, c) {
            if (c) {
                var x = stream.pos - c;
                return stream.string.substr(x >= 0 ? x : 0, c);
            } else {
                return stream.string.substr(0, stream.pos - 1);
            }
        }

        // return a part of suffix of current stream from current position
        function suffix(stream, c) {
            var y = stream.string.length;
            var x = y - stream.pos + 1;
            return stream.string.substr(stream.pos, c && c < y ? c : x);
        }

        // eating and vomiting a part of stream from current position
        function eatSuffix(stream, c) {
            var x = stream.pos + c;
            var y;
            if (x <= 0) stream.pos = 0;
            else if (x >= (y = stream.string.length - 1)) stream.pos = y;
            else stream.pos = x;
        }

        // http://perldoc.perl.org
        var PERL = {
            //   null - magic touch
            //   1 - keyword
            //   2 - def
            //   3 - atom
            //   4 - operator
            //   5 - builtin (predefined)
            //   [x,y] - x=1,2,3; y=must be defined if x{...}
            //      PERL operators
            "->": 4,
            "++": 4,
            "--": 4,
            "**": 4,
            //   ! ~ \ and unary + and -
            "=~": 4,
            "!~": 4,
            "*": 4,
            "/": 4,
            "%": 4,
            x: 4,
            "+": 4,
            "-": 4,
            ".": 4,
            "<<": 4,
            ">>": 4,
            //   named unary operators
            "<": 4,
            ">": 4,
            "<=": 4,
            ">=": 4,
            lt: 4,
            gt: 4,
            le: 4,
            ge: 4,
            "==": 4,
            "!=": 4,
            "<=>": 4,
            eq: 4,
            ne: 4,
            cmp: 4,
            "~~": 4,
            "&": 4,
            "|": 4,
            "^": 4,
            "&&": 4,
            "||": 4,
            "//": 4,
            "..": 4,
            "...": 4,
            "?": 4,
            ":": 4,
            "=": 4,
            "+=": 4,
            "-=": 4,
            "*=": 4, //   etc. ???
            ",": 4,
            "=>": 4,
            "::": 4,
            //   list operators (rightward)
            not: 4,
            and: 4,
            or: 4,
            xor: 4,
            //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
            BEGIN: [5, 1],
            END: [5, 1],
            PRINT: [5, 1],
            PRINTF: [5, 1],
            GETC: [5, 1],
            READ: [5, 1],
            READLINE: [5, 1],
            DESTROY: [5, 1],
            TIE: [5, 1],
            TIEHANDLE: [5, 1],
            UNTIE: [5, 1],
            STDIN: 5,
            STDIN_TOP: 5,
            STDOUT: 5,
            STDOUT_TOP: 5,
            STDERR: 5,
            STDERR_TOP: 5,
            $ARG: 5,
            $_: 5,
            "@ARG": 5,
            "@_": 5,
            $LIST_SEPARATOR: 5,
            '$"': 5,
            $PROCESS_ID: 5,
            $PID: 5,
            $$: 5,
            $REAL_GROUP_ID: 5,
            $GID: 5,
            "$(": 5,
            $EFFECTIVE_GROUP_ID: 5,
            $EGID: 5,
            "$)": 5,
            $PROGRAM_NAME: 5,
            $0: 5,
            $SUBSCRIPT_SEPARATOR: 5,
            $SUBSEP: 5,
            "$;": 5,
            $REAL_USER_ID: 5,
            $UID: 5,
            "$<": 5,
            $EFFECTIVE_USER_ID: 5,
            $EUID: 5,
            "$>": 5,
            $a: 5,
            $b: 5,
            $COMPILING: 5,
            "$^C": 5,
            $DEBUGGING: 5,
            "$^D": 5,
            "${^ENCODING}": 5,
            $ENV: 5,
            "%ENV": 5,
            $SYSTEM_FD_MAX: 5,
            "$^F": 5,
            "@F": 5,
            "${^GLOBAL_PHASE}": 5,
            "$^H": 5,
            "%^H": 5,
            "@INC": 5,
            "%INC": 5,
            $INPLACE_EDIT: 5,
            "$^I": 5,
            "$^M": 5,
            $OSNAME: 5,
            "$^O": 5,
            "${^OPEN}": 5,
            $PERLDB: 5,
            "$^P": 5,
            $SIG: 5,
            "%SIG": 5,
            $BASETIME: 5,
            "$^T": 5,
            "${^TAINT}": 5,
            "${^UNICODE}": 5,
            "${^UTF8CACHE}": 5,
            "${^UTF8LOCALE}": 5,
            $PERL_VERSION: 5,
            "$^V": 5,
            "${^WIN32_SLOPPY_STAT}": 5,
            $EXECUTABLE_NAME: 5,
            "$^X": 5,
            $1: 5, // - regexp $1, $2...
            $MATCH: 5,
            "$&": 5,
            "${^MATCH}": 5,
            $PREMATCH: 5,
            "$`": 5,
            "${^PREMATCH}": 5,
            $POSTMATCH: 5,
            "$'": 5,
            "${^POSTMATCH}": 5,
            $LAST_PAREN_MATCH: 5,
            "$+": 5,
            $LAST_SUBMATCH_RESULT: 5,
            "$^N": 5,
            "@LAST_MATCH_END": 5,
            "@+": 5,
            "%LAST_PAREN_MATCH": 5,
            "%+": 5,
            "@LAST_MATCH_START": 5,
            "@-": 5,
            "%LAST_MATCH_START": 5,
            "%-": 5,
            $LAST_REGEXP_CODE_RESULT: 5,
            "$^R": 5,
            "${^RE_DEBUG_FLAGS}": 5,
            "${^RE_TRIE_MAXBUF}": 5,
            $ARGV: 5,
            "@ARGV": 5,
            ARGV: 5,
            ARGVOUT: 5,
            $OUTPUT_FIELD_SEPARATOR: 5,
            $OFS: 5,
            "$,": 5,
            $INPUT_LINE_NUMBER: 5,
            $NR: 5,
            "$.": 5,
            $INPUT_RECORD_SEPARATOR: 5,
            $RS: 5,
            "$/": 5,
            $OUTPUT_RECORD_SEPARATOR: 5,
            $ORS: 5,
            "$\\": 5,
            $OUTPUT_AUTOFLUSH: 5,
            "$|": 5,
            $ACCUMULATOR: 5,
            "$^A": 5,
            $FORMAT_FORMFEED: 5,
            "$^L": 5,
            $FORMAT_PAGE_NUMBER: 5,
            "$%": 5,
            $FORMAT_LINES_LEFT: 5,
            "$-": 5,
            $FORMAT_LINE_BREAK_CHARACTERS: 5,
            "$:": 5,
            $FORMAT_LINES_PER_PAGE: 5,
            "$=": 5,
            $FORMAT_TOP_NAME: 5,
            "$^": 5,
            $FORMAT_NAME: 5,
            "$~": 5,
            "${^CHILD_ERROR_NATIVE}": 5,
            $EXTENDED_OS_ERROR: 5,
            "$^E": 5,
            $EXCEPTIONS_BEING_CAUGHT: 5,
            "$^S": 5,
            $WARNING: 5,
            "$^W": 5,
            "${^WARNING_BITS}": 5,
            $OS_ERROR: 5,
            $ERRNO: 5,
            "$!": 5,
            "%OS_ERROR": 5,
            "%ERRNO": 5,
            "%!": 5,
            $CHILD_ERROR: 5,
            "$?": 5,
            $EVAL_ERROR: 5,
            "$@": 5,
            $OFMT: 5,
            "$#": 5,
            "$*": 5,
            $ARRAY_BASE: 5,
            "$[": 5,
            $OLD_PERL_VERSION: 5,
            "$]": 5,
            //      PERL blocks
            if: [1, 1],
            elsif: [1, 1],
            else: [1, 1],
            while: [1, 1],
            unless: [1, 1],
            for: [1, 1],
            foreach: [1, 1],
            //      PERL functions
            abs: 1, // - absolute value function
            accept: 1, // - accept an incoming socket connect
            alarm: 1, // - schedule a SIGALRM
            atan2: 1, // - arctangent of Y/X in the range -PI to PI
            bind: 1, // - binds an address to a socket
            binmode: 1, // - prepare binary files for I/O
            bless: 1, // - create an object
            bootstrap: 1, //
            break: 1, // - break out of a "given" block
            caller: 1, // - get context of the current subroutine call
            chdir: 1, // - change your current working directory
            chmod: 1, // - changes the permissions on a list of files
            chomp: 1, // - remove a trailing record separator from a string
            chop: 1, // - remove the last character from a string
            chown: 1, // - change the ownership on a list of files
            chr: 1, // - get character this number represents
            chroot: 1, // - make directory new root for path lookups
            close: 1, // - close file (or pipe or socket) handle
            closedir: 1, // - close directory handle
            connect: 1, // - connect to a remote socket
            continue: [1, 1], // - optional trailing block in a while or foreach
            cos: 1, // - cosine function
            crypt: 1, // - one-way passwd-style encryption
            dbmclose: 1, // - breaks binding on a tied dbm file
            dbmopen: 1, // - create binding on a tied dbm file
            default: 1, //
            defined: 1, // - test whether a value, variable, or function is defined
            delete: 1, // - deletes a value from a hash
            die: 1, // - raise an exception or bail out
            do: 1, // - turn a BLOCK into a TERM
            dump: 1, // - create an immediate core dump
            each: 1, // - retrieve the next key/value pair from a hash
            endgrent: 1, // - be done using group file
            endhostent: 1, // - be done using hosts file
            endnetent: 1, // - be done using networks file
            endprotoent: 1, // - be done using protocols file
            endpwent: 1, // - be done using passwd file
            endservent: 1, // - be done using services file
            eof: 1, // - test a filehandle for its end
            eval: 1, // - catch exceptions or compile and run code
            exec: 1, // - abandon this program to run another
            exists: 1, // - test whether a hash key is present
            exit: 1, // - terminate this program
            exp: 1, // - raise I to a power
            fcntl: 1, // - file control system call
            fileno: 1, // - return file descriptor from filehandle
            flock: 1, // - lock an entire file with an advisory lock
            fork: 1, // - create a new process just like this one
            format: 1, // - declare a picture format with use by the write() function
            formline: 1, // - internal function used for formats
            getc: 1, // - get the next character from the filehandle
            getgrent: 1, // - get next group record
            getgrgid: 1, // - get group record given group user ID
            getgrnam: 1, // - get group record given group name
            gethostbyaddr: 1, // - get host record given its address
            gethostbyname: 1, // - get host record given name
            gethostent: 1, // - get next hosts record
            getlogin: 1, // - return who logged in at this tty
            getnetbyaddr: 1, // - get network record given its address
            getnetbyname: 1, // - get networks record given name
            getnetent: 1, // - get next networks record
            getpeername: 1, // - find the other end of a socket connection
            getpgrp: 1, // - get process group
            getppid: 1, // - get parent process ID
            getpriority: 1, // - get current nice value
            getprotobyname: 1, // - get protocol record given name
            getprotobynumber: 1, // - get protocol record numeric protocol
            getprotoent: 1, // - get next protocols record
            getpwent: 1, // - get next passwd record
            getpwnam: 1, // - get passwd record given user login name
            getpwuid: 1, // - get passwd record given user ID
            getservbyname: 1, // - get services record given its name
            getservbyport: 1, // - get services record given numeric port
            getservent: 1, // - get next services record
            getsockname: 1, // - retrieve the sockaddr for a given socket
            getsockopt: 1, // - get socket options on a given socket
            given: 1, //
            glob: 1, // - expand filenames using wildcards
            gmtime: 1, // - convert UNIX time into record or string using Greenwich time
            goto: 1, // - create spaghetti code
            grep: 1, // - locate elements in a list test true against a given criterion
            hex: 1, // - convert a string to a hexadecimal number
            import: 1, // - patch a module's namespace into your own
            index: 1, // - find a substring within a string
            int: 1, // - get the integer portion of a number
            ioctl: 1, // - system-dependent device control system call
            join: 1, // - join a list into a string using a separator
            keys: 1, // - retrieve list of indices from a hash
            kill: 1, // - send a signal to a process or process group
            last: 1, // - exit a block prematurely
            lc: 1, // - return lower-case version of a string
            lcfirst: 1, // - return a string with just the next letter in lower case
            length: 1, // - return the number of bytes in a string
            link: 1, // - create a hard link in the filesystem
            listen: 1, // - register your socket as a server
            local: 2, // - create a temporary value for a global variable (dynamic scoping)
            localtime: 1, // - convert UNIX time into record or string using local time
            lock: 1, // - get a thread lock on a variable, subroutine, or method
            log: 1, // - retrieve the natural logarithm for a number
            lstat: 1, // - stat a symbolic link
            m: null, // - match a string with a regular expression pattern
            map: 1, // - apply a change to a list to get back a new list with the changes
            mkdir: 1, // - create a directory
            msgctl: 1, // - SysV IPC message control operations
            msgget: 1, // - get SysV IPC message queue
            msgrcv: 1, // - receive a SysV IPC message from a message queue
            msgsnd: 1, // - send a SysV IPC message to a message queue
            my: 2, // - declare and assign a local variable (lexical scoping)
            new: 1, //
            next: 1, // - iterate a block prematurely
            no: 1, // - unimport some module symbols or semantics at compile time
            oct: 1, // - convert a string to an octal number
            open: 1, // - open a file, pipe, or descriptor
            opendir: 1, // - open a directory
            ord: 1, // - find a character's numeric representation
            our: 2, // - declare and assign a package variable (lexical scoping)
            pack: 1, // - convert a list into a binary representation
            package: 1, // - declare a separate global namespace
            pipe: 1, // - open a pair of connected filehandles
            pop: 1, // - remove the last element from an array and return it
            pos: 1, // - find or set the offset for the last/next m//g search
            print: 1, // - output a list to a filehandle
            printf: 1, // - output a formatted list to a filehandle
            prototype: 1, // - get the prototype (if any) of a subroutine
            push: 1, // - append one or more elements to an array
            q: null, // - singly quote a string
            qq: null, // - doubly quote a string
            qr: null, // - Compile pattern
            quotemeta: null, // - quote regular expression magic characters
            qw: null, // - quote a list of words
            qx: null, // - backquote quote a string
            rand: 1, // - retrieve the next pseudorandom number
            read: 1, // - fixed-length buffered input from a filehandle
            readdir: 1, // - get a directory from a directory handle
            readline: 1, // - fetch a record from a file
            readlink: 1, // - determine where a symbolic link is pointing
            readpipe: 1, // - execute a system command and collect standard output
            recv: 1, // - receive a message over a Socket
            redo: 1, // - start this loop iteration over again
            ref: 1, // - find out the type of thing being referenced
            rename: 1, // - change a filename
            require: 1, // - load in external functions from a library at runtime
            reset: 1, // - clear all variables of a given name
            return: 1, // - get out of a function early
            reverse: 1, // - flip a string or a list
            rewinddir: 1, // - reset directory handle
            rindex: 1, // - right-to-left substring search
            rmdir: 1, // - remove a directory
            s: null, // - replace a pattern with a string
            say: 1, // - print with newline
            scalar: 1, // - force a scalar context
            seek: 1, // - reposition file pointer for random-access I/O
            seekdir: 1, // - reposition directory pointer
            select: 1, // - reset default output or do I/O multiplexing
            semctl: 1, // - SysV semaphore control operations
            semget: 1, // - get set of SysV semaphores
            semop: 1, // - SysV semaphore operations
            send: 1, // - send a message over a socket
            setgrent: 1, // - prepare group file for use
            sethostent: 1, // - prepare hosts file for use
            setnetent: 1, // - prepare networks file for use
            setpgrp: 1, // - set the process group of a process
            setpriority: 1, // - set a process's nice value
            setprotoent: 1, // - prepare protocols file for use
            setpwent: 1, // - prepare passwd file for use
            setservent: 1, // - prepare services file for use
            setsockopt: 1, // - set some socket options
            shift: 1, // - remove the first element of an array, and return it
            shmctl: 1, // - SysV shared memory operations
            shmget: 1, // - get SysV shared memory segment identifier
            shmread: 1, // - read SysV shared memory
            shmwrite: 1, // - write SysV shared memory
            shutdown: 1, // - close down just half of a socket connection
            sin: 1, // - return the sine of a number
            sleep: 1, // - block for some number of seconds
            socket: 1, // - create a socket
            socketpair: 1, // - create a pair of sockets
            sort: 1, // - sort a list of values
            splice: 1, // - add or remove elements anywhere in an array
            split: 1, // - split up a string using a regexp delimiter
            sprintf: 1, // - formatted print into a string
            sqrt: 1, // - square root function
            srand: 1, // - seed the random number generator
            stat: 1, // - get a file's status information
            state: 1, // - declare and assign a state variable (persistent lexical scoping)
            study: 1, // - optimize input data for repeated searches
            sub: 1, // - declare a subroutine, possibly anonymously
            substr: 1, // - get or alter a portion of a string
            symlink: 1, // - create a symbolic link to a file
            syscall: 1, // - execute an arbitrary system call
            sysopen: 1, // - open a file, pipe, or descriptor
            sysread: 1, // - fixed-length unbuffered input from a filehandle
            sysseek: 1, // - position I/O pointer on handle used with sysread and syswrite
            system: 1, // - run a separate program
            syswrite: 1, // - fixed-length unbuffered output to a filehandle
            tell: 1, // - get current seekpointer on a filehandle
            telldir: 1, // - get current seekpointer on a directory handle
            tie: 1, // - bind a variable to an object class
            tied: 1, // - get a reference to the object underlying a tied variable
            time: 1, // - return number of seconds since 1970
            times: 1, // - return elapsed time for self and child processes
            tr: null, // - transliterate a string
            truncate: 1, // - shorten a file
            uc: 1, // - return upper-case version of a string
            ucfirst: 1, // - return a string with just the next letter in upper case
            umask: 1, // - set file creation mode mask
            undef: 1, // - remove a variable or function definition
            unlink: 1, // - remove one link to a file
            unpack: 1, // - convert binary structure into normal perl variables
            unshift: 1, // - prepend more elements to the beginning of a list
            untie: 1, // - break a tie binding to a variable
            use: 1, // - load in a module at compile time
            utime: 1, // - set a file's last access and modify times
            values: 1, // - return a list of the values in a hash
            vec: 1, // - test or set particular bits in a string
            wait: 1, // - wait for any child process to die
            waitpid: 1, // - wait for a particular child process to die
            wantarray: 1, // - get void vs scalar vs list context of current subroutine call
            warn: 1, // - print debugging info
            when: 1, //
            write: 1, // - print a picture record
            y: null,
        }; // - transliterate a string

        var RXstyle = "string.special";
        var RXmodifiers = /[goseximacplud]/; // NOTE: "m", "s", "y" and "tr" need to correct real modifiers for each regexp type

        function tokenChain(stream, state, chain, style, tail) {
            // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)
            state.chain = null; //                                                          12   3tail
            state.style = null;
            state.tail = null;
            state.tokenize = function(stream, state) {
                var e = false,
                    c,
                    i = 0;
                while ((c = stream.next())) {
                    if (c === chain[i] && !e) {
                        if (chain[++i] !== undefined) {
                            state.chain = chain[i];
                            state.style = style;
                            state.tail = tail;
                        } else if (tail) stream.eatWhile(tail);
                        state.tokenize = tokenPerl;
                        return style;
                    }
                    e = !e && c == "\\";
                }
                return style;
            };
            return state.tokenize(stream, state);
        }

        function tokenSOMETHING(stream, state, string) {
            state.tokenize = function(stream, state) {
                if (stream.string == string) state.tokenize = tokenPerl;
                stream.skipToEnd();
                return "string";
            };
            return state.tokenize(stream, state);
        }

        function tokenPerl(stream, state) {
            if (stream.eatSpace()) return null;
            if (state.chain)
                return tokenChain(
                    stream,
                    state,
                    state.chain,
                    state.style,
                    state.tail
                );
            if (
                stream.match(
                    /^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/
                )
            )
                return "number";
            if (stream.match(/^<<(?=[_a-zA-Z])/)) {
                // NOTE: <<SOMETHING\n...\nSOMETHING\n
                stream.eatWhile(/\w/);
                return tokenSOMETHING(
                    stream,
                    state,
                    stream.current().substr(2)
                );
            }
            if (stream.sol() && stream.match(/^\=item(?!\w)/)) {
                // NOTE: \n=item...\n=cut\n
                return tokenSOMETHING(stream, state, "=cut");
            }
            var ch = stream.next();
            if (ch == '"' || ch == "'") {
                // NOTE: ' or " or <<'SOMETHING'\n...\nSOMETHING\n or <<"SOMETHING"\n...\nSOMETHING\n
                if (prefix(stream, 3) == "<<" + ch) {
                    var p = stream.pos;
                    stream.eatWhile(/\w/);
                    var n = stream.current().substr(1);
                    if (n && stream.eat(ch))
                        return tokenSOMETHING(stream, state, n);
                    stream.pos = p;
                }
                return tokenChain(stream, state, [ch], "string");
            }
            if (ch == "q") {
                var c = look(stream, -2);
                if (!(c && /\w/.test(c))) {
                    c = look(stream, 0);
                    if (c == "x") {
                        c = look(stream, 1);
                        if (c == "(") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                [")"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "[") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                ["]"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "{") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                ["}"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "<") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                [">"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (/[\^'"!~\/]/.test(c)) {
                            eatSuffix(stream, 1);
                            return tokenChain(
                                stream,
                                state,
                                [stream.eat(c)],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                    } else if (c == "q") {
                        c = look(stream, 1);
                        if (c == "(") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, [")"], "string");
                        }
                        if (c == "[") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, ["]"], "string");
                        }
                        if (c == "{") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, ["}"], "string");
                        }
                        if (c == "<") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, [">"], "string");
                        }
                        if (/[\^'"!~\/]/.test(c)) {
                            eatSuffix(stream, 1);
                            return tokenChain(
                                stream,
                                state,
                                [stream.eat(c)],
                                "string"
                            );
                        }
                    } else if (c == "w") {
                        c = look(stream, 1);
                        if (c == "(") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, [")"], "bracket");
                        }
                        if (c == "[") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, ["]"], "bracket");
                        }
                        if (c == "{") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, ["}"], "bracket");
                        }
                        if (c == "<") {
                            eatSuffix(stream, 2);
                            return tokenChain(stream, state, [">"], "bracket");
                        }
                        if (/[\^'"!~\/]/.test(c)) {
                            eatSuffix(stream, 1);
                            return tokenChain(
                                stream,
                                state,
                                [stream.eat(c)],
                                "bracket"
                            );
                        }
                    } else if (c == "r") {
                        c = look(stream, 1);
                        if (c == "(") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                [")"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "[") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                ["]"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "{") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                ["}"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "<") {
                            eatSuffix(stream, 2);
                            return tokenChain(
                                stream,
                                state,
                                [">"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (/[\^'"!~\/]/.test(c)) {
                            eatSuffix(stream, 1);
                            return tokenChain(
                                stream,
                                state,
                                [stream.eat(c)],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                    } else if (/[\^'"!~\/(\[{<]/.test(c)) {
                        if (c == "(") {
                            eatSuffix(stream, 1);
                            return tokenChain(stream, state, [")"], "string");
                        }
                        if (c == "[") {
                            eatSuffix(stream, 1);
                            return tokenChain(stream, state, ["]"], "string");
                        }
                        if (c == "{") {
                            eatSuffix(stream, 1);
                            return tokenChain(stream, state, ["}"], "string");
                        }
                        if (c == "<") {
                            eatSuffix(stream, 1);
                            return tokenChain(stream, state, [">"], "string");
                        }
                        if (/[\^'"!~\/]/.test(c)) {
                            return tokenChain(
                                stream,
                                state,
                                [stream.eat(c)],
                                "string"
                            );
                        }
                    }
                }
            }
            if (ch == "m") {
                var c = look(stream, -2);
                if (!(c && /\w/.test(c))) {
                    c = stream.eat(/[(\[{<\^'"!~\/]/);
                    if (c) {
                        if (/[\^'"!~\/]/.test(c)) {
                            return tokenChain(
                                stream,
                                state,
                                [c],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "(") {
                            return tokenChain(
                                stream,
                                state,
                                [")"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "[") {
                            return tokenChain(
                                stream,
                                state,
                                ["]"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "{") {
                            return tokenChain(
                                stream,
                                state,
                                ["}"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                        if (c == "<") {
                            return tokenChain(
                                stream,
                                state,
                                [">"],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                    }
                }
            }
            if (ch == "s") {
                var c = /[\/>\]})\w]/.test(look(stream, -2));
                if (!c) {
                    c = stream.eat(/[(\[{<\^'"!~\/]/);
                    if (c) {
                        if (c == "[")
                            return tokenChain(
                                stream,
                                state,
                                ["]", "]"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "{")
                            return tokenChain(
                                stream,
                                state,
                                ["}", "}"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "<")
                            return tokenChain(
                                stream,
                                state,
                                [">", ">"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "(")
                            return tokenChain(
                                stream,
                                state,
                                [")", ")"],
                                RXstyle,
                                RXmodifiers
                            );
                        return tokenChain(
                            stream,
                            state,
                            [c, c],
                            RXstyle,
                            RXmodifiers
                        );
                    }
                }
            }
            if (ch == "y") {
                var c = /[\/>\]})\w]/.test(look(stream, -2));
                if (!c) {
                    c = stream.eat(/[(\[{<\^'"!~\/]/);
                    if (c) {
                        if (c == "[")
                            return tokenChain(
                                stream,
                                state,
                                ["]", "]"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "{")
                            return tokenChain(
                                stream,
                                state,
                                ["}", "}"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "<")
                            return tokenChain(
                                stream,
                                state,
                                [">", ">"],
                                RXstyle,
                                RXmodifiers
                            );
                        if (c == "(")
                            return tokenChain(
                                stream,
                                state,
                                [")", ")"],
                                RXstyle,
                                RXmodifiers
                            );
                        return tokenChain(
                            stream,
                            state,
                            [c, c],
                            RXstyle,
                            RXmodifiers
                        );
                    }
                }
            }
            if (ch == "t") {
                var c = /[\/>\]})\w]/.test(look(stream, -2));
                if (!c) {
                    c = stream.eat("r");
                    if (c) {
                        c = stream.eat(/[(\[{<\^'"!~\/]/);
                        if (c) {
                            if (c == "[")
                                return tokenChain(
                                    stream,
                                    state,
                                    ["]", "]"],
                                    RXstyle,
                                    RXmodifiers
                                );
                            if (c == "{")
                                return tokenChain(
                                    stream,
                                    state,
                                    ["}", "}"],
                                    RXstyle,
                                    RXmodifiers
                                );
                            if (c == "<")
                                return tokenChain(
                                    stream,
                                    state,
                                    [">", ">"],
                                    RXstyle,
                                    RXmodifiers
                                );
                            if (c == "(")
                                return tokenChain(
                                    stream,
                                    state,
                                    [")", ")"],
                                    RXstyle,
                                    RXmodifiers
                                );
                            return tokenChain(
                                stream,
                                state,
                                [c, c],
                                RXstyle,
                                RXmodifiers
                            );
                        }
                    }
                }
            }
            if (ch == "`") {
                return tokenChain(stream, state, [ch], "builtin");
            }
            if (ch == "/") {
                if (!/~\s*$/.test(prefix(stream))) return "operator";
                else
                    return tokenChain(
                        stream,
                        state,
                        [ch],
                        RXstyle,
                        RXmodifiers
                    );
            }
            if (ch == "$") {
                var p = stream.pos;
                if (
                    stream.eatWhile(/\d/) ||
                    (stream.eat("{") &&
                        stream.eatWhile(/\d/) &&
                        stream.eat("}"))
                )
                    return "builtin";
                else stream.pos = p;
            }
            if (/[$@%]/.test(ch)) {
                var p = stream.pos;
                if (
                    (stream.eat("^") && stream.eat(/[A-Z]/)) ||
                    (!/[@$%&]/.test(look(stream, -2)) &&
                        stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/))
                ) {
                    var c = stream.current();
                    if (PERL[c]) return "builtin";
                }
                stream.pos = p;
            }
            if (/[$@%&]/.test(ch)) {
                if (
                    stream.eatWhile(/[\w$]/) ||
                    (stream.eat("{") &&
                        stream.eatWhile(/[\w$]/) &&
                        stream.eat("}"))
                ) {
                    var c = stream.current();
                    if (PERL[c]) return "builtin";
                    else return "variable";
                }
            }
            if (ch == "#") {
                if (look(stream, -2) != "$") {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)) {
                var p = stream.pos;
                stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
                if (PERL[stream.current()]) return "operator";
                else stream.pos = p;
            }
            if (ch == "_") {
                if (stream.pos == 1) {
                    if (suffix(stream, 6) == "_END__") {
                        return tokenChain(stream, state, ["\0"], "comment");
                    } else if (suffix(stream, 7) == "_DATA__") {
                        return tokenChain(stream, state, ["\0"], "builtin");
                    } else if (suffix(stream, 7) == "_C__") {
                        return tokenChain(stream, state, ["\0"], "string");
                    }
                }
            }
            if (/\w/.test(ch)) {
                var p = stream.pos;
                if (
                    look(stream, -2) == "{" &&
                    (look(stream, 0) == "}" ||
                        (stream.eatWhile(/\w/) && look(stream, 0) == "}"))
                )
                    return "string";
                else stream.pos = p;
            }
            if (/[A-Z]/.test(ch)) {
                var l = look(stream, -2);
                var p = stream.pos;
                stream.eatWhile(/[A-Z_]/);
                if (/[\da-z]/.test(look(stream, 0))) {
                    stream.pos = p;
                } else {
                    var c = PERL[stream.current()];
                    if (!c) return "meta";
                    if (c[1]) c = c[0];
                    if (l != ":") {
                        if (c == 1) return "keyword";
                        else if (c == 2) return "def";
                        else if (c == 3) return "atom";
                        else if (c == 4) return "operator";
                        else if (c == 5) return "builtin";
                        else return "meta";
                    } else return "meta";
                }
            }
            if (/[a-zA-Z_]/.test(ch)) {
                var l = look(stream, -2);
                stream.eatWhile(/\w/);
                var c = PERL[stream.current()];
                if (!c) return "meta";
                if (c[1]) c = c[0];
                if (l != ":") {
                    if (c == 1) return "keyword";
                    else if (c == 2) return "def";
                    else if (c == 3) return "atom";
                    else if (c == 4) return "operator";
                    else if (c == 5) return "builtin";
                    else return "meta";
                } else return "meta";
            }
            return null;
        }

        const perl = {
            startState: function() {
                return {
                    tokenize: tokenPerl,
                    chain: null,
                    style: null,
                    tail: null,
                };
            },
            token: function(stream, state) {
                return (state.tokenize || tokenPerl)(stream, state);
            },
            languageData: {
                commentTokens: { line: "#" },
                wordChars: "$",
            },
        };

        exports.perl = perl;
    }
    _M55();
    function _M56() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function buildRegexp(patterns, options) {
            options = options || {};
            var prefix = options.prefix !== undefined ? options.prefix : "^";
            var suffix = options.suffix !== undefined ? options.suffix : "\\b";

            for (var i = 0; i < patterns.length; i++) {
                if (patterns[i] instanceof RegExp) {
                    patterns[i] = patterns[i].source;
                } else {
                    patterns[i] = patterns[i].replace(
                        /[-\/\\^$*+?.()|[\]{}]/g,
                        "\\$&"
                    );
                }
            }

            return new RegExp(
                prefix + "(" + patterns.join("|") + ")" + suffix,
                "i"
            );
        }

        var notCharacterOrDash = "(?=[^A-Za-z\\d\\-_]|$)";
        var varNames = /[\w\-:]/;
        var keywords = buildRegexp(
            [
                /begin|break|catch|continue|data|default|do|dynamicparam/,
                /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
                /param|process|return|switch|throw|trap|try|until|where|while/,
            ],
            { suffix: notCharacterOrDash }
        );

        var punctuation = /[\[\]{},;`\\\.]|@[({]/;
        var wordOperators = buildRegexp(
            [
                "f",
                /b?not/,
                /[ic]?split/,
                "join",
                /is(not)?/,
                "as",
                /[ic]?(eq|ne|[gl][te])/,
                /[ic]?(not)?(like|match|contains)/,
                /[ic]?replace/,
                /b?(and|or|xor)/,
            ],
            { prefix: "-" }
        );
        var symbolOperators =
            /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
        var operators = buildRegexp([wordOperators, symbolOperators], {
            suffix: "",
        });

        var numbers =
            /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;

        var identifiers = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;

        var symbolBuiltins = /[A-Z]:|%|\?/i;
        var namedBuiltins = buildRegexp(
            [
                /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
                /Checkpoint-Computer/,
                /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
                /Compare-Object/,
                /Complete-Transaction/,
                /Connect-PSSession/,
                /ConvertFrom-(Csv|Json|SecureString|StringData)/,
                /Convert-Path/,
                /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
                /Copy-Item(Property)?/,
                /Debug-Process/,
                /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
                /Disconnect-PSSession/,
                /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
                /(Enter|Exit)-PSSession/,
                /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
                /ForEach-Object/,
                /Format-(Custom|List|Table|Wide)/,
                new RegExp(
                    "Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential" +
                    "|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job" +
                    "|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration" +
                    "|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"
                ),
                /Group-Object/,
                /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
                /ImportSystemModules/,
                /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
                /Join-Path/,
                /Limit-EventLog/,
                /Measure-(Command|Object)/,
                /Move-Item(Property)?/,
                new RegExp(
                    "New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile" +
                    "|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"
                ),
                /Out-(Default|File|GridView|Host|Null|Printer|String)/,
                /Pause/,
                /(Pop|Push)-Location/,
                /Read-Host/,
                /Receive-(Job|PSSession)/,
                /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
                /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
                /Rename-(Computer|Item(Property)?)/,
                /Reset-ComputerMachinePassword/,
                /Resolve-Path/,
                /Restart-(Computer|Service)/,
                /Restore-Computer/,
                /Resume-(Job|Service)/,
                /Save-Help/,
                /Select-(Object|String|Xml)/,
                /Send-MailMessage/,
                new RegExp(
                    "Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug" +
                    "|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"
                ),
                /Show-(Command|ControlPanelItem|EventLog)/,
                /Sort-Object/,
                /Split-Path/,
                /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
                /Stop-(Computer|Job|Process|Service|Transcript)/,
                /Suspend-(Job|Service)/,
                /TabExpansion2/,
                /Tee-Object/,
                /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
                /Trace-Command/,
                /Unblock-File/,
                /Undo-Transaction/,
                /Unregister-(Event|PSSessionConfiguration)/,
                /Update-(FormatData|Help|List|TypeData)/,
                /Use-Transaction/,
                /Wait-(Event|Job|Process)/,
                /Where-Object/,
                /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
                /cd|help|mkdir|more|oss|prompt/,
                /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
                /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
                /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
                /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
                /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
                /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/,
            ],
            { prefix: "", suffix: "" }
        );
        var variableBuiltins = buildRegexp(
            [
                /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
                /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
                /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
                /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
                /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
                /WarningPreference|WhatIfPreference/,

                /Event|EventArgs|EventSubscriber|Sender/,
                /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
                /true|false|null/,
            ],
            { prefix: "\\$", suffix: "" }
        );

        var builtins = buildRegexp(
            [symbolBuiltins, namedBuiltins, variableBuiltins],
            { suffix: notCharacterOrDash }
        );

        var grammar = {
            keyword: keywords,
            number: numbers,
            operator: operators,
            builtin: builtins,
            punctuation: punctuation,
            variable: identifiers,
        };

        // tokenizers
        function tokenBase(stream, state) {
            // Handle Comments
            //var ch = stream.peek();

            var parent = state.returnStack[state.returnStack.length - 1];
            if (parent && parent.shouldReturnFrom(state)) {
                state.tokenize = parent.tokenize;
                state.returnStack.pop();
                return state.tokenize(stream, state);
            }

            if (stream.eatSpace()) {
                return null;
            }

            if (stream.eat("(")) {
                state.bracketNesting += 1;
                return "punctuation";
            }

            if (stream.eat(")")) {
                state.bracketNesting -= 1;
                return "punctuation";
            }

            for (var key in grammar) {
                if (stream.match(grammar[key])) {
                    return key;
                }
            }

            var ch = stream.next();

            // single-quote string
            if (ch === "'") {
                return tokenSingleQuoteString(stream, state);
            }

            if (ch === "$") {
                return tokenVariable(stream, state);
            }

            // double-quote string
            if (ch === '"') {
                return tokenDoubleQuoteString(stream, state);
            }

            if (ch === "<" && stream.eat("#")) {
                state.tokenize = tokenComment;
                return tokenComment(stream, state);
            }

            if (ch === "#") {
                stream.skipToEnd();
                return "comment";
            }

            if (ch === "@") {
                var quoteMatch = stream.eat(/["']/);
                if (quoteMatch && stream.eol()) {
                    state.tokenize = tokenMultiString;
                    state.startQuote = quoteMatch[0];
                    return tokenMultiString(stream, state);
                } else if (stream.eol()) {
                    return "error";
                } else if (stream.peek().match(/[({]/)) {
                    return "punctuation";
                } else if (stream.peek().match(varNames)) {
                    // splatted variable
                    return tokenVariable(stream, state);
                }
            }
            return "error";
        }

        function tokenSingleQuoteString(stream, state) {
            var ch;
            while ((ch = stream.peek()) != null) {
                stream.next();

                if (ch === "'" && !stream.eat("'")) {
                    state.tokenize = tokenBase;
                    return "string";
                }
            }

            return "error";
        }

        function tokenDoubleQuoteString(stream, state) {
            var ch;
            while ((ch = stream.peek()) != null) {
                if (ch === "$") {
                    state.tokenize = tokenStringInterpolation;
                    return "string";
                }

                stream.next();
                if (ch === "`") {
                    stream.next();
                    continue;
                }

                if (ch === '"' && !stream.eat('"')) {
                    state.tokenize = tokenBase;
                    return "string";
                }
            }

            return "error";
        }

        function tokenStringInterpolation(stream, state) {
            return tokenInterpolation(stream, state, tokenDoubleQuoteString);
        }

        function tokenMultiStringReturn(stream, state) {
            state.tokenize = tokenMultiString;
            state.startQuote = '"';
            return tokenMultiString(stream, state);
        }

        function tokenHereStringInterpolation(stream, state) {
            return tokenInterpolation(stream, state, tokenMultiStringReturn);
        }

        function tokenInterpolation(stream, state, parentTokenize) {
            if (stream.match("$(")) {
                var savedBracketNesting = state.bracketNesting;
                state.returnStack.push({
                    /*jshint loopfunc:true */
                    shouldReturnFrom: function(state) {
                        return state.bracketNesting === savedBracketNesting;
                    },
                    tokenize: parentTokenize,
                });
                state.tokenize = tokenBase;
                state.bracketNesting += 1;
                return "punctuation";
            } else {
                stream.next();
                state.returnStack.push({
                    shouldReturnFrom: function() {
                        return true;
                    },
                    tokenize: parentTokenize,
                });
                state.tokenize = tokenVariable;
                return state.tokenize(stream, state);
            }
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == ">") {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch === "#";
            }
            return "comment";
        }

        function tokenVariable(stream, state) {
            var ch = stream.peek();
            if (stream.eat("{")) {
                state.tokenize = tokenVariableWithBraces;
                return tokenVariableWithBraces(stream, state);
            } else if (ch != undefined && ch.match(varNames)) {
                stream.eatWhile(varNames);
                state.tokenize = tokenBase;
                return "variable";
            } else {
                state.tokenize = tokenBase;
                return "error";
            }
        }

        function tokenVariableWithBraces(stream, state) {
            var ch;
            while ((ch = stream.next()) != null) {
                if (ch === "}") {
                    state.tokenize = tokenBase;
                    break;
                }
            }
            return "variable";
        }

        function tokenMultiString(stream, state) {
            var quote = state.startQuote;
            if (stream.sol() && stream.match(new RegExp(quote + "@"))) {
                state.tokenize = tokenBase;
            } else if (quote === '"') {
                while (!stream.eol()) {
                    var ch = stream.peek();
                    if (ch === "$") {
                        state.tokenize = tokenHereStringInterpolation;
                        return "string";
                    }

                    stream.next();
                    if (ch === "`") {
                        stream.next();
                    }
                }
            } else {
                stream.skipToEnd();
            }

            return "string";
        }

        const powerShell = {
            startState: function() {
                return {
                    returnStack: [],
                    bracketNesting: 0,
                    tokenize: tokenBase,
                };
            },

            token: function(stream, state) {
                return state.tokenize(stream, state);
            },

            languageData: {
                commentTokens: {
                    line: "#",
                    block: { open: "<#", close: "#>" },
                },
            },
        };

        exports.powerShell = powerShell;
    }
    _M56();
    function _M57() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        const properties = {
            token: function(stream, state) {
                var sol = stream.sol() || state.afterSection;
                var eol = stream.eol();

                state.afterSection = false;

                if (sol) {
                    if (state.nextMultiline) {
                        state.inMultiline = true;
                        state.nextMultiline = false;
                    } else {
                        state.position = "def";
                    }
                }

                if (eol && !state.nextMultiline) {
                    state.inMultiline = false;
                    state.position = "def";
                }

                if (sol) {
                    while (stream.eatSpace()) { }
                }

                var ch = stream.next();

                if (sol && (ch === "#" || ch === "!" || ch === ";")) {
                    state.position = "comment";
                    stream.skipToEnd();
                    return "comment";
                } else if (sol && ch === "[") {
                    state.afterSection = true;
                    stream.skipTo("]");
                    stream.eat("]");
                    return "header";
                } else if (ch === "=" || ch === ":") {
                    state.position = "quote";
                    return null;
                } else if (ch === "\\" && state.position === "quote") {
                    if (stream.eol()) {
                        // end of line?
                        // Multiline value
                        state.nextMultiline = true;
                    }
                }

                return state.position;
            },

            startState: function() {
                return {
                    position: "def", // Current position, "def", "quote" or "comment"
                    nextMultiline: false, // Is the next line multiline value
                    inMultiline: false, // Is the current line a multiline value
                    afterSection: false, // Did we just open a section
                };
            },
        };

        exports.properties = properties;
    }
    _M57();
    function _M58() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }
        var keywordArray = [
            "package",
            "message",
            "import",
            "syntax",
            "required",
            "optional",
            "repeated",
            "reserved",
            "default",
            "extensions",
            "packed",
            "bool",
            "bytes",
            "double",
            "enum",
            "float",
            "string",
            "int32",
            "int64",
            "uint32",
            "uint64",
            "sint32",
            "sint64",
            "fixed32",
            "fixed64",
            "sfixed32",
            "sfixed64",
            "option",
            "service",
            "rpc",
            "returns",
        ];
        var keywords = wordRegexp(keywordArray);

        var identifiers = new RegExp(
            "^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*"
        );

        function tokenBase(stream) {
            // whitespaces
            if (stream.eatSpace()) return null;

            // Handle one line Comments
            if (stream.match("//")) {
                stream.skipToEnd();
                return "comment";
            }

            // Handle Number Literals
            if (stream.match(/^[0-9\.+-]/, false)) {
                if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return "number";
                if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
                    return "number";
                if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/)) return "number";
            }

            // Handle Strings
            if (stream.match(/^"([^"]|(""))*"/)) {
                return "string";
            }
            if (stream.match(/^'([^']|(''))*'/)) {
                return "string";
            }

            // Handle words
            if (stream.match(keywords)) {
                return "keyword";
            }
            if (stream.match(identifiers)) {
                return "variable";
            }
            // Handle non-detected items
            stream.next();
            return null;
        }
        const protobuf = {
            token: tokenBase,
            languageData: {
                autocomplete: keywordArray,
            },
        };

        exports.protobuf = protobuf;
    }
    _M58();
    function _M59() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // Stores the words from the define method
        var words = {};
        // Taken, mostly, from the Puppet official variable standards regex
        var variable_regex =
            /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;

        // Takes a string of words separated by spaces and adds them as
        // keys with the value of the first argument 'style'
        function define(style, string) {
            var split = string.split(" ");
            for (var i = 0; i < split.length; i++) {
                words[split[i]] = style;
            }
        }

        // Takes commonly known puppet types/words and classifies them to a style
        define("keyword", "class define site node include import inherits");
        define("keyword", "case if else in and elsif default or");
        define(
            "atom",
            "false true running present absent file directory undef"
        );
        define(
            "builtin",
            "action augeas burst chain computer cron destination dport exec " +
            "file filebucket group host icmp iniface interface jump k5login limit log_level " +
            "log_prefix macauthorization mailalias maillist mcx mount nagios_command " +
            "nagios_contact nagios_contactgroup nagios_host nagios_hostdependency " +
            "nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service " +
            "nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo " +
            "nagios_servicegroup nagios_timeperiod name notify outiface package proto reject " +
            "resources router schedule scheduled_task selboolean selmodule service source " +
            "sport ssh_authorized_key sshkey stage state table tidy todest toports tosource " +
            "user vlan yumrepo zfs zone zpool"
        );

        // After finding a start of a string ('|") this function attempts to find the end;
        // If a variable is encountered along the way, we display it differently when it
        // is encapsulated in a double-quoted string.
        function tokenString(stream, state) {
            var current,
                prev,
                found_var = false;
            while (
                !stream.eol() &&
                (current = stream.next()) != state.pending
            ) {
                if (current === "$" && prev != "\\" && state.pending == '"') {
                    found_var = true;
                    break;
                }
                prev = current;
            }
            if (found_var) {
                stream.backUp(1);
            }
            if (current == state.pending) {
                state.continueString = false;
            } else {
                state.continueString = true;
            }
            return "string";
        }

        // Main function
        function tokenize(stream, state) {
            // Matches one whole word
            var word = stream.match(/[\w]+/, false);
            // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)
            var attribute = stream.match(/(\s+)?\w+\s+=>.*/, false);
            // Matches non-builtin resource declarations
            // (i.e. "apache::vhost {" or "mycustomclasss {" would be matched)
            var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
            // Matches virtual and exported resources (i.e. @@user { ; and the like)
            var special_resource = stream.match(
                /(\s+)?[@]{1,2}[\w:_]+(\s+)?{/,
                false
            );

            // Finally advance the stream
            var ch = stream.next();

            // Have we found a variable?
            if (ch === "$") {
                if (stream.match(variable_regex)) {
                    // If so, and its in a string, assign it a different color
                    return state.continueString
                        ? "variableName.special"
                        : "variable";
                }
                // Otherwise return an invalid variable
                return "error";
            }
            // Should we still be looking for the end of a string?
            if (state.continueString) {
                // If so, go through the loop again
                stream.backUp(1);
                return tokenString(stream, state);
            }
            // Are we in a definition (class, node, define)?
            if (state.inDefinition) {
                // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)
                if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
                    return "def";
                }
                // Match the rest it the next time around
                stream.match(/\s+{/);
                state.inDefinition = false;
            }
            // Are we in an 'include' statement?
            if (state.inInclude) {
                // Match and return the included class
                stream.match(/(\s+)?\S+(\s+)?/);
                state.inInclude = false;
                return "def";
            }
            // Do we just have a function on our hands?
            // In 'ensure_resource("myclass")', 'ensure_resource' is matched
            if (stream.match(/(\s+)?\w+\(/)) {
                stream.backUp(1);
                return "def";
            }
            // Have we matched the prior attribute regex?
            if (attribute) {
                stream.match(/(\s+)?\w+/);
                return "tag";
            }
            // Do we have Puppet specific words?
            if (word && words.hasOwnProperty(word)) {
                // Negates the initial next()
                stream.backUp(1);
                // rs move the stream
                stream.match(/[\w]+/);
                // We want to process these words differently
                // do to the importance they have in Puppet
                if (stream.match(/\s+\S+\s+{/, false)) {
                    state.inDefinition = true;
                }
                if (word == "include") {
                    state.inInclude = true;
                }
                // Returns their value as state in the prior define methods
                return words[word];
            }
            // Is there a match on a reference?
            if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
                // Negate the next()
                stream.backUp(1);
                // Match the full reference
                stream.match(/(^|\s+)[A-Z][\w:_]+/);
                return "def";
            }
            // Have we matched the prior resource regex?
            if (resource) {
                stream.match(/(\s+)?[\w:_]+/);
                return "def";
            }
            // Have we matched the prior special_resource regex?
            if (special_resource) {
                stream.match(/(\s+)?[@]{1,2}/);
                return "atom";
            }
            // Match all the comments. All of them.
            if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            }
            // Have we found a string?
            if (ch == "'" || ch == '"') {
                // Store the type (single or double)
                state.pending = ch;
                // Perform the looping function to find the end
                return tokenString(stream, state);
            }
            // Match all the brackets
            if (ch == "{" || ch == "}") {
                return "bracket";
            }
            // Match characters that we are going to assume
            // are trying to be regex
            if (ch == "/") {
                stream.match(/^[^\/]*\//);
                return "string.special";
            }
            // Match all the numbers
            if (ch.match(/[0-9]/)) {
                stream.eatWhile(/[0-9]+/);
                return "number";
            }
            // Match the '=' and '=>' operators
            if (ch == "=") {
                if (stream.peek() == ">") {
                    stream.next();
                }
                return "operator";
            }
            // Keep advancing through all the rest
            stream.eatWhile(/[\w-]/);
            // Return a blank line for everything else
            return null;
        }
        // Start it all
        const puppet = {
            startState: function() {
                var state = {};
                state.inDefinition = false;
                state.inInclude = false;
                state.continueString = false;
                state.pending = false;
                return state;
            },
            token: function(stream, state) {
                // Strip the spaces, but regex will account for them eitherway
                if (stream.eatSpace()) return null;
                // Go through the main process
                return tokenize(stream, state);
            },
        };

        exports.puppet = puppet;
    }
    _M59();
    function _M60() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }

        var wordOperators = wordRegexp(["and", "or", "not", "is"]);
        var commonKeywords = [
            "as",
            "assert",
            "break",
            "class",
            "continue",
            "def",
            "del",
            "elif",
            "else",
            "except",
            "finally",
            "for",
            "from",
            "global",
            "if",
            "import",
            "lambda",
            "pass",
            "raise",
            "return",
            "try",
            "while",
            "with",
            "yield",
            "in",
        ];
        var commonBuiltins = [
            "abs",
            "all",
            "any",
            "bin",
            "bool",
            "bytearray",
            "callable",
            "chr",
            "classmethod",
            "compile",
            "complex",
            "delattr",
            "dict",
            "dir",
            "divmod",
            "enumerate",
            "eval",
            "filter",
            "float",
            "format",
            "frozenset",
            "getattr",
            "globals",
            "hasattr",
            "hash",
            "help",
            "hex",
            "id",
            "input",
            "int",
            "isinstance",
            "issubclass",
            "iter",
            "len",
            "list",
            "locals",
            "map",
            "max",
            "memoryview",
            "min",
            "next",
            "object",
            "oct",
            "open",
            "ord",
            "pow",
            "property",
            "range",
            "repr",
            "reversed",
            "round",
            "set",
            "setattr",
            "slice",
            "sorted",
            "staticmethod",
            "str",
            "sum",
            "super",
            "tuple",
            "type",
            "vars",
            "zip",
            "__import__",
            "NotImplemented",
            "Ellipsis",
            "__debug__",
        ];

        function top(state) {
            return state.scopes[state.scopes.length - 1];
        }

        function mkPython(parserConf) {
            var ERRORCLASS = "error";

            var delimiters =
                parserConf.delimiters ||
                parserConf.singleDelimiters ||
                /^[\(\)\[\]\{\}@,:`=;\.\\]/;
            //               (Backwards-compatibility with old, cumbersome config system)
            var operators = [
                parserConf.singleOperators,
                parserConf.doubleOperators,
                parserConf.doubleDelimiters,
                parserConf.tripleDelimiters,
                parserConf.operators ||
                /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/,
            ];
            for (var i = 0; i < operators.length; i++)
                if (!operators[i]) operators.splice(i--, 1);

            var hangingIndent = parserConf.hangingIndent;

            var myKeywords = commonKeywords,
                myBuiltins = commonBuiltins;
            if (parserConf.extra_keywords != undefined)
                myKeywords = myKeywords.concat(parserConf.extra_keywords);

            if (parserConf.extra_builtins != undefined)
                myBuiltins = myBuiltins.concat(parserConf.extra_builtins);

            var py3 = !(parserConf.version && Number(parserConf.version) < 3);
            if (py3) {
                // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator
                var identifiers =
                    parserConf.identifiers ||
                    /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
                myKeywords = myKeywords.concat([
                    "nonlocal",
                    "False",
                    "True",
                    "None",
                    "async",
                    "await",
                ]);
                myBuiltins = myBuiltins.concat([
                    "ascii",
                    "bytes",
                    "exec",
                    "print",
                ]);
                var stringPrefixes = new RegExp(
                    "^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\"{3}|['\"]))",
                    "i"
                );
            } else {
                var identifiers =
                    parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;
                myKeywords = myKeywords.concat(["exec", "print"]);
                myBuiltins = myBuiltins.concat([
                    "apply",
                    "basestring",
                    "buffer",
                    "cmp",
                    "coerce",
                    "execfile",
                    "file",
                    "intern",
                    "long",
                    "raw_input",
                    "reduce",
                    "reload",
                    "unichr",
                    "unicode",
                    "xrange",
                    "False",
                    "True",
                    "None",
                ]);
                var stringPrefixes = new RegExp(
                    "^(([rubf]|(ur)|(br))?('{3}|\"{3}|['\"]))",
                    "i"
                );
            }
            var keywords = wordRegexp(myKeywords);
            var builtins = wordRegexp(myBuiltins);

            // tokenizers
            function tokenBase(stream, state) {
                var sol = stream.sol() && state.lastToken != "\\";
                if (sol) state.indent = stream.indentation();
                // Handle scope changes
                if (sol && top(state).type == "py") {
                    var scopeOffset = top(state).offset;
                    if (stream.eatSpace()) {
                        var lineOffset = stream.indentation();
                        if (lineOffset > scopeOffset)
                            pushPyScope(stream, state);
                        else if (
                            lineOffset < scopeOffset &&
                            dedent(stream, state) &&
                            stream.peek() != "#"
                        )
                            state.errorToken = true;
                        return null;
                    } else {
                        var style = tokenBaseInner(stream, state);
                        if (scopeOffset > 0 && dedent(stream, state))
                            style += " " + ERRORCLASS;
                        return style;
                    }
                }
                return tokenBaseInner(stream, state);
            }

            function tokenBaseInner(stream, state, inFormat) {
                if (stream.eatSpace()) return null;

                // Handle Comments
                if (!inFormat && stream.match(/^#.*/)) return "comment";

                // Handle Number Literals
                if (stream.match(/^[0-9\.]/, false)) {
                    var floatLiteral = false;
                    // Floats
                    if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) {
                        floatLiteral = true;
                    }
                    if (stream.match(/^[\d_]+\.\d*/)) {
                        floatLiteral = true;
                    }
                    if (stream.match(/^\.\d+/)) {
                        floatLiteral = true;
                    }
                    if (floatLiteral) {
                        // Float literals may be "imaginary"
                        stream.eat(/J/i);
                        return "number";
                    }
                    // Integers
                    var intLiteral = false;
                    // Hex
                    if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
                    // Binary
                    if (stream.match(/^0b[01_]+/i)) intLiteral = true;
                    // Octal
                    if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
                    // Decimal
                    if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
                        // Decimal literals may be "imaginary"
                        stream.eat(/J/i);
                        // TODO - Can you have imaginary longs?
                        intLiteral = true;
                    }
                    // Zero by itself with no other piece of number.
                    if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
                    if (intLiteral) {
                        // Integer literals may be "long"
                        stream.eat(/L/i);
                        return "number";
                    }
                }

                // Handle Strings
                if (stream.match(stringPrefixes)) {
                    var isFmtString =
                        stream.current().toLowerCase().indexOf("f") !== -1;
                    if (!isFmtString) {
                        state.tokenize = tokenStringFactory(
                            stream.current(),
                            state.tokenize
                        );
                        return state.tokenize(stream, state);
                    } else {
                        state.tokenize = formatStringFactory(
                            stream.current(),
                            state.tokenize
                        );
                        return state.tokenize(stream, state);
                    }
                }

                for (var i = 0; i < operators.length; i++)
                    if (stream.match(operators[i])) return "operator";

                if (stream.match(delimiters)) return "punctuation";

                if (state.lastToken == "." && stream.match(identifiers))
                    return "property";

                if (stream.match(keywords) || stream.match(wordOperators))
                    return "keyword";

                if (stream.match(builtins)) return "builtin";

                if (stream.match(/^(self|cls)\b/)) return "self";

                if (stream.match(identifiers)) {
                    if (state.lastToken == "def" || state.lastToken == "class")
                        return "def";
                    return "variable";
                }

                // Handle non-detected items
                stream.next();
                return inFormat ? null : ERRORCLASS;
            }

            function formatStringFactory(delimiter, tokenOuter) {
                while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
                    delimiter = delimiter.substr(1);

                var singleline = delimiter.length == 1;
                var OUTCLASS = "string";

                function tokenNestedExpr(depth) {
                    return function(stream, state) {
                        var inner = tokenBaseInner(stream, state, true);
                        if (inner == "punctuation") {
                            if (stream.current() == "{") {
                                state.tokenize = tokenNestedExpr(depth + 1);
                            } else if (stream.current() == "}") {
                                if (depth > 1)
                                    state.tokenize = tokenNestedExpr(depth - 1);
                                else state.tokenize = tokenString;
                            }
                        }
                        return inner;
                    };
                }

                function tokenString(stream, state) {
                    while (!stream.eol()) {
                        stream.eatWhile(/[^'"\{\}\\]/);
                        if (stream.eat("\\")) {
                            stream.next();
                            if (singleline && stream.eol()) return OUTCLASS;
                        } else if (stream.match(delimiter)) {
                            state.tokenize = tokenOuter;
                            return OUTCLASS;
                        } else if (stream.match("{{")) {
                            // ignore {{ in f-str
                            return OUTCLASS;
                        } else if (stream.match("{", false)) {
                            // switch to nested mode
                            state.tokenize = tokenNestedExpr(0);
                            if (stream.current()) return OUTCLASS;
                            else return state.tokenize(stream, state);
                        } else if (stream.match("}}")) {
                            return OUTCLASS;
                        } else if (stream.match("}")) {
                            // single } in f-string is an error
                            return ERRORCLASS;
                        } else {
                            stream.eat(/['"]/);
                        }
                    }
                    if (singleline) {
                        if (parserConf.singleLineStringErrors)
                            return ERRORCLASS;
                        else state.tokenize = tokenOuter;
                    }
                    return OUTCLASS;
                }
                tokenString.isString = true;
                return tokenString;
            }

            function tokenStringFactory(delimiter, tokenOuter) {
                while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
                    delimiter = delimiter.substr(1);

                var singleline = delimiter.length == 1;
                var OUTCLASS = "string";

                function tokenString(stream, state) {
                    while (!stream.eol()) {
                        stream.eatWhile(/[^'"\\]/);
                        if (stream.eat("\\")) {
                            stream.next();
                            if (singleline && stream.eol()) return OUTCLASS;
                        } else if (stream.match(delimiter)) {
                            state.tokenize = tokenOuter;
                            return OUTCLASS;
                        } else {
                            stream.eat(/['"]/);
                        }
                    }
                    if (singleline) {
                        if (parserConf.singleLineStringErrors)
                            return ERRORCLASS;
                        else state.tokenize = tokenOuter;
                    }
                    return OUTCLASS;
                }
                tokenString.isString = true;
                return tokenString;
            }

            function pushPyScope(stream, state) {
                while (top(state).type != "py") state.scopes.pop();
                state.scopes.push({
                    offset: top(state).offset + stream.indentUnit,
                    type: "py",
                    align: null,
                });
            }

            function pushBracketScope(stream, state, type) {
                var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false)
                    ? null
                    : stream.column() + 1;
                state.scopes.push({
                    offset: state.indent + (hangingIndent || stream.indentUnit),
                    type: type,
                    align: align,
                });
            }

            function dedent(stream, state) {
                var indented = stream.indentation();
                while (
                    state.scopes.length > 1 &&
                    top(state).offset > indented
                ) {
                    if (top(state).type != "py") return true;
                    state.scopes.pop();
                }
                return top(state).offset != indented;
            }

            function tokenLexer(stream, state) {
                if (stream.sol()) {
                    state.beginningOfLine = true;
                    state.dedent = false;
                }

                var style = state.tokenize(stream, state);
                var current = stream.current();

                // Handle decorators
                if (state.beginningOfLine && current == "@")
                    return stream.match(identifiers, false)
                        ? "meta"
                        : py3
                            ? "operator"
                            : ERRORCLASS;

                if (/\S/.test(current)) state.beginningOfLine = false;

                if (
                    (style == "variable" || style == "builtin") &&
                    state.lastToken == "meta"
                )
                    style = "meta";

                // Handle scope changes.
                if (current == "pass" || current == "return")
                    state.dedent = true;

                if (current == "lambda") state.lambda = true;
                if (
                    current == ":" &&
                    !state.lambda &&
                    top(state).type == "py" &&
                    stream.match(/^\s*(?:#|$)/, false)
                )
                    pushPyScope(stream, state);

                if (current.length == 1 && !/string|comment/.test(style)) {
                    var delimiter_index = "[({".indexOf(current);
                    if (delimiter_index != -1)
                        pushBracketScope(
                            stream,
                            state,
                            "])}".slice(delimiter_index, delimiter_index + 1)
                        );

                    delimiter_index = "])}".indexOf(current);
                    if (delimiter_index != -1) {
                        if (top(state).type == current)
                            state.indent =
                                state.scopes.pop().offset -
                                (hangingIndent || stream.indentUnit);
                        else return ERRORCLASS;
                    }
                }
                if (
                    state.dedent &&
                    stream.eol() &&
                    top(state).type == "py" &&
                    state.scopes.length > 1
                )
                    state.scopes.pop();

                return style;
            }

            return {
                startState: function() {
                    return {
                        tokenize: tokenBase,
                        scopes: [{ offset: 0, type: "py", align: null }],
                        indent: 0,
                        lastToken: null,
                        lambda: false,
                        dedent: 0,
                    };
                },

                token: function(stream, state) {
                    var addErr = state.errorToken;
                    if (addErr) state.errorToken = false;
                    var style = tokenLexer(stream, state);

                    if (style && style != "comment")
                        state.lastToken =
                            style == "keyword" || style == "punctuation"
                                ? stream.current()
                                : style;
                    if (style == "punctuation") style = null;

                    if (stream.eol() && state.lambda) state.lambda = false;
                    return addErr ? ERRORCLASS : style;
                },

                indent: function(state, textAfter, cx) {
                    if (state.tokenize != tokenBase)
                        return state.tokenize.isString ? null : 0;

                    var scope = top(state);
                    var closing =
                        scope.type == textAfter.charAt(0) ||
                        (scope.type == "py" &&
                            !state.dedent &&
                            /^(else:|elif |except |finally:)/.test(textAfter));
                    if (scope.align != null)
                        return scope.align - (closing ? 1 : 0);
                    else
                        return (
                            scope.offset -
                            (closing ? hangingIndent || cx.unit : 0)
                        );
                },

                languageData: {
                    autocomplete: commonKeywords.concat(commonBuiltins),
                    indentOnInput:
                        /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
                    commentTokens: { line: "#" },
                    closeBrackets: {
                        brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
                    },
                },
            };
        }
        var words = function(str) {
            return str.split(" ");
        };

        const python = mkPython({});

        const cython = mkPython({
            extra_keywords: words(
                "by cdef cimport cpdef ctypedef enum except " +
                "extern gil include nogil property public " +
                "readonly struct union DEF IF ELIF ELSE"
            ),
        });

        exports.cython = cython;
        exports.mkPython = mkPython;
        exports.python = python;
    }
    _M60();
    function _M61() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var curPunc,
            keywords = buildRE([
                "abs",
                "acos",
                "aj",
                "aj0",
                "all",
                "and",
                "any",
                "asc",
                "asin",
                "asof",
                "atan",
                "attr",
                "avg",
                "avgs",
                "bin",
                "by",
                "ceiling",
                "cols",
                "cor",
                "cos",
                "count",
                "cov",
                "cross",
                "csv",
                "cut",
                "delete",
                "deltas",
                "desc",
                "dev",
                "differ",
                "distinct",
                "div",
                "do",
                "each",
                "ej",
                "enlist",
                "eval",
                "except",
                "exec",
                "exit",
                "exp",
                "fby",
                "fills",
                "first",
                "fkeys",
                "flip",
                "floor",
                "from",
                "get",
                "getenv",
                "group",
                "gtime",
                "hclose",
                "hcount",
                "hdel",
                "hopen",
                "hsym",
                "iasc",
                "idesc",
                "if",
                "ij",
                "in",
                "insert",
                "inter",
                "inv",
                "key",
                "keys",
                "last",
                "like",
                "list",
                "lj",
                "load",
                "log",
                "lower",
                "lsq",
                "ltime",
                "ltrim",
                "mavg",
                "max",
                "maxs",
                "mcount",
                "md5",
                "mdev",
                "med",
                "meta",
                "min",
                "mins",
                "mmax",
                "mmin",
                "mmu",
                "mod",
                "msum",
                "neg",
                "next",
                "not",
                "null",
                "or",
                "over",
                "parse",
                "peach",
                "pj",
                "plist",
                "prd",
                "prds",
                "prev",
                "prior",
                "rand",
                "rank",
                "ratios",
                "raze",
                "read0",
                "read1",
                "reciprocal",
                "reverse",
                "rload",
                "rotate",
                "rsave",
                "rtrim",
                "save",
                "scan",
                "select",
                "set",
                "setenv",
                "show",
                "signum",
                "sin",
                "sqrt",
                "ss",
                "ssr",
                "string",
                "sublist",
                "sum",
                "sums",
                "sv",
                "system",
                "tables",
                "tan",
                "til",
                "trim",
                "txf",
                "type",
                "uj",
                "ungroup",
                "union",
                "update",
                "upper",
                "upsert",
                "value",
                "var",
                "view",
                "views",
                "vs",
                "wavg",
                "where",
                "where",
                "while",
                "within",
                "wj",
                "wj1",
                "wsum",
                "xasc",
                "xbar",
                "xcol",
                "xcols",
                "xdesc",
                "xexp",
                "xgroup",
                "xkey",
                "xlog",
                "xprev",
                "xrank",
            ]),
            E = /[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
        function buildRE(w) {
            return new RegExp("^(" + w.join("|") + ")$");
        }
        function tokenBase(stream, state) {
            var sol = stream.sol(),
                c = stream.next();
            curPunc = null;
            if (sol)
                if (c == "/")
                    return (state.tokenize = tokenLineComment)(stream, state);
                else if (c == "\\") {
                    if (stream.eol() || /\s/.test(stream.peek()))
                        return (
                            stream.skipToEnd(),
                            /^\\\s*$/.test(stream.current())
                                ? (state.tokenize = tokenCommentToEOF)(stream)
                                : (state.tokenize = tokenBase),
                            "comment"
                        );
                    else return (state.tokenize = tokenBase), "builtin";
                }
            if (/\s/.test(c))
                return stream.peek() == "/"
                    ? (stream.skipToEnd(), "comment")
                    : "null";
            if (c == '"') return (state.tokenize = tokenString)(stream, state);
            if (c == "`")
                return stream.eatWhile(/[A-Za-z\d_:\/.]/), "macroName";
            if (("." == c && /\d/.test(stream.peek())) || /\d/.test(c)) {
                var t = null;
                stream.backUp(1);
                if (
                    stream.match(
                        /^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/
                    ) ||
                    stream.match(
                        /^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/
                    ) ||
                    stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/) ||
                    stream.match(/^\d+[ptuv]{1}/)
                )
                    t = "temporal";
                else if (
                    stream.match(/^0[NwW]{1}/) ||
                    stream.match(/^0x[\da-fA-F]*/) ||
                    stream.match(/^[01]+[b]{1}/) ||
                    stream.match(/^\d+[chijn]{1}/) ||
                    stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/)
                )
                    t = "number";
                return t && (!(c = stream.peek()) || E.test(c))
                    ? t
                    : (stream.next(), "error");
            }
            if (/[A-Za-z]|\./.test(c))
                return (
                    stream.eatWhile(/[A-Za-z._\d]/),
                    keywords.test(stream.current()) ? "keyword" : "variable"
                );
            if (/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c)) return null;
            if (/[{}\(\[\]\)]/.test(c)) return null;
            return "error";
        }
        function tokenLineComment(stream, state) {
            return (
                stream.skipToEnd(),
                /\/\s*$/.test(stream.current())
                    ? (state.tokenize = tokenBlockComment)(stream, state)
                    : (state.tokenize = tokenBase),
                "comment"
            );
        }
        function tokenBlockComment(stream, state) {
            var f = stream.sol() && stream.peek() == "\\";
            stream.skipToEnd();
            if (f && /^\\\s*$/.test(stream.current()))
                state.tokenize = tokenBase;
            return "comment";
        }
        function tokenCommentToEOF(stream) {
            return stream.skipToEnd(), "comment";
        }
        function tokenString(stream, state) {
            var escaped = false,
                next,
                end = false;
            while ((next = stream.next())) {
                if (next == '"' && !escaped) {
                    end = true;
                    break;
                }
                escaped = !escaped && next == "\\";
            }
            if (end) state.tokenize = tokenBase;
            return "string";
        }
        function pushContext(state, type, col) {
            state.context = {
                prev: state.context,
                indent: state.indent,
                col: col,
                type: type,
            };
        }
        function popContext(state) {
            state.indent = state.context.indent;
            state.context = state.context.prev;
        }
        const q = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    context: null,
                    indent: 0,
                    col: 0,
                };
            },
            token: function(stream, state) {
                if (stream.sol()) {
                    if (state.context && state.context.align == null)
                        state.context.align = false;
                    state.indent = stream.indentation();
                }
                //if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                if (
                    style != "comment" &&
                    state.context &&
                    state.context.align == null &&
                    state.context.type != "pattern"
                ) {
                    state.context.align = true;
                }
                if (curPunc == "(") pushContext(state, ")", stream.column());
                else if (curPunc == "[")
                    pushContext(state, "]", stream.column());
                else if (curPunc == "{")
                    pushContext(state, "}", stream.column());
                else if (/[\]\}\)]/.test(curPunc)) {
                    while (state.context && state.context.type == "pattern")
                        popContext(state);
                    if (state.context && curPunc == state.context.type)
                        popContext(state);
                } else if (
                    curPunc == "." &&
                    state.context &&
                    state.context.type == "pattern"
                )
                    popContext(state);
                else if (/atom|string|variable/.test(style) && state.context) {
                    if (/[\}\]]/.test(state.context.type))
                        pushContext(state, "pattern", stream.column());
                    else if (
                        state.context.type == "pattern" &&
                        !state.context.align
                    ) {
                        state.context.align = true;
                        state.context.col = stream.column();
                    }
                }
                return style;
            },
            indent: function(state, textAfter, cx) {
                var firstChar = textAfter && textAfter.charAt(0);
                var context = state.context;
                if (/[\]\}]/.test(firstChar))
                    while (context && context.type == "pattern")
                        context = context.prev;
                var closing = context && firstChar == context.type;
                if (!context) return 0;
                else if (context.type == "pattern") return context.col;
                else if (context.align) return context.col + (closing ? 0 : 1);
                else return context.indent + (closing ? 0 : cx.unit);
            },
        };

        exports.q = q;
    }
    _M61();
    function _M62() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var headerSeparator = /^-+$/;
        var headerLine =
            /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
        var simpleEmail = /^[\w+.-]+@[\w.-]+/;

        const rpmChanges = {
            token: function(stream) {
                if (stream.sol()) {
                    if (stream.match(headerSeparator)) {
                        return "tag";
                    }
                    if (stream.match(headerLine)) {
                        return "tag";
                    }
                }
                if (stream.match(simpleEmail)) {
                    return "string";
                }
                stream.next();
                return null;
            },
        };

        // Quick and dirty spec file highlighting

        var arch =
            /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;

        var preamble = /^[a-zA-Z0-9()]+:/;
        var section =
            /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
        var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros
        var control_flow_simple = /^%(else|endif)/; // rpm control flow macros
        var operators = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; // operators in control flow macros

        const rpmSpec = {
            startState: function() {
                return {
                    controlFlow: false,
                    macroParameters: false,
                    section: false,
                };
            },
            token: function(stream, state) {
                var ch = stream.peek();
                if (ch == "#") {
                    stream.skipToEnd();
                    return "comment";
                }

                if (stream.sol()) {
                    if (stream.match(preamble)) {
                        return "header";
                    }
                    if (stream.match(section)) {
                        return "atom";
                    }
                }

                if (stream.match(/^\$\w+/)) {
                    return "def";
                } // Variables like '$RPM_BUILD_ROOT'
                if (stream.match(/^\$\{\w+\}/)) {
                    return "def";
                } // Variables like '${RPM_BUILD_ROOT}'

                if (stream.match(control_flow_simple)) {
                    return "keyword";
                }
                if (stream.match(control_flow_complex)) {
                    state.controlFlow = true;
                    return "keyword";
                }
                if (state.controlFlow) {
                    if (stream.match(operators)) {
                        return "operator";
                    }
                    if (stream.match(/^(\d+)/)) {
                        return "number";
                    }
                    if (stream.eol()) {
                        state.controlFlow = false;
                    }
                }

                if (stream.match(arch)) {
                    if (stream.eol()) {
                        state.controlFlow = false;
                    }
                    return "number";
                }

                // Macros like '%make_install' or '%attr(0775,root,root)'
                if (stream.match(/^%[\w]+/)) {
                    if (stream.match("(")) {
                        state.macroParameters = true;
                    }
                    return "keyword";
                }
                if (state.macroParameters) {
                    if (stream.match(/^\d+/)) {
                        return "number";
                    }
                    if (stream.match(")")) {
                        state.macroParameters = false;
                        return "keyword";
                    }
                }

                // Macros like '%{defined fedora}'
                if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
                    if (stream.eol()) {
                        state.controlFlow = false;
                    }
                    return "def";
                }

                stream.next();
                return null;
            },
        };
        exports.rpm = {
            rpmChanges,
            rpmSpec
        }
    }
    _M62();
    function _M63() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordObj(words) {
            var res = {};
            for (var i = 0; i < words.length; ++i) res[words[i]] = true;
            return res;
        }
        var commonAtoms = [
            "NULL",
            "NA",
            "Inf",
            "NaN",
            "NA_integer_",
            "NA_real_",
            "NA_complex_",
            "NA_character_",
            "TRUE",
            "FALSE",
        ];
        var commonBuiltins = [
            "list",
            "quote",
            "bquote",
            "eval",
            "return",
            "call",
            "parse",
            "deparse",
        ];
        var commonKeywords = [
            "if",
            "else",
            "repeat",
            "while",
            "function",
            "for",
            "in",
            "next",
            "break",
        ];
        var commonBlockKeywords = [
            "if",
            "else",
            "repeat",
            "while",
            "function",
            "for",
        ];

        var atoms = wordObj(commonAtoms);
        var builtins = wordObj(commonBuiltins);
        var keywords = wordObj(commonKeywords);
        var blockkeywords = wordObj(commonBlockKeywords);
        var opChars = /[+\-*\/^<>=!&|~$:]/;
        var curPunc;

        function tokenBase(stream, state) {
            curPunc = null;
            var ch = stream.next();
            if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            } else if (ch == "0" && stream.eat("x")) {
                stream.eatWhile(/[\da-f]/i);
                return "number";
            } else if (ch == "." && stream.eat(/\d/)) {
                stream.match(/\d*(?:e[+\-]?\d+)?/);
                return "number";
            } else if (/\d/.test(ch)) {
                stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
                return "number";
            } else if (ch == "'" || ch == '"') {
                state.tokenize = tokenString(ch);
                return "string";
            } else if (ch == "`") {
                stream.match(/[^`]+`/);
                return "string.special";
            } else if (ch == "." && stream.match(/.(?:[.]|\d+)/)) {
                return "keyword";
            } else if (/[a-zA-Z\.]/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                var word = stream.current();
                if (atoms.propertyIsEnumerable(word)) return "atom";
                if (keywords.propertyIsEnumerable(word)) {
                    // Block keywords start new blocks, except 'else if', which only starts
                    // one new block for the 'if', no block for the 'else'.
                    if (
                        blockkeywords.propertyIsEnumerable(word) &&
                        !stream.match(/\s*if(\s+|$)/, false)
                    )
                        curPunc = "block";
                    return "keyword";
                }
                if (builtins.propertyIsEnumerable(word)) return "builtin";
                return "variable";
            } else if (ch == "%") {
                if (stream.skipTo("%")) stream.next();
                return "variableName.special";
            } else if (
                (ch == "<" && stream.eat("-")) ||
                (ch == "<" && stream.match("<-")) ||
                (ch == "-" && stream.match(/>>?/))
            ) {
                return "operator";
            } else if (ch == "=" && state.ctx.argList) {
                return "operator";
            } else if (opChars.test(ch)) {
                if (ch == "$") return "operator";
                stream.eatWhile(opChars);
                return "operator";
            } else if (/[\(\){}\[\];]/.test(ch)) {
                curPunc = ch;
                if (ch == ";") return "punctuation";
                return null;
            } else {
                return null;
            }
        }

        function tokenString(quote) {
            return function(stream, state) {
                if (stream.eat("\\")) {
                    var ch = stream.next();
                    if (ch == "x") stream.match(/^[a-f0-9]{2}/i);
                    else if (
                        (ch == "u" || ch == "U") &&
                        stream.eat("{") &&
                        stream.skipTo("}")
                    )
                        stream.next();
                    else if (ch == "u") stream.match(/^[a-f0-9]{4}/i);
                    else if (ch == "U") stream.match(/^[a-f0-9]{8}/i);
                    else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);
                    return "string.special";
                } else {
                    var next;
                    while ((next = stream.next()) != null) {
                        if (next == quote) {
                            state.tokenize = tokenBase;
                            break;
                        }
                        if (next == "\\") {
                            stream.backUp(1);
                            break;
                        }
                    }
                    return "string";
                }
            };
        }

        var ALIGN_YES = 1,
            ALIGN_NO = 2,
            BRACELESS = 4;

        function push(state, type, stream) {
            state.ctx = {
                type: type,
                indent: state.indent,
                flags: 0,
                column: stream.column(),
                prev: state.ctx,
            };
        }
        function setFlag(state, flag) {
            var ctx = state.ctx;
            state.ctx = {
                type: ctx.type,
                indent: ctx.indent,
                flags: ctx.flags | flag,
                column: ctx.column,
                prev: ctx.prev,
            };
        }
        function pop(state) {
            state.indent = state.ctx.indent;
            state.ctx = state.ctx.prev;
        }

        const r = {
            startState: function(indentUnit) {
                return {
                    tokenize: tokenBase,
                    ctx: { type: "top", indent: -indentUnit, flags: ALIGN_NO },
                    indent: 0,
                    afterIdent: false,
                };
            },

            token: function(stream, state) {
                if (stream.sol()) {
                    if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;
                    if (state.ctx.flags & BRACELESS) pop(state);
                    state.indent = stream.indentation();
                }
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0)
                    setFlag(state, ALIGN_YES);

                if (
                    (curPunc == ";" || curPunc == "{" || curPunc == "}") &&
                    state.ctx.type == "block"
                )
                    pop(state);
                if (curPunc == "{") push(state, "}", stream);
                else if (curPunc == "(") {
                    push(state, ")", stream);
                    if (state.afterIdent) state.ctx.argList = true;
                } else if (curPunc == "[") push(state, "]", stream);
                else if (curPunc == "block") push(state, "block", stream);
                else if (curPunc == state.ctx.type) pop(state);
                else if (state.ctx.type == "block" && style != "comment")
                    setFlag(state, BRACELESS);
                state.afterIdent = style == "variable" || style == "keyword";
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase) return 0;
                var firstChar = textAfter && textAfter.charAt(0),
                    ctx = state.ctx,
                    closing = firstChar == ctx.type;
                if (ctx.flags & BRACELESS) ctx = ctx.prev;
                if (ctx.type == "block")
                    return ctx.indent + (firstChar == "{" ? 0 : cx.unit);
                else if (ctx.flags & ALIGN_YES)
                    return ctx.column + (closing ? 0 : 1);
                else return ctx.indent + (closing ? 0 : cx.unit);
            },

            languageData: {
                wordChars: ".",
                commentTokens: { line: "#" },
                autocomplete: commonAtoms.concat(
                    commonBuiltins,
                    commonKeywords
                ),
            },
        };

        exports.r = r;
    }
    _M63();
    function _M64() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var words = {};
        var isDoubleOperatorSym = {
            eq: "operator",
            lt: "operator",
            le: "operator",
            gt: "operator",
            ge: "operator",
            in: "operator",
            ne: "operator",
            or: "operator",
        };
        var isDoubleOperatorChar = /(<=|>=|!=|<>)/;
        var isSingleOperatorChar = /[=\(:\),{}.*<>+\-\/^\[\]]/;

        // Takes a string of words separated by spaces and adds them as
        // keys with the value of the first argument 'style'
        function define(style, string, context) {
            if (context) {
                var split = string.split(" ");
                for (var i = 0; i < split.length; i++) {
                    words[split[i]] = { style: style, state: context };
                }
            }
        }
        //datastep
        define("def", "stack pgm view source debug nesting nolist", [
            "inDataStep",
        ]);
        define("def", "if while until for do do; end end; then else cancel", [
            "inDataStep",
        ]);
        define("def", "label format _n_ _error_", ["inDataStep"]);
        define(
            "def",
            "ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME",
            ["inDataStep"]
        );
        define(
            "def",
            "filevar finfo finv fipname fipnamel fipstate first firstobs floor",
            ["inDataStep"]
        );
        define(
            "def",
            "varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday",
            ["inDataStep"]
        );
        define("def", "zipfips zipname zipnamel zipstate", ["inDataStep"]);
        define("def", "put putc putn", ["inDataStep"]);
        define("builtin", "data run", ["inDataStep"]);

        //proc
        define("def", "data", ["inProc"]);

        // flow control for macros
        define("def", "%if %end %end; %else %else; %do %do; %then", [
            "inMacro",
        ]);

        //everywhere
        define(
            "builtin",
            "proc run; quit; libname filename %macro %mend option options",
            ["ALL"]
        );

        define("def", "footnote title libname ods", ["ALL"]);
        define("def", "%let %put %global %sysfunc %eval ", ["ALL"]);
        // automatic macro variables http://support.sas.com/documentation/cdl/en/mcrolref/61885/HTML/default/viewer.htm#a003167023.htm
        define(
            "variable",
            "&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext",
            ["ALL"]
        );

        //footnote[1-9]? title[1-9]?

        //options statement
        define("def", "source2 nosource2 page pageno pagesize", ["ALL"]);

        //proc and datastep
        define(
            "def",
            "_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max",
            ["inDataStep", "inProc"]
        );
        define("operator", "and not ", ["inDataStep", "inProc"]);

        // Main function
        function tokenize(stream, state) {
            // Finally advance the stream
            var ch = stream.next();

            // BLOCKCOMMENT
            if (ch === "/" && stream.eat("*")) {
                state.continueComment = true;
                return "comment";
            } else if (state.continueComment === true) {
                // in comment block
                //comment ends at the beginning of the line
                if (ch === "*" && stream.peek() === "/") {
                    stream.next();
                    state.continueComment = false;
                } else if (stream.skipTo("*")) {
                    //comment is potentially later in line
                    stream.skipTo("*");
                    stream.next();
                    if (stream.eat("/")) state.continueComment = false;
                } else {
                    stream.skipToEnd();
                }
                return "comment";
            }

            if (ch == "*" && stream.column() == stream.indentation()) {
                stream.skipToEnd();
                return "comment";
            }

            // DoubleOperator match
            var doubleOperator = ch + stream.peek();

            if ((ch === '"' || ch === "'") && !state.continueString) {
                state.continueString = ch;
                return "string";
            } else if (state.continueString) {
                if (state.continueString == ch) {
                    state.continueString = null;
                } else if (stream.skipTo(state.continueString)) {
                    // quote found on this line
                    stream.next();
                    state.continueString = null;
                } else {
                    stream.skipToEnd();
                }
                return "string";
            } else if (state.continueString !== null && stream.eol()) {
                stream.skipTo(state.continueString) || stream.skipToEnd();
                return "string";
            } else if (/[\d\.]/.test(ch)) {
                //find numbers
                if (ch === ".") stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
                else if (ch === "0")
                    stream.match(/^[xX][0-9a-fA-F]+/) ||
                        stream.match(/^0[0-7]+/);
                else stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
                return "number";
            } else if (isDoubleOperatorChar.test(ch + stream.peek())) {
                // TWO SYMBOL TOKENS
                stream.next();
                return "operator";
            } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
                stream.next();
                if (stream.peek() === " ")
                    return isDoubleOperatorSym[doubleOperator.toLowerCase()];
            } else if (isSingleOperatorChar.test(ch)) {
                // SINGLE SYMBOL TOKENS
                return "operator";
            }

            // Matches one whole word -- even if the word is a character
            var word;
            if (stream.match(/[%&;\w]+/, false) != null) {
                word = ch + stream.match(/[%&;\w]+/, true);
                if (/&/.test(word)) return "variable";
            } else {
                word = ch;
            }
            // the word after DATA PROC or MACRO
            if (state.nextword) {
                stream.match(/[\w]+/);
                // match memname.libname
                if (stream.peek() === ".") stream.skipTo(" ");
                state.nextword = false;
                return "variableName.special";
            }

            word = word.toLowerCase();
            // Are we in a DATA Step?
            if (state.inDataStep) {
                if (word === "run;" || stream.match(/run\s;/)) {
                    state.inDataStep = false;
                    return "builtin";
                }
                // variable formats
                if (word && stream.next() === ".") {
                    //either a format or libname.memname
                    if (/\w/.test(stream.peek())) return "variableName.special";
                    else return "variable";
                }
                // do we have a DATA Step keyword
                if (
                    word &&
                    words.hasOwnProperty(word) &&
                    (words[word].state.indexOf("inDataStep") !== -1 ||
                        words[word].state.indexOf("ALL") !== -1)
                ) {
                    //backup to the start of the word
                    if (stream.start < stream.pos)
                        stream.backUp(stream.pos - stream.start);
                    //advance the length of the word and return
                    for (var i = 0; i < word.length; ++i) stream.next();
                    return words[word].style;
                }
            }
            // Are we in an Proc statement?
            if (state.inProc) {
                if (word === "run;" || word === "quit;") {
                    state.inProc = false;
                    return "builtin";
                }
                // do we have a proc keyword
                if (
                    word &&
                    words.hasOwnProperty(word) &&
                    (words[word].state.indexOf("inProc") !== -1 ||
                        words[word].state.indexOf("ALL") !== -1)
                ) {
                    stream.match(/[\w]+/);
                    return words[word].style;
                }
            }
            // Are we in a Macro statement?
            if (state.inMacro) {
                if (word === "%mend") {
                    if (stream.peek() === ";") stream.next();
                    state.inMacro = false;
                    return "builtin";
                }
                if (
                    word &&
                    words.hasOwnProperty(word) &&
                    (words[word].state.indexOf("inMacro") !== -1 ||
                        words[word].state.indexOf("ALL") !== -1)
                ) {
                    stream.match(/[\w]+/);
                    return words[word].style;
                }

                return "atom";
            }
            // Do we have Keywords specific words?
            if (word && words.hasOwnProperty(word)) {
                // Negates the initial next()
                stream.backUp(1);
                // Actually move the stream
                stream.match(/[\w]+/);
                if (word === "data" && /=/.test(stream.peek()) === false) {
                    state.inDataStep = true;
                    state.nextword = true;
                    return "builtin";
                }
                if (word === "proc") {
                    state.inProc = true;
                    state.nextword = true;
                    return "builtin";
                }
                if (word === "%macro") {
                    state.inMacro = true;
                    state.nextword = true;
                    return "builtin";
                }
                if (/title[1-9]/.test(word)) return "def";

                if (word === "footnote") {
                    stream.eat(/[1-9]/);
                    return "def";
                }

                // Returns their value as state in the prior define methods
                if (
                    state.inDataStep === true &&
                    words[word].state.indexOf("inDataStep") !== -1
                )
                    return words[word].style;
                if (
                    state.inProc === true &&
                    words[word].state.indexOf("inProc") !== -1
                )
                    return words[word].style;
                if (
                    state.inMacro === true &&
                    words[word].state.indexOf("inMacro") !== -1
                )
                    return words[word].style;
                if (words[word].state.indexOf("ALL") !== -1)
                    return words[word].style;
                return null;
            }
            // Unrecognized syntax
            return null;
        }

        const sas = {
            startState: function() {
                return {
                    inDataStep: false,
                    inProc: false,
                    inMacro: false,
                    nextword: false,
                    continueString: null,
                    continueComment: false,
                };
            },
            token: function(stream, state) {
                // Strip the spaces, but regex will account for them either way
                if (stream.eatSpace()) return null;
                // Go through the main process
                return tokenize(stream, state);
            },

            languageData: {
                commentTokens: { block: { open: "/*", close: "*/" } },
            },
        };

        exports.sas = sas;
    }
    _M64();
    function _M65() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var BUILTIN = "builtin",
            COMMENT = "comment",
            STRING = "string",
            SYMBOL = "symbol",
            ATOM = "atom",
            NUMBER = "number",
            BRACKET = "bracket";
        var INDENT_WORD_SKIP = 2;

        function makeKeywords(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var keywords = makeKeywords(
            "λ case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
        );
        var indentKeys = makeKeywords(
            "define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless"
        );

        function stateStack(indent, type, prev) {
            // represents a state stack object
            this.indent = indent;
            this.type = type;
            this.prev = prev;
        }

        function pushStack(state, indent, type) {
            state.indentStack = new stateStack(indent, type, state.indentStack);
        }

        function popStack(state) {
            state.indentStack = state.indentStack.prev;
        }

        var binaryMatcher = new RegExp(
            /^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i
        );
        var octalMatcher = new RegExp(
            /^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i
        );
        var hexMatcher = new RegExp(
            /^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i
        );
        var decimalMatcher = new RegExp(
            /^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i
        );

        function isBinaryNumber(stream) {
            return stream.match(binaryMatcher);
        }

        function isOctalNumber(stream) {
            return stream.match(octalMatcher);
        }

        function isDecimalNumber(stream, backup) {
            if (backup === true) {
                stream.backUp(1);
            }
            return stream.match(decimalMatcher);
        }

        function isHexNumber(stream) {
            return stream.match(hexMatcher);
        }

        function processEscapedSequence(stream, options) {
            var next,
                escaped = false;
            while ((next = stream.next()) != null) {
                if (next == options.token && !escaped) {
                    options.state.mode = false;
                    break;
                }
                escaped = !escaped && next == "\\";
            }
        }

        const scheme = {
            startState: function() {
                return {
                    indentStack: null,
                    indentation: 0,
                    mode: false,
                    sExprComment: false,
                    sExprQuote: false,
                };
            },

            token: function(stream, state) {
                if (state.indentStack == null && stream.sol()) {
                    // update indentation, but only if indentStack is empty
                    state.indentation = stream.indentation();
                }

                // skip spaces
                if (stream.eatSpace()) {
                    return null;
                }
                var returnType = null;

                switch (state.mode) {
                    case "string": // multi-line string parsing mode
                        processEscapedSequence(stream, {
                            token: '"',
                            state: state,
                        });
                        returnType = STRING; // continue on in scheme-string mode
                        break;
                    case "symbol": // escape symbol
                        processEscapedSequence(stream, {
                            token: "|",
                            state: state,
                        });
                        returnType = SYMBOL; // continue on in scheme-symbol mode
                        break;
                    case "comment": // comment parsing mode
                        var next,
                            maybeEnd = false;
                        while ((next = stream.next()) != null) {
                            if (next == "#" && maybeEnd) {
                                state.mode = false;
                                break;
                            }
                            maybeEnd = next == "|";
                        }
                        returnType = COMMENT;
                        break;
                    case "s-expr-comment": // s-expr commenting mode
                        state.mode = false;
                        if (stream.peek() == "(" || stream.peek() == "[") {
                            // actually start scheme s-expr commenting mode
                            state.sExprComment = 0;
                        } else {
                            // if not we just comment the entire of the next token
                            stream.eatWhile(/[^\s\(\)\[\]]/); // eat symbol atom
                            returnType = COMMENT;
                            break;
                        }
                    default: // default parsing mode
                        var ch = stream.next();

                        if (ch == '"') {
                            state.mode = "string";
                            returnType = STRING;
                        } else if (ch == "'") {
                            if (stream.peek() == "(" || stream.peek() == "[") {
                                if (typeof state.sExprQuote != "number") {
                                    state.sExprQuote = 0;
                                } // else already in a quoted expression
                                returnType = ATOM;
                            } else {
                                stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                                returnType = ATOM;
                            }
                        } else if (ch == "|") {
                            state.mode = "symbol";
                            returnType = SYMBOL;
                        } else if (ch == "#") {
                            if (stream.eat("|")) {
                                // Multi-line comment
                                state.mode = "comment"; // toggle to comment mode
                                returnType = COMMENT;
                            } else if (stream.eat(/[tf]/i)) {
                                // #t/#f (atom)
                                returnType = ATOM;
                            } else if (stream.eat(";")) {
                                // S-Expr comment
                                state.mode = "s-expr-comment";
                                returnType = COMMENT;
                            } else {
                                var numTest = null,
                                    hasExactness = false,
                                    hasRadix = true;
                                if (stream.eat(/[ei]/i)) {
                                    hasExactness = true;
                                } else {
                                    stream.backUp(1); // must be radix specifier
                                }
                                if (stream.match(/^#b/i)) {
                                    numTest = isBinaryNumber;
                                } else if (stream.match(/^#o/i)) {
                                    numTest = isOctalNumber;
                                } else if (stream.match(/^#x/i)) {
                                    numTest = isHexNumber;
                                } else if (stream.match(/^#d/i)) {
                                    numTest = isDecimalNumber;
                                } else if (stream.match(/^[-+0-9.]/, false)) {
                                    hasRadix = false;
                                    numTest = isDecimalNumber;
                                    // re-consume the initial # if all matches failed
                                } else if (!hasExactness) {
                                    stream.eat("#");
                                }
                                if (numTest != null) {
                                    if (hasRadix && !hasExactness) {
                                        // consume optional exactness after radix
                                        stream.match(/^#[ei]/i);
                                    }
                                    if (numTest(stream)) returnType = NUMBER;
                                }
                            }
                        } else if (
                            /^[-+0-9.]/.test(ch) &&
                            isDecimalNumber(stream, true)
                        ) {
                            // match non-prefixed number, must be decimal
                            returnType = NUMBER;
                        } else if (ch == ";") {
                            // comment
                            stream.skipToEnd(); // rest of the line is a comment
                            returnType = COMMENT;
                        } else if (ch == "(" || ch == "[") {
                            var keyWord = "";
                            var indentTemp = stream.column(),
                                letter;
                            /**
           Either
           (indent-word ..
           (non-indent-word ..
           (;something else, bracket, etc.
        */

                            while (
                                (letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null
                            ) {
                                keyWord += letter;
                            }

                            if (
                                keyWord.length > 0 &&
                                indentKeys.propertyIsEnumerable(keyWord)
                            ) {
                                // indent-word

                                pushStack(
                                    state,
                                    indentTemp + INDENT_WORD_SKIP,
                                    ch
                                );
                            } else {
                                // non-indent word
                                // we continue eating the spaces
                                stream.eatSpace();
                                if (stream.eol() || stream.peek() == ";") {
                                    // nothing significant after
                                    // we restart indentation 1 space after
                                    pushStack(state, indentTemp + 1, ch);
                                } else {
                                    pushStack(
                                        state,
                                        indentTemp + stream.current().length,
                                        ch
                                    ); // else we match
                                }
                            }
                            stream.backUp(stream.current().length - 1); // undo all the eating

                            if (typeof state.sExprComment == "number")
                                state.sExprComment++;
                            if (typeof state.sExprQuote == "number")
                                state.sExprQuote++;

                            returnType = BRACKET;
                        } else if (ch == ")" || ch == "]") {
                            returnType = BRACKET;
                            if (
                                state.indentStack != null &&
                                state.indentStack.type ==
                                (ch == ")" ? "(" : "[")
                            ) {
                                popStack(state);

                                if (typeof state.sExprComment == "number") {
                                    if (--state.sExprComment == 0) {
                                        returnType = COMMENT; // final closing bracket
                                        state.sExprComment = false; // turn off s-expr commenting mode
                                    }
                                }
                                if (typeof state.sExprQuote == "number") {
                                    if (--state.sExprQuote == 0) {
                                        returnType = ATOM; // final closing bracket
                                        state.sExprQuote = false; // turn off s-expr quote mode
                                    }
                                }
                            }
                        } else {
                            stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);

                            if (
                                keywords &&
                                keywords.propertyIsEnumerable(stream.current())
                            ) {
                                returnType = BUILTIN;
                            } else returnType = "variable";
                        }
                }
                return typeof state.sExprComment == "number"
                    ? COMMENT
                    : typeof state.sExprQuote == "number"
                        ? ATOM
                        : returnType;
            },

            indent: function(state) {
                if (state.indentStack == null) return state.indentation;
                return state.indentStack.indent;
            },

            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", '"'] },
                commentTokens: { line: ";;" },
            },
        };

        exports.scheme = scheme;
    }
    _M65();
    function _M66() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var words = {};
        function define(style, dict) {
            for (var i = 0; i < dict.length; i++) {
                words[dict[i]] = style;
            }
        }
        var commonAtoms = ["true", "false"];
        var commonKeywords = [
            "if",
            "then",
            "do",
            "else",
            "elif",
            "while",
            "until",
            "for",
            "in",
            "esac",
            "fi",
            "fin",
            "fil",
            "done",
            "exit",
            "set",
            "unset",
            "export",
            "function",
        ];
        var commonCommands = [
            "ab",
            "awk",
            "bash",
            "beep",
            "cat",
            "cc",
            "cd",
            "chown",
            "chmod",
            "chroot",
            "clear",
            "cp",
            "curl",
            "cut",
            "diff",
            "echo",
            "find",
            "gawk",
            "gcc",
            "get",
            "git",
            "grep",
            "hg",
            "kill",
            "killall",
            "ln",
            "ls",
            "make",
            "mkdir",
            "openssl",
            "mv",
            "nc",
            "nl",
            "node",
            "npm",
            "ping",
            "ps",
            "restart",
            "rm",
            "rmdir",
            "sed",
            "service",
            "sh",
            "shopt",
            "shred",
            "source",
            "sort",
            "sleep",
            "ssh",
            "start",
            "stop",
            "su",
            "sudo",
            "svn",
            "tee",
            "telnet",
            "top",
            "touch",
            "vi",
            "vim",
            "wall",
            "wc",
            "wget",
            "who",
            "write",
            "yes",
            "zsh",
        ];

        define("atom", commonAtoms);
        define("keyword", commonKeywords);
        define("builtin", commonCommands);

        function tokenBase(stream, state) {
            if (stream.eatSpace()) return null;

            var sol = stream.sol();
            var ch = stream.next();

            if (ch === "\\") {
                stream.next();
                return null;
            }
            if (ch === "'" || ch === '"' || ch === "`") {
                state.tokens.unshift(
                    tokenString(ch, ch === "`" ? "quote" : "string")
                );
                return tokenize(stream, state);
            }
            if (ch === "#") {
                if (sol && stream.eat("!")) {
                    stream.skipToEnd();
                    return "meta"; // 'comment'?
                }
                stream.skipToEnd();
                return "comment";
            }
            if (ch === "$") {
                state.tokens.unshift(tokenDollar);
                return tokenize(stream, state);
            }
            if (ch === "+" || ch === "=") {
                return "operator";
            }
            if (ch === "-") {
                stream.eat("-");
                stream.eatWhile(/\w/);
                return "attribute";
            }
            if (ch == "<") {
                if (stream.match("<<")) return "operator";
                var heredoc = stream.match(/^<-?\s*['"]?([^'"]*)['"]?/);
                if (heredoc) {
                    state.tokens.unshift(tokenHeredoc(heredoc[1]));
                    return "string.special";
                }
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/\d/);
                if (stream.eol() || !/\w/.test(stream.peek())) {
                    return "number";
                }
            }
            stream.eatWhile(/[\w-]/);
            var cur = stream.current();
            if (stream.peek() === "=" && /\w+/.test(cur)) return "def";
            return words.hasOwnProperty(cur) ? words[cur] : null;
        }

        function tokenString(quote, style) {
            var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
            return function(stream, state) {
                var next,
                    escaped = false;
                while ((next = stream.next()) != null) {
                    if (next === close && !escaped) {
                        state.tokens.shift();
                        break;
                    } else if (
                        next === "$" &&
                        !escaped &&
                        quote !== "'" &&
                        stream.peek() != close
                    ) {
                        escaped = true;
                        stream.backUp(1);
                        state.tokens.unshift(tokenDollar);
                        break;
                    } else if (!escaped && quote !== close && next === quote) {
                        state.tokens.unshift(tokenString(quote, style));
                        return tokenize(stream, state);
                    } else if (
                        !escaped &&
                        /['"]/.test(next) &&
                        !/['"]/.test(quote)
                    ) {
                        state.tokens.unshift(tokenStringStart(next, "string"));
                        stream.backUp(1);
                        break;
                    }
                    escaped = !escaped && next === "\\";
                }
                return style;
            };
        }
        function tokenStringStart(quote, style) {
            return function(stream, state) {
                state.tokens[0] = tokenString(quote, style);
                stream.next();
                return tokenize(stream, state);
            };
        }

        var tokenDollar = function(stream, state) {
            if (state.tokens.length > 1) stream.eat("$");
            var ch = stream.next();
            if (/['"({]/.test(ch)) {
                state.tokens[0] = tokenString(
                    ch,
                    ch == "(" ? "quote" : ch == "{" ? "def" : "string"
                );
                return tokenize(stream, state);
            }
            if (!/\d/.test(ch)) stream.eatWhile(/\w/);
            state.tokens.shift();
            return "def";
        };

        function tokenHeredoc(delim) {
            return function(stream, state) {
                if (stream.sol() && stream.string == delim)
                    state.tokens.shift();
                stream.skipToEnd();
                return "string.special";
            };
        }

        function tokenize(stream, state) {
            return (state.tokens[0] || tokenBase)(stream, state);
        }
        const shell = {
            startState: function() {
                return { tokens: [] };
            },
            token: function(stream, state) {
                return tokenize(stream, state);
            },
            languageData: {
                autocomplete: commonAtoms.concat(
                    commonKeywords,
                    commonCommands
                ),
                closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
                commentTokens: { line: "#" },
            },
        };

        exports.shell = shell;
    }
    _M66();
    function _M67() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var keywords = words("if elsif else stop require");
        var atoms = words("true false not");

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == "/" && stream.eat("*")) {
                state.tokenize = tokenCComment;
                return tokenCComment(stream, state);
            }

            if (ch === "#") {
                stream.skipToEnd();
                return "comment";
            }

            if (ch == '"') {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }

            if (ch == "(") {
                state._indent.push("(");
                // add virtual angel wings so that editor behaves...
                // ...more sane incase of broken brackets
                state._indent.push("{");
                return null;
            }

            if (ch === "{") {
                state._indent.push("{");
                return null;
            }

            if (ch == ")") {
                state._indent.pop();
                state._indent.pop();
            }

            if (ch === "}") {
                state._indent.pop();
                return null;
            }

            if (ch == ",") return null;

            if (ch == ";") return null;

            if (/[{}\(\),;]/.test(ch)) return null;

            // 1*DIGIT "K" / "M" / "G"
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\d]/);
                stream.eat(/[KkMmGg]/);
                return "number";
            }

            // ":" (ALPHA / "_") *(ALPHA / DIGIT / "_")
            if (ch == ":") {
                stream.eatWhile(/[a-zA-Z_]/);
                stream.eatWhile(/[a-zA-Z0-9_]/);

                return "operator";
            }

            stream.eatWhile(/\w/);
            var cur = stream.current();

            // "text:" *(SP / HTAB) (hash-comment / CRLF)
            // *(multiline-literal / multiline-dotstart)
            // "." CRLF
            if (cur == "text" && stream.eat(":")) {
                state.tokenize = tokenMultiLineString;
                return "string";
            }

            if (keywords.propertyIsEnumerable(cur)) return "keyword";

            if (atoms.propertyIsEnumerable(cur)) return "atom";

            return null;
        }

        function tokenMultiLineString(stream, state) {
            state._multiLineString = true;
            // the first line is special it may contain a comment
            if (!stream.sol()) {
                stream.eatSpace();

                if (stream.peek() == "#") {
                    stream.skipToEnd();
                    return "comment";
                }

                stream.skipToEnd();
                return "string";
            }

            if (stream.next() == "." && stream.eol()) {
                state._multiLineString = false;
                state.tokenize = tokenBase;
            }

            return "string";
        }

        function tokenCComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) break;
                    escaped = !escaped && ch == "\\";
                }
                if (!escaped) state.tokenize = tokenBase;
                return "string";
            };
        }

        const sieve = {
            startState: function(base) {
                return {
                    tokenize: tokenBase,
                    baseIndent: base || 0,
                    _indent: [],
                };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;

                return (state.tokenize || tokenBase)(stream, state);
            },

            indent: function(state, _textAfter, cx) {
                var length = state._indent.length;
                if (_textAfter && _textAfter[0] == "}") length--;

                if (length < 0) length = 0;

                return length * cx.unit;
            },

            languageData: {
                indentOnInput: /^\s*\}$/,
            },
        };

        exports.sieve = sieve;
    }
    _M67();
    function _M68() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
        var keywords = /true|false|nil|self|super|thisContext/;

        var Context = function(tokenizer, parent) {
            this.next = tokenizer;
            this.parent = parent;
        };

        var Token = function(name, context, eos) {
            this.name = name;
            this.context = context;
            this.eos = eos;
        };

        var State = function() {
            this.context = new Context(next, null);
            this.expectVariable = true;
            this.indentation = 0;
            this.userIndentationDelta = 0;
        };

        State.prototype.userIndent = function(indentation, indentUnit) {
            this.userIndentationDelta =
                indentation > 0
                    ? indentation / indentUnit - this.indentation
                    : 0;
        };

        var next = function(stream, context, state) {
            var token = new Token(null, context, false);
            var aChar = stream.next();

            if (aChar === '"') {
                token = nextComment(stream, new Context(nextComment, context));
            } else if (aChar === "'") {
                token = nextString(stream, new Context(nextString, context));
            } else if (aChar === "#") {
                if (stream.peek() === "'") {
                    stream.next();
                    token = nextSymbol(
                        stream,
                        new Context(nextSymbol, context)
                    );
                } else {
                    if (stream.eatWhile(/[^\s.{}\[\]()]/))
                        token.name = "string.special";
                    else token.name = "meta";
                }
            } else if (aChar === "$") {
                if (stream.next() === "<") {
                    stream.eatWhile(/[^\s>]/);
                    stream.next();
                }
                token.name = "string.special";
            } else if (aChar === "|" && state.expectVariable) {
                token.context = new Context(nextTemporaries, context);
            } else if (/[\[\]{}()]/.test(aChar)) {
                token.name = "bracket";
                token.eos = /[\[{(]/.test(aChar);

                if (aChar === "[") {
                    state.indentation++;
                } else if (aChar === "]") {
                    state.indentation = Math.max(0, state.indentation - 1);
                }
            } else if (specialChars.test(aChar)) {
                stream.eatWhile(specialChars);
                token.name = "operator";
                token.eos = aChar !== ";"; // ; cascaded message expression
            } else if (/\d/.test(aChar)) {
                stream.eatWhile(/[\w\d]/);
                token.name = "number";
            } else if (/[\w_]/.test(aChar)) {
                stream.eatWhile(/[\w\d_]/);
                token.name = state.expectVariable
                    ? keywords.test(stream.current())
                        ? "keyword"
                        : "variable"
                    : null;
            } else {
                token.eos = state.expectVariable;
            }

            return token;
        };

        var nextComment = function(stream, context) {
            stream.eatWhile(/[^"]/);
            return new Token(
                "comment",
                stream.eat('"') ? context.parent : context,
                true
            );
        };

        var nextString = function(stream, context) {
            stream.eatWhile(/[^']/);
            return new Token(
                "string",
                stream.eat("'") ? context.parent : context,
                false
            );
        };

        var nextSymbol = function(stream, context) {
            stream.eatWhile(/[^']/);
            return new Token(
                "string.special",
                stream.eat("'") ? context.parent : context,
                false
            );
        };

        var nextTemporaries = function(stream, context) {
            var token = new Token(null, context, false);
            var aChar = stream.next();

            if (aChar === "|") {
                token.context = context.parent;
                token.eos = true;
            } else {
                stream.eatWhile(/[^|]/);
                token.name = "variable";
            }

            return token;
        };

        const smalltalk = {
            startState: function() {
                return new State();
            },

            token: function(stream, state) {
                state.userIndent(stream.indentation(), stream.indentUnit);

                if (stream.eatSpace()) {
                    return null;
                }

                var token = state.context.next(stream, state.context, state);
                state.context = token.context;
                state.expectVariable = token.eos;

                return token.name;
            },

            blankLine: function(state, indentUnit) {
                state.userIndent(0, indentUnit);
            },

            indent: function(state, textAfter, cx) {
                var i =
                    state.context.next === next &&
                        textAfter &&
                        textAfter.charAt(0) === "]"
                        ? -1
                        : state.userIndentationDelta;
                return (state.indentation + i) * cx.unit;
            },

            languageData: {
                indentOnInput: /^\s*\]$/,
            },
        };

        exports.smalltalk = smalltalk;
    }
    _M68();
    function _M69() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
        var isOperatorChar = /[\|\!\+\-\*\?\~\^\&]/;
        var isOperatorString = /^(OR|AND|NOT|TO)$/i;

        function isNumber(word) {
            return parseFloat(word).toString() === word;
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) break;
                    escaped = !escaped && next == "\\";
                }

                if (!escaped) state.tokenize = tokenBase;
                return "string";
            };
        }

        function tokenOperator(operator) {
            return function(stream, state) {
                if (operator == "|") stream.eat(/\|/);
                else if (operator == "&") stream.eat(/\&/);

                state.tokenize = tokenBase;
                return "operator";
            };
        }

        function tokenWord(ch) {
            return function(stream, state) {
                var word = ch;
                while ((ch = stream.peek()) && ch.match(isStringChar) != null) {
                    word += stream.next();
                }

                state.tokenize = tokenBase;
                if (isOperatorString.test(word)) return "operator";
                else if (isNumber(word)) return "number";
                else if (stream.peek() == ":") return "propertyName";
                else return "string";
            };
        }

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == '"') state.tokenize = tokenString(ch);
            else if (isOperatorChar.test(ch))
                state.tokenize = tokenOperator(ch);
            else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);

            return state.tokenize != tokenBase
                ? state.tokenize(stream, state)
                : null;
        }

        const solr = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
        };

        exports.solr = solr;
    }
    _M69();
    function _M70() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function sql(parserConfig) {
            var client = parserConfig.client || {},
                atoms = parserConfig.atoms || {
                    false: true,
                    true: true,
                    null: true,
                },
                builtin = parserConfig.builtin || set(defaultBuiltin),
                keywords = parserConfig.keywords || set(sqlKeywords),
                operatorChars =
                    parserConfig.operatorChars || /^[*+\-%<>!=&|~^\/]/,
                support = parserConfig.support || {},
                hooks = parserConfig.hooks || {},
                dateSQL = parserConfig.dateSQL || {
                    date: true,
                    time: true,
                    timestamp: true,
                },
                backslashStringEscapes =
                    parserConfig.backslashStringEscapes !== false,
                brackets = parserConfig.brackets || /^[\{}\(\)\[\]]/,
                punctuation = parserConfig.punctuation || /^[;.,:]/;

            function tokenBase(stream, state) {
                var ch = stream.next();

                // call hooks from the mime type
                if (hooks[ch]) {
                    var result = hooks[ch](stream, state);
                    if (result !== false) return result;
                }

                if (
                    support.hexNumber &&
                    ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) ||
                        ((ch == "x" || ch == "X") &&
                            stream.match(/^'[0-9a-fA-F]+'/)))
                ) {
                    // hex
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html
                    return "number";
                } else if (
                    support.binaryNumber &&
                    (((ch == "b" || ch == "B") && stream.match(/^'[01]+'/)) ||
                        (ch == "0" && stream.match(/^b[01]+/)))
                ) {
                    // bitstring
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html
                    return "number";
                } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {
                    // numbers
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html
                    stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
                    support.decimallessFloat && stream.match(/^\.(?!\.)/);
                    return "number";
                } else if (
                    ch == "?" &&
                    (stream.eatSpace() || stream.eol() || stream.eat(";"))
                ) {
                    // placeholders
                    return "macroName";
                } else if (ch == "'" || (ch == '"' && support.doubleQuote)) {
                    // strings
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
                    state.tokenize = tokenLiteral(ch);
                    return state.tokenize(stream, state);
                } else if (
                    ((support.nCharCast && (ch == "n" || ch == "N")) ||
                        (support.charsetCast &&
                            ch == "_" &&
                            stream.match(/[a-z][a-z0-9]*/i))) &&
                    (stream.peek() == "'" || stream.peek() == '"')
                ) {
                    // charset casting: _utf8'str', N'str', n'str'
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
                    return "keyword";
                } else if (
                    support.escapeConstant &&
                    (ch == "e" || ch == "E") &&
                    (stream.peek() == "'" ||
                        (stream.peek() == '"' && support.doubleQuote))
                ) {
                    // escape constant: E'str', e'str'
                    // ref: https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-ESCAPE
                    state.tokenize = function(stream, state) {
                        return (state.tokenize = tokenLiteral(
                            stream.next(),
                            true
                        ))(stream, state);
                    };
                    return "keyword";
                } else if (
                    support.commentSlashSlash &&
                    ch == "/" &&
                    stream.eat("/")
                ) {
                    // 1-line comment
                    stream.skipToEnd();
                    return "comment";
                } else if (
                    (support.commentHash && ch == "#") ||
                    (ch == "-" &&
                        stream.eat("-") &&
                        (!support.commentSpaceRequired || stream.eat(" ")))
                ) {
                    // 1-line comments
                    // ref: https://kb.askmonty.org/en/comment-syntax/
                    stream.skipToEnd();
                    return "comment";
                } else if (ch == "/" && stream.eat("*")) {
                    // multi-line comments
                    // ref: https://kb.askmonty.org/en/comment-syntax/
                    state.tokenize = tokenComment(1);
                    return state.tokenize(stream, state);
                } else if (ch == ".") {
                    // .1 for 0.1
                    if (
                        support.zerolessFloat &&
                        stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i)
                    )
                        return "number";
                    if (stream.match(/^\.+/)) return null;
                    // .table_name (ODBC)
                    // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
                    if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
                        return "type";
                } else if (operatorChars.test(ch)) {
                    // operators
                    stream.eatWhile(operatorChars);
                    return "operator";
                } else if (brackets.test(ch)) {
                    // brackets
                    return "bracket";
                } else if (punctuation.test(ch)) {
                    // punctuation
                    stream.eatWhile(punctuation);
                    return "punctuation";
                } else if (
                    ch == "{" &&
                    (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) ||
                        stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))
                ) {
                    // dates (weird ODBC syntax)
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
                    return "number";
                } else {
                    stream.eatWhile(/^[_\w\d]/);
                    var word = stream.current().toLowerCase();
                    // dates (standard SQL syntax)
                    // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
                    if (
                        dateSQL.hasOwnProperty(word) &&
                        (stream.match(/^( )+'[^']*'/) ||
                            stream.match(/^( )+"[^"]*"/))
                    )
                        return "number";
                    if (atoms.hasOwnProperty(word)) return "atom";
                    if (builtin.hasOwnProperty(word)) return "type";
                    if (keywords.hasOwnProperty(word)) return "keyword";
                    if (client.hasOwnProperty(word)) return "builtin";
                    return null;
                }
            }

            // 'string', with char specified in quote escaped by '\'
            function tokenLiteral(quote, backslashEscapes) {
                return function(stream, state) {
                    var escaped = false,
                        ch;
                    while ((ch = stream.next()) != null) {
                        if (ch == quote && !escaped) {
                            state.tokenize = tokenBase;
                            break;
                        }
                        escaped =
                            (backslashStringEscapes || backslashEscapes) &&
                            !escaped &&
                            ch == "\\";
                    }
                    return "string";
                };
            }
            function tokenComment(depth) {
                return function(stream, state) {
                    var m = stream.match(/^.*?(\/\*|\*\/)/);
                    if (!m) stream.skipToEnd();
                    else if (m[1] == "/*")
                        state.tokenize = tokenComment(depth + 1);
                    else if (depth > 1)
                        state.tokenize = tokenComment(depth - 1);
                    else state.tokenize = tokenBase;
                    return "comment";
                };
            }

            function pushContext(stream, state, type) {
                state.context = {
                    prev: state.context,
                    indent: stream.indentation(),
                    col: stream.column(),
                    type: type,
                };
            }

            function popContext(state) {
                state.indent = state.context.indent;
                state.context = state.context.prev;
            }

            return {
                startState: function() {
                    return { tokenize: tokenBase, context: null };
                },

                token: function(stream, state) {
                    if (stream.sol()) {
                        if (state.context && state.context.align == null)
                            state.context.align = false;
                    }
                    if (state.tokenize == tokenBase && stream.eatSpace())
                        return null;

                    var style = state.tokenize(stream, state);
                    if (style == "comment") return style;

                    if (state.context && state.context.align == null)
                        state.context.align = true;

                    var tok = stream.current();
                    if (tok == "(") pushContext(stream, state, ")");
                    else if (tok == "[") pushContext(stream, state, "]");
                    else if (state.context && state.context.type == tok)
                        popContext(state);
                    return style;
                },

                indent: function(state, textAfter, iCx) {
                    var cx = state.context;
                    if (!cx) return null;
                    var closing = textAfter.charAt(0) == cx.type;
                    if (cx.align) return cx.col + (closing ? 0 : 1);
                    else return cx.indent + (closing ? 0 : iCx.unit);
                },

                languageData: {
                    commentTokens: {
                        line: support.commentSlashSlash
                            ? "//"
                            : support.commentHash
                                ? "#"
                                : "--",
                        block: { open: "/*", close: "*/" },
                    },
                    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
                },
            };
        }
        // `identifier`
        function hookIdentifier(stream) {
            // MySQL/MariaDB identifiers
            // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
            var ch;
            while ((ch = stream.next()) != null) {
                if (ch == "`" && !stream.eat("`")) return "string.special";
            }
            stream.backUp(stream.current().length - 1);
            return stream.eatWhile(/\w/) ? "string.special" : null;
        }

        // "identifier"
        function hookIdentifierDoublequote(stream) {
            // Standard SQL /SQLite identifiers
            // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier
            // ref: http://sqlite.org/lang_keywords.html
            var ch;
            while ((ch = stream.next()) != null) {
                if (ch == '"' && !stream.eat('"')) return "string.special";
            }
            stream.backUp(stream.current().length - 1);
            return stream.eatWhile(/\w/) ? "string.special" : null;
        }

        // variable token
        function hookVar(stream) {
            // variables
            // @@prefix.varName @varName
            // varName can be quoted with ` or ' or "
            // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html
            if (stream.eat("@")) {
                stream.match("session.");
                stream.match("local.");
                stream.match("global.");
            }

            if (stream.eat("'")) {
                stream.match(/^.*'/);
                return "string.special";
            } else if (stream.eat('"')) {
                stream.match(/^.*"/);
                return "string.special";
            } else if (stream.eat("`")) {
                stream.match(/^.*`/);
                return "string.special";
            } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
                return "string.special";
            }
            return null;
        }
        // short client keyword token
        function hookClient(stream) {
            // \N means NULL
            // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html
            if (stream.eat("N")) {
                return "atom";
            }
            // \g, etc
            // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html
            return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
        }

        // these keywords are used by all SQL dialects (however, a mode can still overwrite it)
        var sqlKeywords =
            "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";

        // turn a space-separated list into an array
        function set(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var defaultBuiltin =
            "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";

        // A generic SQL Mode. It's not a standard, it just try to support what is generally supported
        const standardSQL = sql({
            keywords: set(sqlKeywords + "begin"),
            builtin: set(defaultBuiltin),
            atoms: set("false true null unknown"),
            dateSQL: set("date time timestamp"),
            support: set("ODBCdotTable doubleQuote binaryNumber hexNumber"),
        });

        const msSQL = sql({
            client: set(
                "$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"
            ),
            keywords: set(
                sqlKeywords +
                "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"
            ),
            builtin: set(
                "bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "
            ),
            atoms: set(
                "is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"
            ),
            operatorChars: /^[*+\-%<>!=^\&|\/]/,
            brackets: /^[\{}\(\)]/,
            punctuation: /^[;.,:/]/,
            backslashStringEscapes: false,
            dateSQL: set(
                "date datetimeoffset datetime2 smalldatetime datetime time"
            ),
            hooks: {
                "@": hookVar,
            },
        });

        const mySQL = sql({
            client: set(
                "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"
            ),
            keywords: set(
                sqlKeywords +
                "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"
            ),
            builtin: set(
                "bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"
            ),
            atoms: set("false true null unknown"),
            operatorChars: /^[*+\-%<>!=&|^]/,
            dateSQL: set("date time timestamp"),
            support: set(
                "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"
            ),
            hooks: {
                "@": hookVar,
                "`": hookIdentifier,
                "\\": hookClient,
            },
        });

        const mariaDB = sql({
            client: set(
                "charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"
            ),
            keywords: set(
                sqlKeywords +
                "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"
            ),
            builtin: set(
                "bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"
            ),
            atoms: set("false true null unknown"),
            operatorChars: /^[*+\-%<>!=&|^]/,
            dateSQL: set("date time timestamp"),
            support: set(
                "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"
            ),
            hooks: {
                "@": hookVar,
                "`": hookIdentifier,
                "\\": hookClient,
            },
        });

        // provided by the phpLiteAdmin project - phpliteadmin.org
        const sqlite = sql({
            // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
            client: set(
                "auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"
            ),
            // ref: http://sqlite.org/lang_keywords.html
            keywords: set(
                sqlKeywords +
                "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"
            ),
            // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
            builtin: set(
                "bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"
            ),
            // ref: http://sqlite.org/syntax/literal-value.html
            atoms: set("null current_date current_time current_timestamp"),
            // ref: http://sqlite.org/lang_expr.html#binaryops
            operatorChars: /^[*+\-%<>!=&|/~]/,
            // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
            dateSQL: set("date time timestamp datetime"),
            support: set("decimallessFloat zerolessFloat"),
            identifierQuote: '"', //ref: http://sqlite.org/lang_keywords.html
            hooks: {
                // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
                "@": hookVar,
                ":": hookVar,
                "?": hookVar,
                $: hookVar,
                // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
                '"': hookIdentifierDoublequote,
                // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
                "`": hookIdentifier,
            },
        });

        // the query language used by Apache Cassandra is called CQL, but this mime type
        // is called Cassandra to avoid confusion with Contextual Query Language
        const cassandra = sql({
            client: {},
            keywords: set(
                "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"
            ),
            builtin: set(
                "ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"
            ),
            atoms: set("false true infinity NaN"),
            operatorChars: /^[<>=]/,
            dateSQL: {},
            support: set("commentSlashSlash decimallessFloat"),
            hooks: {},
        });

        // this is based on Peter Raganitsch's 'plsql' mode
        const plSQL = sql({
            client: set(
                "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"
            ),
            keywords: set(
                "abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"
            ),
            builtin: set(
                "abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"
            ),
            operatorChars: /^[*\/+\-%<>!=~]/,
            dateSQL: set("date time timestamp"),
            support: set(
                "doubleQuote nCharCast zerolessFloat binaryNumber hexNumber"
            ),
        });

        // Created to support specific hive keywords
        const hive = sql({
            keywords: set(
                "select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"
            ),
            builtin: set(
                "bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"
            ),
            atoms: set("false true null unknown"),
            operatorChars: /^[*+\-%<>!=]/,
            dateSQL: set("date timestamp"),
            support: set("ODBCdotTable doubleQuote binaryNumber hexNumber"),
        });

        const pgSQL = sql({
            client: set("source"),
            // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
            // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
            keywords: set(
                sqlKeywords +
                "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"
            ),
            // https://www.postgresql.org/docs/11/datatype.html
            builtin: set(
                "bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"
            ),
            atoms: set("false true null unknown"),
            operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
            backslashStringEscapes: false,
            dateSQL: set("date time timestamp"),
            support: set(
                "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant"
            ),
        });

        // Google's SQL-like query language, GQL
        const gql = sql({
            keywords: set(
                "ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"
            ),
            atoms: set("false true"),
            builtin: set(
                "blob datetime first key __key__ string integer double boolean null"
            ),
            operatorChars: /^[*+\-%<>!=]/,
        });

        // Greenplum
        const gpSQL = sql({
            client: set("source"),
            //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
            keywords: set(
                "abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"
            ),
            builtin: set(
                "bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"
            ),
            atoms: set("false true null unknown"),
            operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
            dateSQL: set("date time timestamp"),
            support: set(
                "ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast"
            ),
        });

        // Spark SQL
        const sparkSQL = sql({
            keywords: set(
                "add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"
            ),
            builtin: set(
                "tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"
            ),
            atoms: set("false true null"),
            operatorChars: /^[*\/+\-%<>!=~&|^]/,
            dateSQL: set("date time timestamp"),
            support: set("ODBCdotTable doubleQuote zerolessFloat"),
        });

        // Esper
        const esper = sql({
            client: set("source"),
            // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
            keywords: set(
                "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"
            ),
            builtin: {},
            atoms: set("false true null"),
            operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
            dateSQL: set("time"),
            support: set(
                "decimallessFloat zerolessFloat binaryNumber hexNumber"
            ),
        });

        /*
  How options are used by SQL Mode
  =================================================

  keywords:
    A list of keywords you want to be highlighted.
  builtin:
    A list of builtin types you want to be highlighted (if you want types to be of class "builtin" instead of "keyword").
  operatorChars:
    All characters that must be handled as operators.
  client:
    Commands parsed and executed by the client (not the server).
  support:
    A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.
    * ODBCdotTable: .tableName
    * zerolessFloat: .1
    * doubleQuote
    * nCharCast: N'string'
    * charsetCast: _utf8'string'
    * commentHash: use # char for comments
    * commentSlashSlash: use // for comments
    * commentSpaceRequired: require a space after -- for comments
  atoms:
    Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:
    UNKNOWN, INFINITY, UNDERFLOW, NaN...
  dateSQL:
    Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.
*/
        exports.sql = {
            cassandra,
            esper,
            gpSQL,
            gql,
            hive,
            mariaDB,
            msSQL,
            mySQL,
            pgSQL,
            plSQL,
            sparkSQL,
            sql,
            sqlite,
            standardSQL
        }
    }
    _M70();
    function _M71() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        const spreadsheet = {
            startState: function() {
                return {
                    stringType: null,
                    stack: [],
                };
            },
            token: function(stream, state) {
                if (!stream) return;

                //check for state changes
                if (state.stack.length === 0) {
                    //strings
                    if (stream.peek() == '"' || stream.peek() == "'") {
                        state.stringType = stream.peek();
                        stream.next(); // Skip quote
                        state.stack.unshift("string");
                    }
                }

                //return state
                //stack has
                switch (state.stack[0]) {
                    case "string":
                        while (state.stack[0] === "string" && !stream.eol()) {
                            if (stream.peek() === state.stringType) {
                                stream.next(); // Skip quote
                                state.stack.shift(); // Clear flag
                            } else if (stream.peek() === "\\") {
                                stream.next();
                                stream.next();
                            } else {
                                stream.match(/^.[^\\\"\']*/);
                            }
                        }
                        return "string";

                    case "characterClass":
                        while (
                            state.stack[0] === "characterClass" &&
                            !stream.eol()
                        ) {
                            if (
                                !(
                                    stream.match(/^[^\]\\]+/) ||
                                    stream.match(/^\\./)
                                )
                            )
                                state.stack.shift();
                        }
                        return "operator";
                }

                var peek = stream.peek();

                //no stack
                switch (peek) {
                    case "[":
                        stream.next();
                        state.stack.unshift("characterClass");
                        return "bracket";
                    case ":":
                        stream.next();
                        return "operator";
                    case "\\":
                        if (stream.match(/\\[a-z]+/)) return "string.special";
                        else {
                            stream.next();
                            return "atom";
                        }
                    case ".":
                    case ",":
                    case ";":
                    case "*":
                    case "-":
                    case "+":
                    case "^":
                    case "<":
                    case "/":
                    case "=":
                        stream.next();
                        return "atom";
                    case "$":
                        stream.next();
                        return "builtin";
                }

                if (stream.match(/\d+/)) {
                    if (stream.match(/^\w+/)) return "error";
                    return "number";
                } else if (stream.match(/^[a-zA-Z_]\w*/)) {
                    if (stream.match(/(?=[\(.])/, false)) return "keyword";
                    return "variable";
                } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
                    stream.next();
                    return "bracket";
                } else if (!stream.eatSpace()) {
                    stream.next();
                }
                return null;
            },
        };

        exports.spreadsheet = spreadsheet;
    }
    _M71();
    function _M72() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var curPunc;

        function wordRegexp(words) {
            return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }
        var ops = wordRegexp([
            "str",
            "lang",
            "langmatches",
            "datatype",
            "bound",
            "sameterm",
            "isiri",
            "isuri",
            "iri",
            "uri",
            "bnode",
            "count",
            "sum",
            "min",
            "max",
            "avg",
            "sample",
            "group_concat",
            "rand",
            "abs",
            "ceil",
            "floor",
            "round",
            "concat",
            "substr",
            "strlen",
            "replace",
            "ucase",
            "lcase",
            "encode_for_uri",
            "contains",
            "strstarts",
            "strends",
            "strbefore",
            "strafter",
            "year",
            "month",
            "day",
            "hours",
            "minutes",
            "seconds",
            "timezone",
            "tz",
            "now",
            "uuid",
            "struuid",
            "md5",
            "sha1",
            "sha256",
            "sha384",
            "sha512",
            "coalesce",
            "if",
            "strlang",
            "strdt",
            "isnumeric",
            "regex",
            "exists",
            "isblank",
            "isliteral",
            "a",
            "bind",
        ]);
        var keywords = wordRegexp([
            "base",
            "prefix",
            "select",
            "distinct",
            "reduced",
            "construct",
            "describe",
            "ask",
            "from",
            "named",
            "where",
            "order",
            "limit",
            "offset",
            "filter",
            "optional",
            "graph",
            "by",
            "asc",
            "desc",
            "as",
            "having",
            "undef",
            "values",
            "group",
            "minus",
            "in",
            "not",
            "service",
            "silent",
            "using",
            "insert",
            "delete",
            "union",
            "true",
            "false",
            "with",
            "data",
            "copy",
            "to",
            "move",
            "add",
            "create",
            "drop",
            "clear",
            "load",
        ]);
        var operatorChars = /[*+\-<>=&|\^\/!\?]/;

        function tokenBase(stream, state) {
            var ch = stream.next();
            curPunc = null;
            if (ch == "$" || ch == "?") {
                if (ch == "?" && stream.match(/\s/, false)) {
                    return "operator";
                }
                stream.match(
                    /^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/
                );
                return "variableName.local";
            } else if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
                stream.match(/^[^\s\u00a0>]*>?/);
                return "atom";
            } else if (ch == '"' || ch == "'") {
                state.tokenize = tokenLiteral(ch);
                return state.tokenize(stream, state);
            } else if (/[{}\(\),\.;\[\]]/.test(ch)) {
                curPunc = ch;
                return "bracket";
            } else if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            } else if (operatorChars.test(ch)) {
                return "operator";
            } else if (ch == ":") {
                eatPnLocal(stream);
                return "atom";
            } else if (ch == "@") {
                stream.eatWhile(/[a-z\d\-]/i);
                return "meta";
            } else {
                stream.eatWhile(/[_\w\d]/);
                if (stream.eat(":")) {
                    eatPnLocal(stream);
                    return "atom";
                }
                var word = stream.current();
                if (ops.test(word)) return "builtin";
                else if (keywords.test(word)) return "keyword";
                else return "variable";
            }
        }

        function eatPnLocal(stream) {
            stream.match(
                /(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i
            );
        }

        function tokenLiteral(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    escaped = !escaped && ch == "\\";
                }
                return "string";
            };
        }

        function pushContext(state, type, col) {
            state.context = {
                prev: state.context,
                indent: state.indent,
                col: col,
                type: type,
            };
        }
        function popContext(state) {
            state.indent = state.context.indent;
            state.context = state.context.prev;
        }

        const sparql = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    context: null,
                    indent: 0,
                    col: 0,
                };
            },

            token: function(stream, state) {
                if (stream.sol()) {
                    if (state.context && state.context.align == null)
                        state.context.align = false;
                    state.indent = stream.indentation();
                }
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);

                if (
                    style != "comment" &&
                    state.context &&
                    state.context.align == null &&
                    state.context.type != "pattern"
                ) {
                    state.context.align = true;
                }

                if (curPunc == "(") pushContext(state, ")", stream.column());
                else if (curPunc == "[")
                    pushContext(state, "]", stream.column());
                else if (curPunc == "{")
                    pushContext(state, "}", stream.column());
                else if (/[\]\}\)]/.test(curPunc)) {
                    while (state.context && state.context.type == "pattern")
                        popContext(state);
                    if (state.context && curPunc == state.context.type) {
                        popContext(state);
                        if (
                            curPunc == "}" &&
                            state.context &&
                            state.context.type == "pattern"
                        )
                            popContext(state);
                    }
                } else if (
                    curPunc == "." &&
                    state.context &&
                    state.context.type == "pattern"
                )
                    popContext(state);
                else if (/atom|string|variable/.test(style) && state.context) {
                    if (/[\}\]]/.test(state.context.type))
                        pushContext(state, "pattern", stream.column());
                    else if (
                        state.context.type == "pattern" &&
                        !state.context.align
                    ) {
                        state.context.align = true;
                        state.context.col = stream.column();
                    }
                }

                return style;
            },

            indent: function(state, textAfter, cx) {
                var firstChar = textAfter && textAfter.charAt(0);
                var context = state.context;
                if (/[\]\}]/.test(firstChar))
                    while (context && context.type == "pattern")
                        context = context.prev;

                var closing = context && firstChar == context.type;
                if (!context) return 0;
                else if (context.type == "pattern") return context.col;
                else if (context.align) return context.col + (closing ? 0 : 1);
                else return context.indent + (closing ? 0 : cx.unit);
            },

            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.sparql = sparql;
    }
    _M72();
    function _M73() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkStex(mathMode) {
            function pushCommand(state, command) {
                state.cmdState.push(command);
            }

            function peekCommand(state) {
                if (state.cmdState.length > 0) {
                    return state.cmdState[state.cmdState.length - 1];
                } else {
                    return null;
                }
            }

            function popCommand(state) {
                var plug = state.cmdState.pop();
                if (plug) {
                    plug.closeBracket();
                }
            }

            // returns the non-default plugin closest to the end of the list
            function getMostPowerful(state) {
                var context = state.cmdState;
                for (var i = context.length - 1; i >= 0; i--) {
                    var plug = context[i];
                    if (plug.name == "DEFAULT") {
                        continue;
                    }
                    return plug;
                }
                return {
                    styleIdentifier: function() {
                        return null;
                    },
                };
            }

            function addPluginPattern(pluginName, cmdStyle, styles) {
                return function() {
                    this.name = pluginName;
                    this.bracketNo = 0;
                    this.style = cmdStyle;
                    this.styles = styles;
                    this.argument = null; // \begin and \end have arguments that follow. These are stored in the plugin

                    this.styleIdentifier = function() {
                        return this.styles[this.bracketNo - 1] || null;
                    };
                    this.openBracket = function() {
                        this.bracketNo++;
                        return "bracket";
                    };
                    this.closeBracket = function() { };
                };
            }

            var plugins = {};

            plugins["importmodule"] = addPluginPattern("importmodule", "tag", [
                "string",
                "builtin",
            ]);
            plugins["documentclass"] = addPluginPattern(
                "documentclass",
                "tag",
                ["", "atom"]
            );
            plugins["usepackage"] = addPluginPattern("usepackage", "tag", [
                "atom",
            ]);
            plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
            plugins["end"] = addPluginPattern("end", "tag", ["atom"]);

            plugins["label"] = addPluginPattern("label", "tag", ["atom"]);
            plugins["ref"] = addPluginPattern("ref", "tag", ["atom"]);
            plugins["eqref"] = addPluginPattern("eqref", "tag", ["atom"]);
            plugins["cite"] = addPluginPattern("cite", "tag", ["atom"]);
            plugins["bibitem"] = addPluginPattern("bibitem", "tag", ["atom"]);
            plugins["Bibitem"] = addPluginPattern("Bibitem", "tag", ["atom"]);
            plugins["RBibitem"] = addPluginPattern("RBibitem", "tag", ["atom"]);

            plugins["DEFAULT"] = function() {
                this.name = "DEFAULT";
                this.style = "tag";

                this.styleIdentifier =
                    this.openBracket =
                    this.closeBracket =
                    function() { };
            };

            function setState(state, f) {
                state.f = f;
            }

            // called when in a normal (no environment) context
            function normal(source, state) {
                var plug;
                // Do we look like '\command' ?  If so, attempt to apply the plugin 'command'
                if (source.match(/^\\[a-zA-Z@]+/)) {
                    var cmdName = source.current().slice(1);
                    plug = plugins.hasOwnProperty(cmdName)
                        ? plugins[cmdName]
                        : plugins["DEFAULT"];
                    plug = new plug();
                    pushCommand(state, plug);
                    setState(state, beginParams);
                    return plug.style;
                }

                // escape characters
                if (source.match(/^\\[$&%#{}_]/)) {
                    return "tag";
                }

                // white space control characters
                if (source.match(/^\\[,;!\/\\]/)) {
                    return "tag";
                }

                // find if we're starting various math modes
                if (source.match("\\[")) {
                    setState(state, function(source, state) {
                        return inMathMode(source, state, "\\]");
                    });
                    return "keyword";
                }
                if (source.match("\\(")) {
                    setState(state, function(source, state) {
                        return inMathMode(source, state, "\\)");
                    });
                    return "keyword";
                }
                if (source.match("$$")) {
                    setState(state, function(source, state) {
                        return inMathMode(source, state, "$$");
                    });
                    return "keyword";
                }
                if (source.match("$")) {
                    setState(state, function(source, state) {
                        return inMathMode(source, state, "$");
                    });
                    return "keyword";
                }

                var ch = source.next();
                if (ch == "%") {
                    source.skipToEnd();
                    return "comment";
                } else if (ch == "}" || ch == "]") {
                    plug = peekCommand(state);
                    if (plug) {
                        plug.closeBracket(ch);
                        setState(state, beginParams);
                    } else {
                        return "error";
                    }
                    return "bracket";
                } else if (ch == "{" || ch == "[") {
                    plug = plugins["DEFAULT"];
                    plug = new plug();
                    pushCommand(state, plug);
                    return "bracket";
                } else if (/\d/.test(ch)) {
                    source.eatWhile(/[\w.%]/);
                    return "atom";
                } else {
                    source.eatWhile(/[\w\-_]/);
                    plug = getMostPowerful(state);
                    if (plug.name == "begin") {
                        plug.argument = source.current();
                    }
                    return plug.styleIdentifier();
                }
            }

            function inMathMode(source, state, endModeSeq) {
                if (source.eatSpace()) {
                    return null;
                }
                if (endModeSeq && source.match(endModeSeq)) {
                    setState(state, normal);
                    return "keyword";
                }
                if (source.match(/^\\[a-zA-Z@]+/)) {
                    return "tag";
                }
                if (source.match(/^[a-zA-Z]+/)) {
                    return "variableName.special";
                }
                // escape characters
                if (source.match(/^\\[$&%#{}_]/)) {
                    return "tag";
                }
                // white space control characters
                if (source.match(/^\\[,;!\/]/)) {
                    return "tag";
                }
                // special math-mode characters
                if (source.match(/^[\^_&]/)) {
                    return "tag";
                }
                // non-special characters
                if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
                    return null;
                }
                if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
                    return "number";
                }
                var ch = source.next();
                if (
                    ch == "{" ||
                    ch == "}" ||
                    ch == "[" ||
                    ch == "]" ||
                    ch == "(" ||
                    ch == ")"
                ) {
                    return "bracket";
                }

                if (ch == "%") {
                    source.skipToEnd();
                    return "comment";
                }
                return "error";
            }

            function beginParams(source, state) {
                var ch = source.peek(),
                    lastPlug;
                if (ch == "{" || ch == "[") {
                    lastPlug = peekCommand(state);
                    lastPlug.openBracket(ch);
                    source.eat(ch);
                    setState(state, normal);
                    return "bracket";
                }
                if (/[ \t\r]/.test(ch)) {
                    source.eat(ch);
                    return null;
                }
                setState(state, normal);
                popCommand(state);

                return normal(source, state);
            }

            return {
                startState: function() {
                    var f = mathMode
                        ? function(source, state) {
                            return inMathMode(source, state);
                        }
                        : normal;
                    return {
                        cmdState: [],
                        f: f,
                    };
                },
                copyState: function(s) {
                    return {
                        cmdState: s.cmdState.slice(),
                        f: s.f,
                    };
                },
                token: function(stream, state) {
                    return state.f(stream, state);
                },
                blankLine: function(state) {
                    state.f = normal;
                    state.cmdState.length = 0;
                },
                languageData: {
                    commentTokens: { line: "%" },
                },
            };
        }
        const stex = mkStex(false);
        const stexMath = mkStex(true);

        exports.stex = stex;
        exports.stexMath = stexMath;
    }
    _M73();
    function _M74() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // developer.mozilla.org/en-US/docs/Web/HTML/Element
        var tagKeywords_ = [
            "a",
            "abbr",
            "address",
            "area",
            "article",
            "aside",
            "audio",
            "b",
            "base",
            "bdi",
            "bdo",
            "bgsound",
            "blockquote",
            "body",
            "br",
            "button",
            "canvas",
            "caption",
            "cite",
            "code",
            "col",
            "colgroup",
            "data",
            "datalist",
            "dd",
            "del",
            "details",
            "dfn",
            "div",
            "dl",
            "dt",
            "em",
            "embed",
            "fieldset",
            "figcaption",
            "figure",
            "footer",
            "form",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "head",
            "header",
            "hgroup",
            "hr",
            "html",
            "i",
            "iframe",
            "img",
            "input",
            "ins",
            "kbd",
            "keygen",
            "label",
            "legend",
            "li",
            "link",
            "main",
            "map",
            "mark",
            "marquee",
            "menu",
            "menuitem",
            "meta",
            "meter",
            "nav",
            "nobr",
            "noframes",
            "noscript",
            "object",
            "ol",
            "optgroup",
            "option",
            "output",
            "p",
            "param",
            "pre",
            "progress",
            "q",
            "rp",
            "rt",
            "ruby",
            "s",
            "samp",
            "script",
            "section",
            "select",
            "small",
            "source",
            "span",
            "strong",
            "style",
            "sub",
            "summary",
            "sup",
            "table",
            "tbody",
            "td",
            "textarea",
            "tfoot",
            "th",
            "thead",
            "time",
            "tr",
            "track",
            "u",
            "ul",
            "var",
            "video",
        ];

        // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js
        // Note, "url-prefix" should precede "url" in order to match correctly in documentTypesRegexp
        var documentTypes_ = ["domain", "regexp", "url-prefix", "url"];
        var mediaTypes_ = [
            "all",
            "aural",
            "braille",
            "handheld",
            "print",
            "projection",
            "screen",
            "tty",
            "tv",
            "embossed",
        ];
        var mediaFeatures_ = [
            "width",
            "min-width",
            "max-width",
            "height",
            "min-height",
            "max-height",
            "device-width",
            "min-device-width",
            "max-device-width",
            "device-height",
            "min-device-height",
            "max-device-height",
            "aspect-ratio",
            "min-aspect-ratio",
            "max-aspect-ratio",
            "device-aspect-ratio",
            "min-device-aspect-ratio",
            "max-device-aspect-ratio",
            "color",
            "min-color",
            "max-color",
            "color-index",
            "min-color-index",
            "max-color-index",
            "monochrome",
            "min-monochrome",
            "max-monochrome",
            "resolution",
            "min-resolution",
            "max-resolution",
            "scan",
            "grid",
            "dynamic-range",
            "video-dynamic-range",
        ];
        var propertyKeywords_ = [
            "align-content",
            "align-items",
            "align-self",
            "alignment-adjust",
            "alignment-baseline",
            "anchor-point",
            "animation",
            "animation-delay",
            "animation-direction",
            "animation-duration",
            "animation-fill-mode",
            "animation-iteration-count",
            "animation-name",
            "animation-play-state",
            "animation-timing-function",
            "appearance",
            "azimuth",
            "backface-visibility",
            "background",
            "background-attachment",
            "background-clip",
            "background-color",
            "background-image",
            "background-origin",
            "background-position",
            "background-repeat",
            "background-size",
            "baseline-shift",
            "binding",
            "bleed",
            "bookmark-label",
            "bookmark-level",
            "bookmark-state",
            "bookmark-target",
            "border",
            "border-bottom",
            "border-bottom-color",
            "border-bottom-left-radius",
            "border-bottom-right-radius",
            "border-bottom-style",
            "border-bottom-width",
            "border-collapse",
            "border-color",
            "border-image",
            "border-image-outset",
            "border-image-repeat",
            "border-image-slice",
            "border-image-source",
            "border-image-width",
            "border-left",
            "border-left-color",
            "border-left-style",
            "border-left-width",
            "border-radius",
            "border-right",
            "border-right-color",
            "border-right-style",
            "border-right-width",
            "border-spacing",
            "border-style",
            "border-top",
            "border-top-color",
            "border-top-left-radius",
            "border-top-right-radius",
            "border-top-style",
            "border-top-width",
            "border-width",
            "bottom",
            "box-decoration-break",
            "box-shadow",
            "box-sizing",
            "break-after",
            "break-before",
            "break-inside",
            "caption-side",
            "clear",
            "clip",
            "color",
            "color-profile",
            "column-count",
            "column-fill",
            "column-gap",
            "column-rule",
            "column-rule-color",
            "column-rule-style",
            "column-rule-width",
            "column-span",
            "column-width",
            "columns",
            "content",
            "counter-increment",
            "counter-reset",
            "crop",
            "cue",
            "cue-after",
            "cue-before",
            "cursor",
            "direction",
            "display",
            "dominant-baseline",
            "drop-initial-after-adjust",
            "drop-initial-after-align",
            "drop-initial-before-adjust",
            "drop-initial-before-align",
            "drop-initial-size",
            "drop-initial-value",
            "elevation",
            "empty-cells",
            "fit",
            "fit-position",
            "flex",
            "flex-basis",
            "flex-direction",
            "flex-flow",
            "flex-grow",
            "flex-shrink",
            "flex-wrap",
            "float",
            "float-offset",
            "flow-from",
            "flow-into",
            "font",
            "font-feature-settings",
            "font-family",
            "font-kerning",
            "font-language-override",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-synthesis",
            "font-variant",
            "font-variant-alternates",
            "font-variant-caps",
            "font-variant-east-asian",
            "font-variant-ligatures",
            "font-variant-numeric",
            "font-variant-position",
            "font-weight",
            "grid",
            "grid-area",
            "grid-auto-columns",
            "grid-auto-flow",
            "grid-auto-position",
            "grid-auto-rows",
            "grid-column",
            "grid-column-end",
            "grid-column-start",
            "grid-row",
            "grid-row-end",
            "grid-row-start",
            "grid-template",
            "grid-template-areas",
            "grid-template-columns",
            "grid-template-rows",
            "hanging-punctuation",
            "height",
            "hyphens",
            "icon",
            "image-orientation",
            "image-rendering",
            "image-resolution",
            "inline-box-align",
            "justify-content",
            "left",
            "letter-spacing",
            "line-break",
            "line-height",
            "line-stacking",
            "line-stacking-ruby",
            "line-stacking-shift",
            "line-stacking-strategy",
            "list-style",
            "list-style-image",
            "list-style-position",
            "list-style-type",
            "margin",
            "margin-bottom",
            "margin-left",
            "margin-right",
            "margin-top",
            "marker-offset",
            "marks",
            "marquee-direction",
            "marquee-loop",
            "marquee-play-count",
            "marquee-speed",
            "marquee-style",
            "max-height",
            "max-width",
            "min-height",
            "min-width",
            "move-to",
            "nav-down",
            "nav-index",
            "nav-left",
            "nav-right",
            "nav-up",
            "object-fit",
            "object-position",
            "opacity",
            "order",
            "orphans",
            "outline",
            "outline-color",
            "outline-offset",
            "outline-style",
            "outline-width",
            "overflow",
            "overflow-style",
            "overflow-wrap",
            "overflow-x",
            "overflow-y",
            "padding",
            "padding-bottom",
            "padding-left",
            "padding-right",
            "padding-top",
            "page",
            "page-break-after",
            "page-break-before",
            "page-break-inside",
            "page-policy",
            "pause",
            "pause-after",
            "pause-before",
            "perspective",
            "perspective-origin",
            "pitch",
            "pitch-range",
            "play-during",
            "position",
            "presentation-level",
            "punctuation-trim",
            "quotes",
            "region-break-after",
            "region-break-before",
            "region-break-inside",
            "region-fragment",
            "rendering-intent",
            "resize",
            "rest",
            "rest-after",
            "rest-before",
            "richness",
            "right",
            "rotation",
            "rotation-point",
            "ruby-align",
            "ruby-overhang",
            "ruby-position",
            "ruby-span",
            "shape-image-threshold",
            "shape-inside",
            "shape-margin",
            "shape-outside",
            "size",
            "speak",
            "speak-as",
            "speak-header",
            "speak-numeral",
            "speak-punctuation",
            "speech-rate",
            "stress",
            "string-set",
            "tab-size",
            "table-layout",
            "target",
            "target-name",
            "target-new",
            "target-position",
            "text-align",
            "text-align-last",
            "text-decoration",
            "text-decoration-color",
            "text-decoration-line",
            "text-decoration-skip",
            "text-decoration-style",
            "text-emphasis",
            "text-emphasis-color",
            "text-emphasis-position",
            "text-emphasis-style",
            "text-height",
            "text-indent",
            "text-justify",
            "text-outline",
            "text-overflow",
            "text-shadow",
            "text-size-adjust",
            "text-space-collapse",
            "text-transform",
            "text-underline-position",
            "text-wrap",
            "top",
            "transform",
            "transform-origin",
            "transform-style",
            "transition",
            "transition-delay",
            "transition-duration",
            "transition-property",
            "transition-timing-function",
            "unicode-bidi",
            "vertical-align",
            "visibility",
            "voice-balance",
            "voice-duration",
            "voice-family",
            "voice-pitch",
            "voice-range",
            "voice-rate",
            "voice-stress",
            "voice-volume",
            "volume",
            "white-space",
            "widows",
            "width",
            "will-change",
            "word-break",
            "word-spacing",
            "word-wrap",
            "z-index",
            "clip-path",
            "clip-rule",
            "mask",
            "enable-background",
            "filter",
            "flood-color",
            "flood-opacity",
            "lighting-color",
            "stop-color",
            "stop-opacity",
            "pointer-events",
            "color-interpolation",
            "color-interpolation-filters",
            "color-rendering",
            "fill",
            "fill-opacity",
            "fill-rule",
            "image-rendering",
            "marker",
            "marker-end",
            "marker-mid",
            "marker-start",
            "shape-rendering",
            "stroke",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-rendering",
            "baseline-shift",
            "dominant-baseline",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "text-anchor",
            "writing-mode",
            "font-smoothing",
            "osx-font-smoothing",
        ];
        var nonStandardPropertyKeywords_ = [
            "scrollbar-arrow-color",
            "scrollbar-base-color",
            "scrollbar-dark-shadow-color",
            "scrollbar-face-color",
            "scrollbar-highlight-color",
            "scrollbar-shadow-color",
            "scrollbar-3d-light-color",
            "scrollbar-track-color",
            "shape-inside",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "zoom",
        ];
        var fontProperties_ = [
            "font-family",
            "src",
            "unicode-range",
            "font-variant",
            "font-feature-settings",
            "font-stretch",
            "font-weight",
            "font-style",
        ];
        var colorKeywords_ = [
            "aliceblue",
            "antiquewhite",
            "aqua",
            "aquamarine",
            "azure",
            "beige",
            "bisque",
            "black",
            "blanchedalmond",
            "blue",
            "blueviolet",
            "brown",
            "burlywood",
            "cadetblue",
            "chartreuse",
            "chocolate",
            "coral",
            "cornflowerblue",
            "cornsilk",
            "crimson",
            "cyan",
            "darkblue",
            "darkcyan",
            "darkgoldenrod",
            "darkgray",
            "darkgreen",
            "darkkhaki",
            "darkmagenta",
            "darkolivegreen",
            "darkorange",
            "darkorchid",
            "darkred",
            "darksalmon",
            "darkseagreen",
            "darkslateblue",
            "darkslategray",
            "darkturquoise",
            "darkviolet",
            "deeppink",
            "deepskyblue",
            "dimgray",
            "dodgerblue",
            "firebrick",
            "floralwhite",
            "forestgreen",
            "fuchsia",
            "gainsboro",
            "ghostwhite",
            "gold",
            "goldenrod",
            "gray",
            "grey",
            "green",
            "greenyellow",
            "honeydew",
            "hotpink",
            "indianred",
            "indigo",
            "ivory",
            "khaki",
            "lavender",
            "lavenderblush",
            "lawngreen",
            "lemonchiffon",
            "lightblue",
            "lightcoral",
            "lightcyan",
            "lightgoldenrodyellow",
            "lightgray",
            "lightgreen",
            "lightpink",
            "lightsalmon",
            "lightseagreen",
            "lightskyblue",
            "lightslategray",
            "lightsteelblue",
            "lightyellow",
            "lime",
            "limegreen",
            "linen",
            "magenta",
            "maroon",
            "mediumaquamarine",
            "mediumblue",
            "mediumorchid",
            "mediumpurple",
            "mediumseagreen",
            "mediumslateblue",
            "mediumspringgreen",
            "mediumturquoise",
            "mediumvioletred",
            "midnightblue",
            "mintcream",
            "mistyrose",
            "moccasin",
            "navajowhite",
            "navy",
            "oldlace",
            "olive",
            "olivedrab",
            "orange",
            "orangered",
            "orchid",
            "palegoldenrod",
            "palegreen",
            "paleturquoise",
            "palevioletred",
            "papayawhip",
            "peachpuff",
            "peru",
            "pink",
            "plum",
            "powderblue",
            "purple",
            "rebeccapurple",
            "red",
            "rosybrown",
            "royalblue",
            "saddlebrown",
            "salmon",
            "sandybrown",
            "seagreen",
            "seashell",
            "sienna",
            "silver",
            "skyblue",
            "slateblue",
            "slategray",
            "snow",
            "springgreen",
            "steelblue",
            "tan",
            "teal",
            "thistle",
            "tomato",
            "turquoise",
            "violet",
            "wheat",
            "white",
            "whitesmoke",
            "yellow",
            "yellowgreen",
        ];
        var valueKeywords_ = [
            "above",
            "absolute",
            "activeborder",
            "additive",
            "activecaption",
            "afar",
            "after-white-space",
            "ahead",
            "alias",
            "all",
            "all-scroll",
            "alphabetic",
            "alternate",
            "always",
            "amharic",
            "amharic-abegede",
            "antialiased",
            "appworkspace",
            "arabic-indic",
            "armenian",
            "asterisks",
            "attr",
            "auto",
            "avoid",
            "avoid-column",
            "avoid-page",
            "avoid-region",
            "background",
            "backwards",
            "baseline",
            "below",
            "bidi-override",
            "binary",
            "bengali",
            "blink",
            "block",
            "block-axis",
            "bold",
            "bolder",
            "border",
            "border-box",
            "both",
            "bottom",
            "break",
            "break-all",
            "break-word",
            "bullets",
            "button",
            "buttonface",
            "buttonhighlight",
            "buttonshadow",
            "buttontext",
            "calc",
            "cambodian",
            "capitalize",
            "caps-lock-indicator",
            "caption",
            "captiontext",
            "caret",
            "cell",
            "center",
            "checkbox",
            "circle",
            "cjk-decimal",
            "cjk-earthly-branch",
            "cjk-heavenly-stem",
            "cjk-ideographic",
            "clear",
            "clip",
            "close-quote",
            "col-resize",
            "collapse",
            "column",
            "compact",
            "condensed",
            "conic-gradient",
            "contain",
            "content",
            "contents",
            "content-box",
            "context-menu",
            "continuous",
            "copy",
            "counter",
            "counters",
            "cover",
            "crop",
            "cross",
            "crosshair",
            "currentcolor",
            "cursive",
            "cyclic",
            "dashed",
            "decimal",
            "decimal-leading-zero",
            "default",
            "default-button",
            "destination-atop",
            "destination-in",
            "destination-out",
            "destination-over",
            "devanagari",
            "disc",
            "discard",
            "disclosure-closed",
            "disclosure-open",
            "document",
            "dot-dash",
            "dot-dot-dash",
            "dotted",
            "double",
            "down",
            "e-resize",
            "ease",
            "ease-in",
            "ease-in-out",
            "ease-out",
            "element",
            "ellipse",
            "ellipsis",
            "embed",
            "end",
            "ethiopic",
            "ethiopic-abegede",
            "ethiopic-abegede-am-et",
            "ethiopic-abegede-gez",
            "ethiopic-abegede-ti-er",
            "ethiopic-abegede-ti-et",
            "ethiopic-halehame-aa-er",
            "ethiopic-halehame-aa-et",
            "ethiopic-halehame-am-et",
            "ethiopic-halehame-gez",
            "ethiopic-halehame-om-et",
            "ethiopic-halehame-sid-et",
            "ethiopic-halehame-so-et",
            "ethiopic-halehame-ti-er",
            "ethiopic-halehame-ti-et",
            "ethiopic-halehame-tig",
            "ethiopic-numeric",
            "ew-resize",
            "expanded",
            "extends",
            "extra-condensed",
            "extra-expanded",
            "fantasy",
            "fast",
            "fill",
            "fixed",
            "flat",
            "flex",
            "footnotes",
            "forwards",
            "from",
            "geometricPrecision",
            "georgian",
            "graytext",
            "groove",
            "gujarati",
            "gurmukhi",
            "hand",
            "hangul",
            "hangul-consonant",
            "hebrew",
            "help",
            "hidden",
            "hide",
            "high",
            "higher",
            "highlight",
            "highlighttext",
            "hiragana",
            "hiragana-iroha",
            "horizontal",
            "hsl",
            "hsla",
            "icon",
            "ignore",
            "inactiveborder",
            "inactivecaption",
            "inactivecaptiontext",
            "infinite",
            "infobackground",
            "infotext",
            "inherit",
            "initial",
            "inline",
            "inline-axis",
            "inline-block",
            "inline-flex",
            "inline-table",
            "inset",
            "inside",
            "intrinsic",
            "invert",
            "italic",
            "japanese-formal",
            "japanese-informal",
            "justify",
            "kannada",
            "katakana",
            "katakana-iroha",
            "keep-all",
            "khmer",
            "korean-hangul-formal",
            "korean-hanja-formal",
            "korean-hanja-informal",
            "landscape",
            "lao",
            "large",
            "larger",
            "left",
            "level",
            "lighter",
            "line-through",
            "linear",
            "linear-gradient",
            "lines",
            "list-item",
            "listbox",
            "listitem",
            "local",
            "logical",
            "loud",
            "lower",
            "lower-alpha",
            "lower-armenian",
            "lower-greek",
            "lower-hexadecimal",
            "lower-latin",
            "lower-norwegian",
            "lower-roman",
            "lowercase",
            "ltr",
            "malayalam",
            "match",
            "matrix",
            "matrix3d",
            "media-play-button",
            "media-slider",
            "media-sliderthumb",
            "media-volume-slider",
            "media-volume-sliderthumb",
            "medium",
            "menu",
            "menulist",
            "menulist-button",
            "menutext",
            "message-box",
            "middle",
            "min-intrinsic",
            "mix",
            "mongolian",
            "monospace",
            "move",
            "multiple",
            "myanmar",
            "n-resize",
            "narrower",
            "ne-resize",
            "nesw-resize",
            "no-close-quote",
            "no-drop",
            "no-open-quote",
            "no-repeat",
            "none",
            "normal",
            "not-allowed",
            "nowrap",
            "ns-resize",
            "numbers",
            "numeric",
            "nw-resize",
            "nwse-resize",
            "oblique",
            "octal",
            "open-quote",
            "optimizeLegibility",
            "optimizeSpeed",
            "oriya",
            "oromo",
            "outset",
            "outside",
            "outside-shape",
            "overlay",
            "overline",
            "padding",
            "padding-box",
            "painted",
            "page",
            "paused",
            "persian",
            "perspective",
            "plus-darker",
            "plus-lighter",
            "pointer",
            "polygon",
            "portrait",
            "pre",
            "pre-line",
            "pre-wrap",
            "preserve-3d",
            "progress",
            "push-button",
            "radial-gradient",
            "radio",
            "read-only",
            "read-write",
            "read-write-plaintext-only",
            "rectangle",
            "region",
            "relative",
            "repeat",
            "repeating-linear-gradient",
            "repeating-radial-gradient",
            "repeating-conic-gradient",
            "repeat-x",
            "repeat-y",
            "reset",
            "reverse",
            "rgb",
            "rgba",
            "ridge",
            "right",
            "rotate",
            "rotate3d",
            "rotateX",
            "rotateY",
            "rotateZ",
            "round",
            "row-resize",
            "rtl",
            "run-in",
            "running",
            "s-resize",
            "sans-serif",
            "scale",
            "scale3d",
            "scaleX",
            "scaleY",
            "scaleZ",
            "scroll",
            "scrollbar",
            "scroll-position",
            "se-resize",
            "searchfield",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "semi-condensed",
            "semi-expanded",
            "separate",
            "serif",
            "show",
            "sidama",
            "simp-chinese-formal",
            "simp-chinese-informal",
            "single",
            "skew",
            "skewX",
            "skewY",
            "skip-white-space",
            "slide",
            "slider-horizontal",
            "slider-vertical",
            "sliderthumb-horizontal",
            "sliderthumb-vertical",
            "slow",
            "small",
            "small-caps",
            "small-caption",
            "smaller",
            "solid",
            "somali",
            "source-atop",
            "source-in",
            "source-out",
            "source-over",
            "space",
            "spell-out",
            "square",
            "square-button",
            "standard",
            "start",
            "static",
            "status-bar",
            "stretch",
            "stroke",
            "sub",
            "subpixel-antialiased",
            "super",
            "sw-resize",
            "symbolic",
            "symbols",
            "table",
            "table-caption",
            "table-cell",
            "table-column",
            "table-column-group",
            "table-footer-group",
            "table-header-group",
            "table-row",
            "table-row-group",
            "tamil",
            "telugu",
            "text",
            "text-bottom",
            "text-top",
            "textarea",
            "textfield",
            "thai",
            "thick",
            "thin",
            "threeddarkshadow",
            "threedface",
            "threedhighlight",
            "threedlightshadow",
            "threedshadow",
            "tibetan",
            "tigre",
            "tigrinya-er",
            "tigrinya-er-abegede",
            "tigrinya-et",
            "tigrinya-et-abegede",
            "to",
            "top",
            "trad-chinese-formal",
            "trad-chinese-informal",
            "translate",
            "translate3d",
            "translateX",
            "translateY",
            "translateZ",
            "transparent",
            "ultra-condensed",
            "ultra-expanded",
            "underline",
            "up",
            "upper-alpha",
            "upper-armenian",
            "upper-greek",
            "upper-hexadecimal",
            "upper-latin",
            "upper-norwegian",
            "upper-roman",
            "uppercase",
            "urdu",
            "url",
            "var",
            "vertical",
            "vertical-text",
            "visible",
            "visibleFill",
            "visiblePainted",
            "visibleStroke",
            "visual",
            "w-resize",
            "wait",
            "wave",
            "wider",
            "window",
            "windowframe",
            "windowtext",
            "words",
            "x-large",
            "x-small",
            "xor",
            "xx-large",
            "xx-small",
            "bicubic",
            "optimizespeed",
            "grayscale",
            "row",
            "row-reverse",
            "wrap",
            "wrap-reverse",
            "column-reverse",
            "flex-start",
            "flex-end",
            "space-between",
            "space-around",
            "unset",
        ];

        var wordOperatorKeywords_ = [
            "in",
            "and",
            "or",
            "not",
            "is not",
            "is a",
            "is",
            "isnt",
            "defined",
            "if unless",
        ],
            blockKeywords_ = ["for", "if", "else", "unless", "from", "to"],
            commonAtoms_ = [
                "null",
                "true",
                "false",
                "href",
                "title",
                "type",
                "not-allowed",
                "readonly",
                "disabled",
            ],
            commonDef_ = [
                "@font-face",
                "@keyframes",
                "@media",
                "@viewport",
                "@page",
                "@host",
                "@supports",
                "@block",
                "@css",
            ];

        var hintWords = tagKeywords_.concat(
            documentTypes_,
            mediaTypes_,
            mediaFeatures_,
            propertyKeywords_,
            nonStandardPropertyKeywords_,
            colorKeywords_,
            valueKeywords_,
            fontProperties_,
            wordOperatorKeywords_,
            blockKeywords_,
            commonAtoms_,
            commonDef_
        );

        function wordRegexp(words) {
            words = words.sort(function(a, b) {
                return b > a;
            });
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }

        function keySet(array) {
            var keys = {};
            for (var i = 0; i < array.length; ++i) keys[array[i]] = true;
            return keys;
        }

        function escapeRegExp(text) {
            return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        }

        var tagKeywords = keySet(tagKeywords_),
            tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,
            propertyKeywords = keySet(propertyKeywords_),
            nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),
            valueKeywords = keySet(valueKeywords_),
            colorKeywords = keySet(colorKeywords_),
            documentTypes = keySet(documentTypes_),
            documentTypesRegexp = wordRegexp(documentTypes_),
            mediaFeatures = keySet(mediaFeatures_),
            mediaTypes = keySet(mediaTypes_),
            fontProperties = keySet(fontProperties_),
            operatorsRegexp =
                /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/,
            wordOperatorKeywordsRegexp = wordRegexp(wordOperatorKeywords_),
            blockKeywords = keySet(blockKeywords_),
            vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i),
            commonAtoms = keySet(commonAtoms_),
            firstWordMatch = "",
            states = {},
            ch,
            style,
            type,
            override;

        /**
         * Tokenizers
         */
        function tokenBase(stream, state) {
            firstWordMatch = stream.string.match(
                /(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/
            );
            state.context.line.firstWord = firstWordMatch
                ? firstWordMatch[0].replace(/^\s*/, "")
                : "";
            state.context.line.indent = stream.indentation();
            ch = stream.peek();

            // Line comment
            if (stream.match("//")) {
                stream.skipToEnd();
                return ["comment", "comment"];
            }
            // Block comment
            if (stream.match("/*")) {
                state.tokenize = tokenCComment;
                return tokenCComment(stream, state);
            }
            // String
            if (ch == '"' || ch == "'") {
                stream.next();
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            // Def
            if (ch == "@") {
                stream.next();
                stream.eatWhile(/[\w\\-]/);
                return ["def", stream.current()];
            }
            // ID selector or Hex color
            if (ch == "#") {
                stream.next();
                // Hex color
                if (
                    stream.match(
                        /^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i
                    )
                ) {
                    return ["atom", "atom"];
                }
                // ID selector
                if (stream.match(/^[a-z][\w-]*/i)) {
                    return ["builtin", "hash"];
                }
            }
            // Vendor prefixes
            if (stream.match(vendorPrefixesRegexp)) {
                return ["meta", "vendor-prefixes"];
            }
            // Numbers
            if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
                stream.eatWhile(/[a-z%]/i);
                return ["number", "unit"];
            }
            // !important|optional
            if (ch == "!") {
                stream.next();
                return [
                    stream.match(/^(important|optional)/i)
                        ? "keyword"
                        : "operator",
                    "important",
                ];
            }
            // Class
            if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
                return ["qualifier", "qualifier"];
            }
            // url url-prefix domain regexp
            if (stream.match(documentTypesRegexp)) {
                if (stream.peek() == "(") state.tokenize = tokenParenthesized;
                return ["property", "word"];
            }
            // Mixins / Functions
            if (stream.match(/^[a-z][\w-]*\(/i)) {
                stream.backUp(1);
                return ["keyword", "mixin"];
            }
            // Block mixins
            if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
                stream.backUp(1);
                return ["keyword", "block-mixin"];
            }
            // Parent Reference BEM naming
            if (
                stream.string.match(/^\s*&/) &&
                stream.match(/^[-_]+[a-z][\w-]*/)
            ) {
                return ["qualifier", "qualifier"];
            }
            // / Root Reference & Parent Reference
            if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
                stream.backUp(1);
                return ["variableName.special", "reference"];
            }
            if (stream.match(/^&{1}\s*$/)) {
                return ["variableName.special", "reference"];
            }
            // Word operator
            if (stream.match(wordOperatorKeywordsRegexp)) {
                return ["operator", "operator"];
            }
            // Word
            if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
                // Variable
                if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
                    if (!wordIsTag(stream.current())) {
                        stream.match(".");
                        return ["variable", "variable-name"];
                    }
                }
                return ["variable", "word"];
            }
            // Operators
            if (stream.match(operatorsRegexp)) {
                return ["operator", stream.current()];
            }
            // Delimiters
            if (/[:;,{}\[\]\(\)]/.test(ch)) {
                stream.next();
                return [null, ch];
            }
            // Non-detected items
            stream.next();
            return [null, null];
        }

        /**
         * Token comment
         */
        function tokenCComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return ["comment", "comment"];
        }

        /**
         * Token string
         */
        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) {
                        if (quote == ")") stream.backUp(1);
                        break;
                    }
                    escaped = !escaped && ch == "\\";
                }
                if (ch == quote || (!escaped && quote != ")"))
                    state.tokenize = null;
                return ["string", "string"];
            };
        }

        /**
         * Token parenthesized
         */
        function tokenParenthesized(stream, state) {
            stream.next(); // Must be "("
            if (!stream.match(/\s*[\"\')]/, false))
                state.tokenize = tokenString(")");
            else state.tokenize = null;
            return [null, "("];
        }

        /**
         * Context management
         */
        function Context(type, indent, prev, line) {
            this.type = type;
            this.indent = indent;
            this.prev = prev;
            this.line = line || { firstWord: "", indent: 0 };
        }

        function pushContext(state, stream, type, indent) {
            indent = indent >= 0 ? indent : stream.indentUnit;
            state.context = new Context(
                type,
                stream.indentation() + indent,
                state.context
            );
            return type;
        }

        function popContext(state, stream, currentIndent) {
            var contextIndent = state.context.indent - stream.indentUnit;
            currentIndent = currentIndent || false;
            state.context = state.context.prev;
            if (currentIndent) state.context.indent = contextIndent;
            return state.context.type;
        }

        function pass(type, stream, state) {
            return states[state.context.type](type, stream, state);
        }

        function popAndPass(type, stream, state, n) {
            for (var i = n || 1; i > 0; i--) state.context = state.context.prev;
            return pass(type, stream, state);
        }

        /**
         * Parser
         */
        function wordIsTag(word) {
            return word.toLowerCase() in tagKeywords;
        }

        function wordIsProperty(word) {
            word = word.toLowerCase();
            return word in propertyKeywords || word in fontProperties;
        }

        function wordIsBlock(word) {
            return word.toLowerCase() in blockKeywords;
        }

        function wordIsVendorPrefix(word) {
            return word.toLowerCase().match(vendorPrefixesRegexp);
        }

        function wordAsValue(word) {
            var wordLC = word.toLowerCase();
            var override = "variable";
            if (wordIsTag(word)) override = "tag";
            else if (wordIsBlock(word)) override = "block-keyword";
            else if (wordIsProperty(word)) override = "property";
            else if (wordLC in valueKeywords || wordLC in commonAtoms)
                override = "atom";
            else if (wordLC == "return" || wordLC in colorKeywords)
                override = "keyword";
            // Font family
            else if (word.match(/^[A-Z]/)) override = "string";
            return override;
        }

        function typeIsBlock(type, stream) {
            return (
                (endOfLine(stream) &&
                    (type == "{" ||
                        type == "]" ||
                        type == "hash" ||
                        type == "qualifier")) ||
                type == "block-mixin"
            );
        }

        function typeIsInterpolation(type, stream) {
            return type == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
        }

        function typeIsPseudo(type, stream) {
            return type == ":" && stream.match(/^[a-z-]+/, false);
        }

        function startOfLine(stream) {
            return (
                stream.sol() ||
                stream.string.match(
                    new RegExp("^\\s*" + escapeRegExp(stream.current()))
                )
            );
        }

        function endOfLine(stream) {
            return stream.eol() || stream.match(/^\s*$/, false);
        }

        function firstWordOfLine(line) {
            var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
            var result =
                typeof line == "string"
                    ? line.match(re)
                    : line.string.match(re);
            return result ? result[0].replace(/^\s*/, "") : "";
        }

        /**
         * Block
         */
        states.block = function(type, stream, state) {
            if (
                (type == "comment" && startOfLine(stream)) ||
                (type == "," && endOfLine(stream)) ||
                type == "mixin"
            ) {
                return pushContext(state, stream, "block", 0);
            }
            if (typeIsInterpolation(type, stream)) {
                return pushContext(state, stream, "interpolation");
            }
            if (endOfLine(stream) && type == "]") {
                if (
                    !/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) &&
                    !wordIsTag(firstWordOfLine(stream))
                ) {
                    return pushContext(state, stream, "block", 0);
                }
            }
            if (typeIsBlock(type, stream)) {
                return pushContext(state, stream, "block");
            }
            if (type == "}" && endOfLine(stream)) {
                return pushContext(state, stream, "block", 0);
            }
            if (type == "variable-name") {
                if (
                    stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) ||
                    wordIsBlock(firstWordOfLine(stream))
                ) {
                    return pushContext(state, stream, "variableName");
                } else {
                    return pushContext(state, stream, "variableName", 0);
                }
            }
            if (type == "=") {
                if (
                    !endOfLine(stream) &&
                    !wordIsBlock(firstWordOfLine(stream))
                ) {
                    return pushContext(state, stream, "block", 0);
                }
                return pushContext(state, stream, "block");
            }
            if (type == "*") {
                if (
                    endOfLine(stream) ||
                    stream.match(/\s*(,|\.|#|\[|:|{)/, false)
                ) {
                    override = "tag";
                    return pushContext(state, stream, "block");
                }
            }
            if (typeIsPseudo(type, stream)) {
                return pushContext(state, stream, "pseudo");
            }
            if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
                return pushContext(
                    state,
                    stream,
                    endOfLine(stream) ? "block" : "atBlock"
                );
            }
            if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {
                return pushContext(state, stream, "keyframes");
            }
            if (/@extends?/.test(type)) {
                return pushContext(state, stream, "extend", 0);
            }
            if (type && type.charAt(0) == "@") {
                // Property Lookup
                if (
                    stream.indentation() > 0 &&
                    wordIsProperty(stream.current().slice(1))
                ) {
                    override = "variable";
                    return "block";
                }
                if (/(@import|@require|@charset)/.test(type)) {
                    return pushContext(state, stream, "block", 0);
                }
                return pushContext(state, stream, "block");
            }
            if (type == "reference" && endOfLine(stream)) {
                return pushContext(state, stream, "block");
            }
            if (type == "(") {
                return pushContext(state, stream, "parens");
            }

            if (type == "vendor-prefixes") {
                return pushContext(state, stream, "vendorPrefixes");
            }
            if (type == "word") {
                var word = stream.current();
                override = wordAsValue(word);

                if (override == "property") {
                    if (startOfLine(stream)) {
                        return pushContext(state, stream, "block", 0);
                    } else {
                        override = "atom";
                        return "block";
                    }
                }

                if (override == "tag") {
                    // tag is a css value
                    if (/embed|menu|pre|progress|sub|table/.test(word)) {
                        if (wordIsProperty(firstWordOfLine(stream))) {
                            override = "atom";
                            return "block";
                        }
                    }

                    // tag is an attribute
                    if (
                        stream.string.match(
                            new RegExp(
                                "\\[\\s*" + word + "|" + word + "\\s*\\]"
                            )
                        )
                    ) {
                        override = "atom";
                        return "block";
                    }

                    // tag is a variable
                    if (tagVariablesRegexp.test(word)) {
                        if (
                            (startOfLine(stream) && stream.string.match(/=/)) ||
                            (!startOfLine(stream) &&
                                !stream.string.match(
                                    /^(\s*\.|#|\&|\[|\/|>|\*)/
                                ) &&
                                !wordIsTag(firstWordOfLine(stream)))
                        ) {
                            override = "variable";
                            if (wordIsBlock(firstWordOfLine(stream)))
                                return "block";
                            return pushContext(state, stream, "block", 0);
                        }
                    }

                    if (endOfLine(stream))
                        return pushContext(state, stream, "block");
                }
                if (override == "block-keyword") {
                    override = "keyword";

                    // Postfix conditionals
                    if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
                        return "block";
                    }
                    return pushContext(state, stream, "block");
                }
                if (word == "return")
                    return pushContext(state, stream, "block", 0);

                // Placeholder selector
                if (
                    override == "variable" &&
                    stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)
                ) {
                    return pushContext(state, stream, "block");
                }
            }
            return state.context.type;
        };

        /**
         * Parens
         */
        states.parens = function(type, stream, state) {
            if (type == "(") return pushContext(state, stream, "parens");
            if (type == ")") {
                if (state.context.prev.type == "parens") {
                    return popContext(state, stream);
                }
                if (
                    (stream.string.match(/^[a-z][\w-]*\(/i) &&
                        endOfLine(stream)) ||
                    wordIsBlock(firstWordOfLine(stream)) ||
                    /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(
                        firstWordOfLine(stream)
                    ) ||
                    (!stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) &&
                        wordIsTag(firstWordOfLine(stream)))
                ) {
                    return pushContext(state, stream, "block");
                }
                if (
                    stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) ||
                    stream.string.match(/^\s*(\(|\)|[0-9])/) ||
                    stream.string.match(/^\s+[a-z][\w-]*\(/i) ||
                    stream.string.match(/^\s+[\$-]?[a-z]/i)
                ) {
                    return pushContext(state, stream, "block", 0);
                }
                if (endOfLine(stream))
                    return pushContext(state, stream, "block");
                else return pushContext(state, stream, "block", 0);
            }
            if (
                type &&
                type.charAt(0) == "@" &&
                wordIsProperty(stream.current().slice(1))
            ) {
                override = "variable";
            }
            if (type == "word") {
                var word = stream.current();
                override = wordAsValue(word);
                if (override == "tag" && tagVariablesRegexp.test(word)) {
                    override = "variable";
                }
                if (override == "property" || word == "to") override = "atom";
            }
            if (type == "variable-name") {
                return pushContext(state, stream, "variableName");
            }
            if (typeIsPseudo(type, stream)) {
                return pushContext(state, stream, "pseudo");
            }
            return state.context.type;
        };

        /**
         * Vendor prefixes
         */
        states.vendorPrefixes = function(type, stream, state) {
            if (type == "word") {
                override = "property";
                return pushContext(state, stream, "block", 0);
            }
            return popContext(state, stream);
        };

        /**
         * Pseudo
         */
        states.pseudo = function(type, stream, state) {
            if (!wordIsProperty(firstWordOfLine(stream.string))) {
                stream.match(/^[a-z-]+/);
                override = "variableName.special";
                if (endOfLine(stream))
                    return pushContext(state, stream, "block");
                return popContext(state, stream);
            }
            return popAndPass(type, stream, state);
        };

        /**
         * atBlock
         */
        states.atBlock = function(type, stream, state) {
            if (type == "(")
                return pushContext(state, stream, "atBlock_parens");
            if (typeIsBlock(type, stream)) {
                return pushContext(state, stream, "block");
            }
            if (typeIsInterpolation(type, stream)) {
                return pushContext(state, stream, "interpolation");
            }
            if (type == "word") {
                var word = stream.current().toLowerCase();
                if (/^(only|not|and|or)$/.test(word)) override = "keyword";
                else if (documentTypes.hasOwnProperty(word)) override = "tag";
                else if (mediaTypes.hasOwnProperty(word))
                    override = "attribute";
                else if (mediaFeatures.hasOwnProperty(word))
                    override = "property";
                else if (nonStandardPropertyKeywords.hasOwnProperty(word))
                    override = "string.special";
                else override = wordAsValue(stream.current());
                if (override == "tag" && endOfLine(stream)) {
                    return pushContext(state, stream, "block");
                }
            }
            if (type == "operator" && /^(not|and|or)$/.test(stream.current())) {
                override = "keyword";
            }
            return state.context.type;
        };

        states.atBlock_parens = function(type, stream, state) {
            if (type == "{" || type == "}") return state.context.type;
            if (type == ")") {
                if (endOfLine(stream))
                    return pushContext(state, stream, "block");
                else return pushContext(state, stream, "atBlock");
            }
            if (type == "word") {
                var word = stream.current().toLowerCase();
                override = wordAsValue(word);
                if (/^(max|min)/.test(word)) override = "property";
                if (override == "tag") {
                    tagVariablesRegexp.test(word)
                        ? (override = "variable")
                        : (override = "atom");
                }
                return state.context.type;
            }
            return states.atBlock(type, stream, state);
        };

        /**
         * Keyframes
         */
        states.keyframes = function(type, stream, state) {
            if (
                stream.indentation() == "0" &&
                ((type == "}" && startOfLine(stream)) ||
                    type == "]" ||
                    type == "hash" ||
                    type == "qualifier" ||
                    wordIsTag(stream.current()))
            ) {
                return popAndPass(type, stream, state);
            }
            if (type == "{") return pushContext(state, stream, "keyframes");
            if (type == "}") {
                if (startOfLine(stream)) return popContext(state, stream, true);
                else return pushContext(state, stream, "keyframes");
            }
            if (type == "unit" && /^[0-9]+\%$/.test(stream.current())) {
                return pushContext(state, stream, "keyframes");
            }
            if (type == "word") {
                override = wordAsValue(stream.current());
                if (override == "block-keyword") {
                    override = "keyword";
                    return pushContext(state, stream, "keyframes");
                }
            }
            if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
                return pushContext(
                    state,
                    stream,
                    endOfLine(stream) ? "block" : "atBlock"
                );
            }
            if (type == "mixin") {
                return pushContext(state, stream, "block", 0);
            }
            return state.context.type;
        };

        /**
         * Interpolation
         */
        states.interpolation = function(type, stream, state) {
            if (type == "{")
                popContext(state, stream) &&
                    pushContext(state, stream, "block");
            if (type == "}") {
                if (
                    stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) ||
                    (stream.string.match(/^\s*[a-z]/i) &&
                        wordIsTag(firstWordOfLine(stream)))
                ) {
                    return pushContext(state, stream, "block");
                }
                if (
                    !stream.string.match(/^(\{|\s*\&)/) ||
                    stream.match(/\s*[\w-]/, false)
                ) {
                    return pushContext(state, stream, "block", 0);
                }
                return pushContext(state, stream, "block");
            }
            if (type == "variable-name") {
                return pushContext(state, stream, "variableName", 0);
            }
            if (type == "word") {
                override = wordAsValue(stream.current());
                if (override == "tag") override = "atom";
            }
            return state.context.type;
        };

        /**
         * Extend/s
         */
        states.extend = function(type, stream, state) {
            if (type == "[" || type == "=") return "extend";
            if (type == "]") return popContext(state, stream);
            if (type == "word") {
                override = wordAsValue(stream.current());
                return "extend";
            }
            return popContext(state, stream);
        };

        /**
         * Variable name
         */
        states.variableName = function(type, stream, state) {
            if (
                type == "string" ||
                type == "[" ||
                type == "]" ||
                stream.current().match(/^(\.|\$)/)
            ) {
                if (stream.current().match(/^\.[\w-]+/i)) override = "variable";
                return "variableName";
            }
            return popAndPass(type, stream, state);
        };

        const stylus = {
            startState: function() {
                return {
                    tokenize: null,
                    state: "block",
                    context: new Context("block", 0, null),
                };
            },
            token: function(stream, state) {
                if (!state.tokenize && stream.eatSpace()) return null;
                style = (state.tokenize || tokenBase)(stream, state);
                if (style && typeof style == "object") {
                    type = style[1];
                    style = style[0];
                }
                override = style;
                state.state = states[state.state](type, stream, state);
                return override;
            },
            indent: function(state, textAfter, iCx) {
                var cx = state.context,
                    ch = textAfter && textAfter.charAt(0),
                    indent = cx.indent,
                    lineFirstWord = firstWordOfLine(textAfter),
                    lineIndent = iCx.lineIndent(iCx.pos),
                    prevLineFirstWord = state.context.prev
                        ? state.context.prev.line.firstWord
                        : "",
                    prevLineIndent = state.context.prev
                        ? state.context.prev.line.indent
                        : lineIndent;

                if (
                    cx.prev &&
                    ((ch == "}" &&
                        (cx.type == "block" ||
                            cx.type == "atBlock" ||
                            cx.type == "keyframes")) ||
                        (ch == ")" &&
                            (cx.type == "parens" ||
                                cx.type == "atBlock_parens")) ||
                        (ch == "{" && cx.type == "at"))
                ) {
                    indent = cx.indent - iCx.unit;
                } else if (!/(\})/.test(ch)) {
                    if (
                        /@|\$|\d/.test(ch) ||
                        /^\{/.test(textAfter) ||
                        /^\s*\/(\/|\*)/.test(textAfter) ||
                        /^\s*\/\*/.test(prevLineFirstWord) ||
                        /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) ||
                        /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) ||
                        /^return/.test(textAfter) ||
                        wordIsBlock(lineFirstWord)
                    ) {
                        indent = lineIndent;
                    } else if (
                        /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch) ||
                        wordIsTag(lineFirstWord)
                    ) {
                        if (/\,\s*$/.test(prevLineFirstWord)) {
                            indent = prevLineIndent;
                        } else if (
                            !state.sol() &&
                            (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(
                                prevLineFirstWord
                            ) ||
                                wordIsTag(prevLineFirstWord))
                        ) {
                            indent =
                                lineIndent <= prevLineIndent
                                    ? prevLineIndent
                                    : prevLineIndent + iCx.unit;
                        } else {
                            indent = lineIndent;
                        }
                    } else if (
                        !/,\s*$/.test(textAfter) &&
                        (wordIsVendorPrefix(lineFirstWord) ||
                            wordIsProperty(lineFirstWord))
                    ) {
                        if (wordIsBlock(prevLineFirstWord)) {
                            indent =
                                lineIndent <= prevLineIndent
                                    ? prevLineIndent
                                    : prevLineIndent + iCx.unit;
                        } else if (/^\{/.test(prevLineFirstWord)) {
                            indent =
                                lineIndent <= prevLineIndent
                                    ? lineIndent
                                    : prevLineIndent + iCx.unit;
                        } else if (
                            wordIsVendorPrefix(prevLineFirstWord) ||
                            wordIsProperty(prevLineFirstWord)
                        ) {
                            indent =
                                lineIndent >= prevLineIndent
                                    ? prevLineIndent
                                    : lineIndent;
                        } else if (
                            /^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(
                                prevLineFirstWord
                            ) ||
                            /=\s*$/.test(prevLineFirstWord) ||
                            wordIsTag(prevLineFirstWord) ||
                            /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)
                        ) {
                            indent = prevLineIndent + iCx.unit;
                        } else {
                            indent = lineIndent;
                        }
                    }
                }
                return indent;
            },
            languageData: {
                indentOnInput: /^\s*\}$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                autocomplete: hintWords,
            },
        };

        exports.stylus = stylus;
    }
    _M74();
    function _M75() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordSet(words) {
            var set = {};
            for (var i = 0; i < words.length; i++) set[words[i]] = true;
            return set;
        }

        var keywords = wordSet([
            "_",
            "var",
            "let",
            "actor",
            "class",
            "enum",
            "extension",
            "import",
            "protocol",
            "struct",
            "func",
            "typealias",
            "associatedtype",
            "open",
            "public",
            "internal",
            "fileprivate",
            "private",
            "deinit",
            "init",
            "new",
            "override",
            "self",
            "subscript",
            "super",
            "convenience",
            "dynamic",
            "final",
            "indirect",
            "lazy",
            "required",
            "static",
            "unowned",
            "unowned(safe)",
            "unowned(unsafe)",
            "weak",
            "as",
            "is",
            "break",
            "case",
            "continue",
            "default",
            "else",
            "fallthrough",
            "for",
            "guard",
            "if",
            "in",
            "repeat",
            "switch",
            "where",
            "while",
            "defer",
            "return",
            "inout",
            "mutating",
            "nonmutating",
            "isolated",
            "nonisolated",
            "catch",
            "do",
            "rethrows",
            "throw",
            "throws",
            "async",
            "await",
            "try",
            "didSet",
            "get",
            "set",
            "willSet",
            "assignment",
            "associativity",
            "infix",
            "left",
            "none",
            "operator",
            "postfix",
            "precedence",
            "precedencegroup",
            "prefix",
            "right",
            "Any",
            "AnyObject",
            "Type",
            "dynamicType",
            "Self",
            "Protocol",
            "__COLUMN__",
            "__FILE__",
            "__FUNCTION__",
            "__LINE__",
        ]);
        var definingKeywords = wordSet([
            "var",
            "let",
            "actor",
            "class",
            "enum",
            "extension",
            "import",
            "protocol",
            "struct",
            "func",
            "typealias",
            "associatedtype",
            "for",
        ]);
        var atoms = wordSet(["true", "false", "nil", "self", "super", "_"]);
        var types = wordSet([
            "Array",
            "Bool",
            "Character",
            "Dictionary",
            "Double",
            "Float",
            "Int",
            "Int8",
            "Int16",
            "Int32",
            "Int64",
            "Never",
            "Optional",
            "Set",
            "String",
            "UInt8",
            "UInt16",
            "UInt32",
            "UInt64",
            "Void",
        ]);
        var operators = "+-/*%=|&<>~^?!";
        var punc = ":;,.(){}[]";
        var binary = /^\-?0b[01][01_]*/;
        var octal = /^\-?0o[0-7][0-7_]*/;
        var hexadecimal =
            /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
        var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
        var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
        var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
        var instruction = /^\#[A-Za-z]+/;
        var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
        //var regexp = /^\/(?!\s)(?:\/\/)?(?:\\.|[^\/])+\//

        function tokenBase(stream, state, prev) {
            if (stream.sol()) state.indented = stream.indentation();
            if (stream.eatSpace()) return null;

            var ch = stream.peek();
            if (ch == "/") {
                if (stream.match("//")) {
                    stream.skipToEnd();
                    return "comment";
                }
                if (stream.match("/*")) {
                    state.tokenize.push(tokenComment);
                    return tokenComment(stream, state);
                }
            }
            if (stream.match(instruction)) return "builtin";
            if (stream.match(attribute)) return "attribute";
            if (stream.match(binary)) return "number";
            if (stream.match(octal)) return "number";
            if (stream.match(hexadecimal)) return "number";
            if (stream.match(decimal)) return "number";
            if (stream.match(property)) return "property";
            if (operators.indexOf(ch) > -1) {
                stream.next();
                return "operator";
            }
            if (punc.indexOf(ch) > -1) {
                stream.next();
                stream.match("..");
                return "punctuation";
            }
            var stringMatch;
            if ((stringMatch = stream.match(/("""|"|')/))) {
                var tokenize = tokenString.bind(null, stringMatch[0]);
                state.tokenize.push(tokenize);
                return tokenize(stream, state);
            }

            if (stream.match(identifier)) {
                var ident = stream.current();
                if (types.hasOwnProperty(ident)) return "type";
                if (atoms.hasOwnProperty(ident)) return "atom";
                if (keywords.hasOwnProperty(ident)) {
                    if (definingKeywords.hasOwnProperty(ident))
                        state.prev = "define";
                    return "keyword";
                }
                if (prev == "define") return "def";
                return "variable";
            }

            stream.next();
            return null;
        }

        function tokenUntilClosingParen() {
            var depth = 0;
            return function(stream, state, prev) {
                var inner = tokenBase(stream, state, prev);
                if (inner == "punctuation") {
                    if (stream.current() == "(") ++depth;
                    else if (stream.current() == ")") {
                        if (depth == 0) {
                            stream.backUp(1);
                            state.tokenize.pop();
                            return state.tokenize[state.tokenize.length - 1](
                                stream,
                                state
                            );
                        } else --depth;
                    }
                }
                return inner;
            };
        }

        function tokenString(openQuote, stream, state) {
            var singleLine = openQuote.length == 1;
            var ch,
                escaped = false;
            while ((ch = stream.peek())) {
                if (escaped) {
                    stream.next();
                    if (ch == "(") {
                        state.tokenize.push(tokenUntilClosingParen());
                        return "string";
                    }
                    escaped = false;
                } else if (stream.match(openQuote)) {
                    state.tokenize.pop();
                    return "string";
                } else {
                    stream.next();
                    escaped = ch == "\\";
                }
            }
            if (singleLine) {
                state.tokenize.pop();
            }
            return "string";
        }

        function tokenComment(stream, state) {
            var ch;
            while (true) {
                stream.match(/^[^/*]+/, true);
                ch = stream.next();
                if (!ch) break;
                if (ch === "/" && stream.eat("*")) {
                    state.tokenize.push(tokenComment);
                } else if (ch === "*" && stream.eat("/")) {
                    state.tokenize.pop();
                }
            }
            return "comment";
        }

        function Context(prev, align, indented) {
            this.prev = prev;
            this.align = align;
            this.indented = indented;
        }

        function pushContext(state, stream) {
            var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false)
                ? null
                : stream.column() + 1;
            state.context = new Context(state.context, align, state.indented);
        }

        function popContext(state) {
            if (state.context) {
                state.indented = state.context.indented;
                state.context = state.context.prev;
            }
        }

        const swift = {
            startState: function() {
                return {
                    prev: null,
                    context: null,
                    indented: 0,
                    tokenize: [],
                };
            },

            token: function(stream, state) {
                var prev = state.prev;
                state.prev = null;
                var tokenize =
                    state.tokenize[state.tokenize.length - 1] || tokenBase;
                var style = tokenize(stream, state, prev);
                if (!style || style == "comment") state.prev = prev;
                else if (!state.prev) state.prev = style;

                if (style == "punctuation") {
                    var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
                    if (bracket)
                        (bracket[1] ? popContext : pushContext)(state, stream);
                }

                return style;
            },

            indent: function(state, textAfter, iCx) {
                var cx = state.context;
                if (!cx) return 0;
                var closing = /^[\]\}\)]/.test(textAfter);
                if (cx.align != null) return cx.align - (closing ? 1 : 0);
                return cx.indented + (closing ? 0 : iCx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[\)\}\]]$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            },
        };

        exports.swift = swift;
    }
    _M75();
    function _M76() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordObj(words) {
            var o = {};
            for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
            return o;
        }

        var keywordList = [
            "alias",
            "and",
            "BEGIN",
            "begin",
            "break",
            "case",
            "class",
            "def",
            "defined?",
            "do",
            "else",
            "elsif",
            "END",
            "end",
            "ensure",
            "false",
            "for",
            "if",
            "in",
            "module",
            "next",
            "not",
            "or",
            "redo",
            "rescue",
            "retry",
            "return",
            "self",
            "super",
            "then",
            "true",
            "undef",
            "unless",
            "until",
            "when",
            "while",
            "yield",
            "nil",
            "raise",
            "throw",
            "catch",
            "fail",
            "loop",
            "callcc",
            "caller",
            "lambda",
            "proc",
            "public",
            "protected",
            "private",
            "require",
            "load",
            "require_relative",
            "extend",
            "autoload",
            "__END__",
            "__FILE__",
            "__LINE__",
            "__dir__",
        ],
            keywords = wordObj(keywordList);

        var indentWords = wordObj([
            "def",
            "class",
            "case",
            "for",
            "while",
            "until",
            "module",
            "catch",
            "loop",
            "proc",
            "begin",
        ]);
        var dedentWords = wordObj(["end", "until"]);
        var opening = { "[": "]", "{": "}", "(": ")" };
        var closing = { "]": "[", "}": "{", ")": "(" };

        var curPunc;

        function chain(newtok, stream, state) {
            state.tokenize.push(newtok);
            return newtok(stream, state);
        }

        function tokenBase(stream, state) {
            if (stream.sol() && stream.match("=begin") && stream.eol()) {
                state.tokenize.push(readBlockComment);
                return "comment";
            }
            if (stream.eatSpace()) return null;
            var ch = stream.next(),
                m;
            if (ch == "`" || ch == "'" || ch == '"') {
                return chain(
                    readQuoted(ch, "string", ch == '"' || ch == "`"),
                    stream,
                    state
                );
            } else if (ch == "/") {
                if (regexpAhead(stream))
                    return chain(
                        readQuoted(ch, "string.special", true),
                        stream,
                        state
                    );
                else return "operator";
            } else if (ch == "%") {
                var style = "string",
                    embed = true;
                if (stream.eat("s")) style = "atom";
                else if (stream.eat(/[WQ]/)) style = "string";
                else if (stream.eat(/[r]/)) style = "string.special";
                else if (stream.eat(/[wxq]/)) {
                    style = "string";
                    embed = false;
                }
                var delim = stream.eat(/[^\w\s=]/);
                if (!delim) return "operator";
                if (opening.propertyIsEnumerable(delim)) delim = opening[delim];
                return chain(
                    readQuoted(delim, style, embed, true),
                    stream,
                    state
                );
            } else if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            } else if (
                ch == "<" &&
                (m = stream.match(
                    /^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/
                ))
            ) {
                return chain(readHereDoc(m[2], m[1]), stream, state);
            } else if (ch == "0") {
                if (stream.eat("x")) stream.eatWhile(/[\da-fA-F]/);
                else if (stream.eat("b")) stream.eatWhile(/[01]/);
                else stream.eatWhile(/[0-7]/);
                return "number";
            } else if (/\d/.test(ch)) {
                stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
                return "number";
            } else if (ch == "?") {
                while (stream.match(/^\\[CM]-/)) { }
                if (stream.eat("\\")) stream.eatWhile(/\w/);
                else stream.next();
                return "string";
            } else if (ch == ":") {
                if (stream.eat("'"))
                    return chain(readQuoted("'", "atom", false), stream, state);
                if (stream.eat('"'))
                    return chain(readQuoted('"', "atom", true), stream, state);

                // :> :>> :< :<< are valid symbols
                if (stream.eat(/[\<\>]/)) {
                    stream.eat(/[\<\>]/);
                    return "atom";
                }

                // :+ :- :/ :* :| :& :! are valid symbols
                if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
                    return "atom";
                }

                // Symbols can't start by a digit
                if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
                    stream.eatWhile(/[\w$\xa1-\uffff]/);
                    // Only one ? ! = is allowed and only as the last character
                    stream.eat(/[\?\!\=]/);
                    return "atom";
                }
                return "operator";
            } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
                stream.eat("@");
                stream.eatWhile(/[\w\xa1-\uffff]/);
                return "propertyName";
            } else if (ch == "$") {
                if (stream.eat(/[a-zA-Z_]/)) {
                    stream.eatWhile(/[\w]/);
                } else if (stream.eat(/\d/)) {
                    stream.eat(/\d/);
                } else {
                    stream.next(); // Must be a special global like $: or $!
                }
                return "variableName.special";
            } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
                stream.eatWhile(/[\w\xa1-\uffff]/);
                stream.eat(/[\?\!]/);
                if (stream.eat(":")) return "atom";
                return "variable";
            } else if (
                ch == "|" &&
                (state.varList || state.lastTok == "{" || state.lastTok == "do")
            ) {
                curPunc = "|";
                return null;
            } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
                curPunc = ch;
                return null;
            } else if (ch == "-" && stream.eat(">")) {
                return "operator";
            } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
                var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
                if (ch == "." && !more) curPunc = ".";
                return "operator";
            } else {
                return null;
            }
        }

        function regexpAhead(stream) {
            var start = stream.pos,
                depth = 0,
                next,
                found = false,
                escaped = false;
            while ((next = stream.next()) != null) {
                if (!escaped) {
                    if ("[{(".indexOf(next) > -1) {
                        depth++;
                    } else if ("]})".indexOf(next) > -1) {
                        depth--;
                        if (depth < 0) break;
                    } else if (next == "/" && depth == 0) {
                        found = true;
                        break;
                    }
                    escaped = next == "\\";
                } else {
                    escaped = false;
                }
            }
            stream.backUp(stream.pos - start);
            return found;
        }

        function tokenBaseUntilBrace(depth) {
            if (!depth) depth = 1;
            return function(stream, state) {
                if (stream.peek() == "}") {
                    if (depth == 1) {
                        state.tokenize.pop();
                        return state.tokenize[state.tokenize.length - 1](
                            stream,
                            state
                        );
                    } else {
                        state.tokenize[state.tokenize.length - 1] =
                            tokenBaseUntilBrace(depth - 1);
                    }
                } else if (stream.peek() == "{") {
                    state.tokenize[state.tokenize.length - 1] =
                        tokenBaseUntilBrace(depth + 1);
                }
                return tokenBase(stream, state);
            };
        }
        function tokenBaseOnce() {
            var alreadyCalled = false;
            return function(stream, state) {
                if (alreadyCalled) {
                    state.tokenize.pop();
                    return state.tokenize[state.tokenize.length - 1](
                        stream,
                        state
                    );
                }
                alreadyCalled = true;
                return tokenBase(stream, state);
            };
        }
        function readQuoted(quote, style, embed, unescaped) {
            return function(stream, state) {
                var escaped = false,
                    ch;

                if (state.context.type === "read-quoted-paused") {
                    state.context = state.context.prev;
                    stream.eat("}");
                }

                while ((ch = stream.next()) != null) {
                    if (ch == quote && (unescaped || !escaped)) {
                        state.tokenize.pop();
                        break;
                    }
                    if (embed && ch == "#" && !escaped) {
                        if (stream.eat("{")) {
                            if (quote == "}") {
                                state.context = {
                                    prev: state.context,
                                    type: "read-quoted-paused",
                                };
                            }
                            state.tokenize.push(tokenBaseUntilBrace());
                            break;
                        } else if (/[@\$]/.test(stream.peek())) {
                            state.tokenize.push(tokenBaseOnce());
                            break;
                        }
                    }
                    escaped = !escaped && ch == "\\";
                }
                return style;
            };
        }
        function readHereDoc(phrase, mayIndent) {
            return function(stream, state) {
                if (mayIndent) stream.eatSpace();
                if (stream.match(phrase)) state.tokenize.pop();
                else stream.skipToEnd();
                return "string";
            };
        }
        function readBlockComment(stream, state) {
            if (stream.sol() && stream.match("=end") && stream.eol())
                state.tokenize.pop();
            stream.skipToEnd();
            return "comment";
        }

        const ruby = {
            startState: function(indentUnit) {
                return {
                    tokenize: [tokenBase],
                    indented: 0,
                    context: { type: "top", indented: -indentUnit },
                    continuedLine: false,
                    lastTok: null,
                    varList: false,
                };
            },

            token: function(stream, state) {
                curPunc = null;
                if (stream.sol()) state.indented = stream.indentation();
                var style = state.tokenize[state.tokenize.length - 1](
                    stream,
                    state
                ),
                    kwtype;
                var thisTok = curPunc;
                if (style == "variable") {
                    var word = stream.current();
                    style =
                        state.lastTok == "."
                            ? "property"
                            : keywords.propertyIsEnumerable(stream.current())
                                ? "keyword"
                                : /^[A-Z]/.test(word)
                                    ? "tag"
                                    : state.lastTok == "def" ||
                                        state.lastTok == "class" ||
                                        state.varList
                                        ? "def"
                                        : "variable";
                    if (style == "keyword") {
                        thisTok = word;
                        if (indentWords.propertyIsEnumerable(word))
                            kwtype = "indent";
                        else if (dedentWords.propertyIsEnumerable(word))
                            kwtype = "dedent";
                        else if (
                            (word == "if" || word == "unless") &&
                            stream.column() == stream.indentation()
                        )
                            kwtype = "indent";
                        else if (
                            word == "do" &&
                            state.context.indented < state.indented
                        )
                            kwtype = "indent";
                    }
                }
                if (curPunc || (style && style != "comment"))
                    state.lastTok = thisTok;
                if (curPunc == "|") state.varList = !state.varList;

                if (kwtype == "indent" || /[\(\[\{]/.test(curPunc))
                    state.context = {
                        prev: state.context,
                        type: curPunc || style,
                        indented: state.indented,
                    };
                else if (
                    (kwtype == "dedent" || /[\)\]\}]/.test(curPunc)) &&
                    state.context.prev
                )
                    state.context = state.context.prev;

                if (stream.eol())
                    state.continuedLine =
                        curPunc == "\\" || style == "operator";
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize[state.tokenize.length - 1] != tokenBase)
                    return null;
                var firstChar = textAfter && textAfter.charAt(0);
                var ct = state.context;
                var closed =
                    ct.type == closing[firstChar] ||
                    (ct.type == "keyword" &&
                        /^(?:end|until|else|elsif|when|rescue)\b/.test(
                            textAfter
                        ));
                return (
                    ct.indented +
                    (closed ? 0 : cx.unit) +
                    (state.continuedLine ? cx.unit : 0)
                );
            },

            languageData: {
                indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
                commentTokens: { line: "#" },
                autocomplete: keywordList,
            },
        };

        exports.ruby = ruby;
    }
    _M76();
    function _M77() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function simpleMode(states) {
            ensureState(states, "start");
            var states_ = {},
                meta = states.languageData || {},
                hasIndentation = false;
            for (var state in states)
                if (state != meta && states.hasOwnProperty(state)) {
                    var list = (states_[state] = []),
                        orig = states[state];
                    for (var i = 0; i < orig.length; i++) {
                        var data = orig[i];
                        list.push(new Rule(data, states));
                        if (data.indent || data.dedent) hasIndentation = true;
                    }
                }
            return {
                startState: function() {
                    return {
                        state: "start",
                        pending: null,
                        indent: hasIndentation ? [] : null,
                    };
                },
                copyState: function(state) {
                    var s = {
                        state: state.state,
                        pending: state.pending,
                        indent: state.indent && state.indent.slice(0),
                    };
                    if (state.stack) s.stack = state.stack.slice(0);
                    return s;
                },
                token: tokenFunction(states_),
                indent: indentFunction(states_, meta),
                languageData: meta,
            };
        }
        function ensureState(states, name) {
            if (!states.hasOwnProperty(name))
                throw new Error("Undefined state " + name + " in simple mode");
        }

        function toRegex(val, caret) {
            if (!val) return /(?:)/;
            var flags = "";
            if (val instanceof RegExp) {
                if (val.ignoreCase) flags = "i";
                val = val.source;
            } else {
                val = String(val);
            }
            return new RegExp(
                (caret === false ? "" : "^") + "(?:" + val + ")",
                flags
            );
        }

        function asToken(val) {
            if (!val) return null;
            if (val.apply) return val;
            if (typeof val == "string") return val.replace(/\./g, " ");
            var result = [];
            for (var i = 0; i < val.length; i++)
                result.push(val[i] && val[i].replace(/\./g, " "));
            return result;
        }

        function Rule(data, states) {
            if (data.next || data.push)
                ensureState(states, data.next || data.push);
            this.regex = toRegex(data.regex);
            this.token = asToken(data.token);
            this.data = data;
        }

        function tokenFunction(states) {
            return function(stream, state) {
                if (state.pending) {
                    var pend = state.pending.shift();
                    if (state.pending.length == 0) state.pending = null;
                    stream.pos += pend.text.length;
                    return pend.token;
                }

                var curState = states[state.state];
                for (var i = 0; i < curState.length; i++) {
                    var rule = curState[i];
                    var matches =
                        (!rule.data.sol || stream.sol()) &&
                        stream.match(rule.regex);
                    if (matches) {
                        if (rule.data.next) {
                            state.state = rule.data.next;
                        } else if (rule.data.push) {
                            (state.stack || (state.stack = [])).push(
                                state.state
                            );
                            state.state = rule.data.push;
                        } else if (
                            rule.data.pop &&
                            state.stack &&
                            state.stack.length
                        ) {
                            state.state = state.stack.pop();
                        }

                        if (rule.data.indent)
                            state.indent.push(
                                stream.indentation() + stream.indentUnit
                            );
                        if (rule.data.dedent) state.indent.pop();
                        var token = rule.token;
                        if (token && token.apply) token = token(matches);
                        if (
                            matches.length > 2 &&
                            rule.token &&
                            typeof rule.token != "string"
                        ) {
                            state.pending = [];
                            for (var j = 2; j < matches.length; j++)
                                if (matches[j])
                                    state.pending.push({
                                        text: matches[j],
                                        token: rule.token[j - 1],
                                    });
                            stream.backUp(
                                matches[0].length -
                                (matches[1] ? matches[1].length : 0)
                            );
                            return token[0];
                        } else if (token && token.join) {
                            return token[0];
                        } else {
                            return token;
                        }
                    }
                }
                stream.next();
                return null;
            };
        }

        function indentFunction(states, meta) {
            return function(state, textAfter) {
                if (
                    state.indent == null ||
                    (meta.dontIndentStates &&
                        meta.doneIndentState.indexOf(state.state) > -1)
                )
                    return null;

                var pos = state.indent.length - 1,
                    rules = states[state.state];
                scan: for (; ;) {
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        if (
                            rule.data.dedent &&
                            rule.data.dedentIfLineStart !== false
                        ) {
                            var m = rule.regex.exec(textAfter);
                            if (m && m[0]) {
                                pos--;
                                if (rule.next || rule.push)
                                    rules = states[rule.next || rule.push];
                                textAfter = textAfter.slice(m[0].length);
                                continue scan;
                            }
                        }
                    }
                    break;
                }
                return pos < 0 ? 0 : state.indent[pos];
            };
        }

        const rust = simpleMode({
            start: [
                // string and byte string
                { regex: /b?"/, token: "string", next: "string" },
                // raw string and raw byte string
                { regex: /b?r"/, token: "string", next: "string_raw" },
                { regex: /b?r#+"/, token: "string", next: "string_raw_hash" },
                // character
                {
                    regex: /'(?:[^'\\]|\\(?:[nrt0'"]|x[\da-fA-F]{2}|u\{[\da-fA-F]{6}\}))'/,
                    token: "string.special",
                },
                // byte
                {
                    regex: /b'(?:[^']|\\(?:['\\nrt0]|x[\da-fA-F]{2}))'/,
                    token: "string.special",
                },

                {
                    regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,
                    token: "number",
                },
                {
                    regex: /(let(?:\s+mut)?|fn|enum|mod|struct|type|union)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,
                    token: ["keyword", null, "def"],
                },
                {
                    regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
                    token: "keyword",
                },
                {
                    regex: /\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\b/,
                    token: "atom",
                },
                {
                    regex: /\b(?:true|false|Some|None|Ok|Err)\b/,
                    token: "builtin",
                },
                {
                    regex: /\b(fn)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,
                    token: ["keyword", null, "def"],
                },
                { regex: /#!?\[.*\]/, token: "meta" },
                { regex: /\/\/.*/, token: "comment" },
                { regex: /\/\*/, token: "comment", next: "comment" },
                { regex: /[-+\/*=<>!]+/, token: "operator" },
                { regex: /[a-zA-Z_]\w*!/, token: "macroName" },
                { regex: /[a-zA-Z_]\w*/, token: "variable" },
                { regex: /[\{\[\(]/, indent: true },
                { regex: /[\}\]\)]/, dedent: true },
            ],
            string: [
                { regex: /"/, token: "string", next: "start" },
                { regex: /(?:[^\\"]|\\(?:.|$))*/, token: "string" },
            ],
            string_raw: [
                { regex: /"/, token: "string", next: "start" },
                { regex: /[^"]*/, token: "string" },
            ],
            string_raw_hash: [
                { regex: /"#+/, token: "string", next: "start" },
                { regex: /(?:[^"]|"(?!#))*/, token: "string" },
            ],
            comment: [
                { regex: /.*?\*\//, token: "comment", next: "start" },
                { regex: /.*/, token: "comment" },
            ],
            languageData: {
                dontIndentStates: ["comment"],
                indentOnInput: /^\s*\}$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
            },
        });

        exports.rust = rust;
    }
    _M77();
    function _M78() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkCSS(parserConfig) {
            parserConfig = { ...defaults, ...parserConfig };
            var inline = parserConfig.inline;

            var tokenHooks = parserConfig.tokenHooks,
                documentTypes = parserConfig.documentTypes || {},
                mediaTypes = parserConfig.mediaTypes || {},
                mediaFeatures = parserConfig.mediaFeatures || {},
                mediaValueKeywords = parserConfig.mediaValueKeywords || {},
                propertyKeywords = parserConfig.propertyKeywords || {},
                nonStandardPropertyKeywords =
                    parserConfig.nonStandardPropertyKeywords || {},
                fontProperties = parserConfig.fontProperties || {},
                counterDescriptors = parserConfig.counterDescriptors || {},
                colorKeywords = parserConfig.colorKeywords || {},
                valueKeywords = parserConfig.valueKeywords || {},
                allowNested = parserConfig.allowNested,
                lineComment = parserConfig.lineComment,
                supportsAtComponent = parserConfig.supportsAtComponent === true,
                highlightNonStandardPropertyKeywords =
                    parserConfig.highlightNonStandardPropertyKeywords !== false;

            var type, override;
            function ret(style, tp) {
                type = tp;
                return style;
            }

            // Tokenizers

            function tokenBase(stream, state) {
                var ch = stream.next();
                if (tokenHooks[ch]) {
                    var result = tokenHooks[ch](stream, state);
                    if (result !== false) return result;
                }
                if (ch == "@") {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("def", stream.current());
                } else if (
                    ch == "=" ||
                    ((ch == "~" || ch == "|") && stream.eat("="))
                ) {
                    return ret(null, "compare");
                } else if (ch == '"' || ch == "'") {
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                } else if (ch == "#") {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("atom", "hash");
                } else if (ch == "!") {
                    stream.match(/^\s*\w*/);
                    return ret("keyword", "important");
                } else if (/\d/.test(ch) || (ch == "." && stream.eat(/\d/))) {
                    stream.eatWhile(/[\w.%]/);
                    return ret("number", "unit");
                } else if (ch === "-") {
                    if (/[\d.]/.test(stream.peek())) {
                        stream.eatWhile(/[\w.%]/);
                        return ret("number", "unit");
                    } else if (stream.match(/^-[\w\\\-]*/)) {
                        stream.eatWhile(/[\w\\\-]/);
                        if (stream.match(/^\s*:/, false))
                            return ret("def", "variable-definition");
                        return ret("variableName", "variable");
                    } else if (stream.match(/^\w+-/)) {
                        return ret("meta", "meta");
                    }
                } else if (/[,+>*\/]/.test(ch)) {
                    return ret(null, "select-op");
                } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
                    return ret("qualifier", "qualifier");
                } else if (/[:;{}\[\]\(\)]/.test(ch)) {
                    return ret(null, ch);
                } else if (stream.match(/^[\w-.]+(?=\()/)) {
                    if (
                        /^(url(-prefix)?|domain|regexp)$/i.test(
                            stream.current()
                        )
                    ) {
                        state.tokenize = tokenParenthesized;
                    }
                    return ret("variableName.function", "variable");
                } else if (/[\w\\\-]/.test(ch)) {
                    stream.eatWhile(/[\w\\\-]/);
                    return ret("property", "word");
                } else {
                    return ret(null, null);
                }
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        ch;
                    while ((ch = stream.next()) != null) {
                        if (ch == quote && !escaped) {
                            if (quote == ")") stream.backUp(1);
                            break;
                        }
                        escaped = !escaped && ch == "\\";
                    }
                    if (ch == quote || (!escaped && quote != ")"))
                        state.tokenize = null;
                    return ret("string", "string");
                };
            }

            function tokenParenthesized(stream, state) {
                stream.next(); // Must be '('
                if (!stream.match(/^\s*[\"\')]/, false))
                    state.tokenize = tokenString(")");
                else state.tokenize = null;
                return ret(null, "(");
            }

            // Context management

            function Context(type, indent, prev) {
                this.type = type;
                this.indent = indent;
                this.prev = prev;
            }

            function pushContext(state, stream, type, indent) {
                state.context = new Context(
                    type,
                    stream.indentation() +
                    (indent === false ? 0 : stream.indentUnit),
                    state.context
                );
                return type;
            }

            function popContext(state) {
                if (state.context.prev) state.context = state.context.prev;
                return state.context.type;
            }

            function pass(type, stream, state) {
                return states[state.context.type](type, stream, state);
            }
            function popAndPass(type, stream, state, n) {
                for (var i = n || 1; i > 0; i--)
                    state.context = state.context.prev;
                return pass(type, stream, state);
            }

            // Parser

            function wordAsValue(stream) {
                var word = stream.current().toLowerCase();
                if (valueKeywords.hasOwnProperty(word)) override = "atom";
                else if (colorKeywords.hasOwnProperty(word))
                    override = "keyword";
                else override = "variable";
            }

            var states = {};

            states.top = function(type, stream, state) {
                if (type == "{") {
                    return pushContext(state, stream, "block");
                } else if (type == "}" && state.context.prev) {
                    return popContext(state);
                } else if (supportsAtComponent && /@component/i.test(type)) {
                    return pushContext(state, stream, "atComponentBlock");
                } else if (/^@(-moz-)?document$/i.test(type)) {
                    return pushContext(state, stream, "documentTypes");
                } else if (
                    /^@(media|supports|(-moz-)?document|import)$/i.test(type)
                ) {
                    return pushContext(state, stream, "atBlock");
                } else if (/^@(font-face|counter-style)/i.test(type)) {
                    state.stateArg = type;
                    return "restricted_atBlock_before";
                } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {
                    return "keyframes";
                } else if (type && type.charAt(0) == "@") {
                    return pushContext(state, stream, "at");
                } else if (type == "hash") {
                    override = "builtin";
                } else if (type == "word") {
                    override = "tag";
                } else if (type == "variable-definition") {
                    return "maybeprop";
                } else if (type == "interpolation") {
                    return pushContext(state, stream, "interpolation");
                } else if (type == ":") {
                    return "pseudo";
                } else if (allowNested && type == "(") {
                    return pushContext(state, stream, "parens");
                }
                return state.context.type;
            };

            states.block = function(type, stream, state) {
                if (type == "word") {
                    var word = stream.current().toLowerCase();
                    if (propertyKeywords.hasOwnProperty(word)) {
                        override = "property";
                        return "maybeprop";
                    } else if (
                        nonStandardPropertyKeywords.hasOwnProperty(word)
                    ) {
                        override = highlightNonStandardPropertyKeywords
                            ? "string.special"
                            : "property";
                        return "maybeprop";
                    } else if (allowNested) {
                        override = stream.match(/^\s*:(?:\s|$)/, false)
                            ? "property"
                            : "tag";
                        return "block";
                    } else {
                        override = "error";
                        return "maybeprop";
                    }
                } else if (type == "meta") {
                    return "block";
                } else if (
                    !allowNested &&
                    (type == "hash" || type == "qualifier")
                ) {
                    override = "error";
                    return "block";
                } else {
                    return states.top(type, stream, state);
                }
            };

            states.maybeprop = function(type, stream, state) {
                if (type == ":") return pushContext(state, stream, "prop");
                return pass(type, stream, state);
            };

            states.prop = function(type, stream, state) {
                if (type == ";") return popContext(state);
                if (type == "{" && allowNested)
                    return pushContext(state, stream, "propBlock");
                if (type == "}" || type == "{")
                    return popAndPass(type, stream, state);
                if (type == "(") return pushContext(state, stream, "parens");

                if (
                    type == "hash" &&
                    !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(
                        stream.current()
                    )
                ) {
                    override = "error";
                } else if (type == "word") {
                    wordAsValue(stream);
                } else if (type == "interpolation") {
                    return pushContext(state, stream, "interpolation");
                }
                return "prop";
            };

            states.propBlock = function(type, _stream, state) {
                if (type == "}") return popContext(state);
                if (type == "word") {
                    override = "property";
                    return "maybeprop";
                }
                return state.context.type;
            };

            states.parens = function(type, stream, state) {
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state);
                if (type == ")") return popContext(state);
                if (type == "(") return pushContext(state, stream, "parens");
                if (type == "interpolation")
                    return pushContext(state, stream, "interpolation");
                if (type == "word") wordAsValue(stream);
                return "parens";
            };

            states.pseudo = function(type, stream, state) {
                if (type == "meta") return "pseudo";

                if (type == "word") {
                    override = "variableName.constant";
                    return state.context.type;
                }
                return pass(type, stream, state);
            };

            states.documentTypes = function(type, stream, state) {
                if (
                    type == "word" &&
                    documentTypes.hasOwnProperty(stream.current())
                ) {
                    override = "tag";
                    return state.context.type;
                } else {
                    return states.atBlock(type, stream, state);
                }
            };

            states.atBlock = function(type, stream, state) {
                if (type == "(")
                    return pushContext(state, stream, "atBlock_parens");
                if (type == "}" || type == ";")
                    return popAndPass(type, stream, state);
                if (type == "{")
                    return (
                        popContext(state) &&
                        pushContext(
                            state,
                            stream,
                            allowNested ? "block" : "top"
                        )
                    );

                if (type == "interpolation")
                    return pushContext(state, stream, "interpolation");

                if (type == "word") {
                    var word = stream.current().toLowerCase();
                    if (
                        word == "only" ||
                        word == "not" ||
                        word == "and" ||
                        word == "or"
                    )
                        override = "keyword";
                    else if (mediaTypes.hasOwnProperty(word))
                        override = "attribute";
                    else if (mediaFeatures.hasOwnProperty(word))
                        override = "property";
                    else if (mediaValueKeywords.hasOwnProperty(word))
                        override = "keyword";
                    else if (propertyKeywords.hasOwnProperty(word))
                        override = "property";
                    else if (nonStandardPropertyKeywords.hasOwnProperty(word))
                        override = highlightNonStandardPropertyKeywords
                            ? "string.special"
                            : "property";
                    else if (valueKeywords.hasOwnProperty(word))
                        override = "atom";
                    else if (colorKeywords.hasOwnProperty(word))
                        override = "keyword";
                    else override = "error";
                }
                return state.context.type;
            };

            states.atComponentBlock = function(type, stream, state) {
                if (type == "}") return popAndPass(type, stream, state);
                if (type == "{")
                    return (
                        popContext(state) &&
                        pushContext(
                            state,
                            stream,
                            allowNested ? "block" : "top",
                            false
                        )
                    );
                if (type == "word") override = "error";
                return state.context.type;
            };

            states.atBlock_parens = function(type, stream, state) {
                if (type == ")") return popContext(state);
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state, 2);
                return states.atBlock(type, stream, state);
            };

            states.restricted_atBlock_before = function(type, stream, state) {
                if (type == "{")
                    return pushContext(state, stream, "restricted_atBlock");
                if (type == "word" && state.stateArg == "@counter-style") {
                    override = "variable";
                    return "restricted_atBlock_before";
                }
                return pass(type, stream, state);
            };

            states.restricted_atBlock = function(type, stream, state) {
                if (type == "}") {
                    state.stateArg = null;
                    return popContext(state);
                }
                if (type == "word") {
                    if (
                        (state.stateArg == "@font-face" &&
                            !fontProperties.hasOwnProperty(
                                stream.current().toLowerCase()
                            )) ||
                        (state.stateArg == "@counter-style" &&
                            !counterDescriptors.hasOwnProperty(
                                stream.current().toLowerCase()
                            ))
                    )
                        override = "error";
                    else override = "property";
                    return "maybeprop";
                }
                return "restricted_atBlock";
            };

            states.keyframes = function(type, stream, state) {
                if (type == "word") {
                    override = "variable";
                    return "keyframes";
                }
                if (type == "{") return pushContext(state, stream, "top");
                return pass(type, stream, state);
            };

            states.at = function(type, stream, state) {
                if (type == ";") return popContext(state);
                if (type == "{" || type == "}")
                    return popAndPass(type, stream, state);
                if (type == "word") override = "tag";
                else if (type == "hash") override = "builtin";
                return "at";
            };

            states.interpolation = function(type, stream, state) {
                if (type == "}") return popContext(state);
                if (type == "{" || type == ";")
                    return popAndPass(type, stream, state);
                if (type == "word") override = "variable";
                else if (type != "variable" && type != "(" && type != ")")
                    override = "error";
                return "interpolation";
            };

            return {
                startState: function() {
                    return {
                        tokenize: null,
                        state: inline ? "block" : "top",
                        stateArg: null,
                        context: new Context(inline ? "block" : "top", 0, null),
                    };
                },

                token: function(stream, state) {
                    if (!state.tokenize && stream.eatSpace()) return null;
                    var style = (state.tokenize || tokenBase)(stream, state);
                    if (style && typeof style == "object") {
                        type = style[1];
                        style = style[0];
                    }
                    override = style;
                    if (type != "comment")
                        state.state = states[state.state](type, stream, state);
                    return override;
                },

                indent: function(state, textAfter, iCx) {
                    var cx = state.context,
                        ch = textAfter && textAfter.charAt(0);
                    var indent = cx.indent;
                    if (cx.type == "prop" && (ch == "}" || ch == ")"))
                        cx = cx.prev;
                    if (cx.prev) {
                        if (
                            ch == "}" &&
                            (cx.type == "block" ||
                                cx.type == "top" ||
                                cx.type == "interpolation" ||
                                cx.type == "restricted_atBlock")
                        ) {
                            // Resume indentation from parent context.
                            cx = cx.prev;
                            indent = cx.indent;
                        } else if (
                            (ch == ")" &&
                                (cx.type == "parens" ||
                                    cx.type == "atBlock_parens")) ||
                            (ch == "{" &&
                                (cx.type == "at" || cx.type == "atBlock"))
                        ) {
                            // Dedent relative to current context.
                            indent = Math.max(0, cx.indent - iCx.unit);
                        }
                    }
                    return indent;
                },

                languageData: {
                    indentOnInput: /^\s*\}$/,
                    commentTokens: {
                        line: lineComment,
                        block: { open: "/*", close: "*/" },
                    },
                    autocomplete: allWords,
                },
            };
        }
        function keySet(array) {
            var keys = {};
            for (var i = 0; i < array.length; ++i) {
                keys[array[i].toLowerCase()] = true;
            }
            return keys;
        }

        var documentTypes_ = ["domain", "regexp", "url", "url-prefix"],
            documentTypes = keySet(documentTypes_);

        var mediaTypes_ = [
            "all",
            "aural",
            "braille",
            "handheld",
            "print",
            "projection",
            "screen",
            "tty",
            "tv",
            "embossed",
        ],
            mediaTypes = keySet(mediaTypes_);

        var mediaFeatures_ = [
            "width",
            "min-width",
            "max-width",
            "height",
            "min-height",
            "max-height",
            "device-width",
            "min-device-width",
            "max-device-width",
            "device-height",
            "min-device-height",
            "max-device-height",
            "aspect-ratio",
            "min-aspect-ratio",
            "max-aspect-ratio",
            "device-aspect-ratio",
            "min-device-aspect-ratio",
            "max-device-aspect-ratio",
            "color",
            "min-color",
            "max-color",
            "color-index",
            "min-color-index",
            "max-color-index",
            "monochrome",
            "min-monochrome",
            "max-monochrome",
            "resolution",
            "min-resolution",
            "max-resolution",
            "scan",
            "grid",
            "orientation",
            "device-pixel-ratio",
            "min-device-pixel-ratio",
            "max-device-pixel-ratio",
            "pointer",
            "any-pointer",
            "hover",
            "any-hover",
            "prefers-color-scheme",
            "dynamic-range",
            "video-dynamic-range",
        ],
            mediaFeatures = keySet(mediaFeatures_);

        var mediaValueKeywords_ = [
            "landscape",
            "portrait",
            "none",
            "coarse",
            "fine",
            "on-demand",
            "hover",
            "interlace",
            "progressive",
            "dark",
            "light",
            "standard",
            "high",
        ],
            mediaValueKeywords = keySet(mediaValueKeywords_);

        var propertyKeywords_ = [
            "align-content",
            "align-items",
            "align-self",
            "alignment-adjust",
            "alignment-baseline",
            "all",
            "anchor-point",
            "animation",
            "animation-delay",
            "animation-direction",
            "animation-duration",
            "animation-fill-mode",
            "animation-iteration-count",
            "animation-name",
            "animation-play-state",
            "animation-timing-function",
            "appearance",
            "azimuth",
            "backdrop-filter",
            "backface-visibility",
            "background",
            "background-attachment",
            "background-blend-mode",
            "background-clip",
            "background-color",
            "background-image",
            "background-origin",
            "background-position",
            "background-position-x",
            "background-position-y",
            "background-repeat",
            "background-size",
            "baseline-shift",
            "binding",
            "bleed",
            "block-size",
            "bookmark-label",
            "bookmark-level",
            "bookmark-state",
            "bookmark-target",
            "border",
            "border-bottom",
            "border-bottom-color",
            "border-bottom-left-radius",
            "border-bottom-right-radius",
            "border-bottom-style",
            "border-bottom-width",
            "border-collapse",
            "border-color",
            "border-image",
            "border-image-outset",
            "border-image-repeat",
            "border-image-slice",
            "border-image-source",
            "border-image-width",
            "border-left",
            "border-left-color",
            "border-left-style",
            "border-left-width",
            "border-radius",
            "border-right",
            "border-right-color",
            "border-right-style",
            "border-right-width",
            "border-spacing",
            "border-style",
            "border-top",
            "border-top-color",
            "border-top-left-radius",
            "border-top-right-radius",
            "border-top-style",
            "border-top-width",
            "border-width",
            "bottom",
            "box-decoration-break",
            "box-shadow",
            "box-sizing",
            "break-after",
            "break-before",
            "break-inside",
            "caption-side",
            "caret-color",
            "clear",
            "clip",
            "color",
            "color-profile",
            "column-count",
            "column-fill",
            "column-gap",
            "column-rule",
            "column-rule-color",
            "column-rule-style",
            "column-rule-width",
            "column-span",
            "column-width",
            "columns",
            "contain",
            "content",
            "counter-increment",
            "counter-reset",
            "crop",
            "cue",
            "cue-after",
            "cue-before",
            "cursor",
            "direction",
            "display",
            "dominant-baseline",
            "drop-initial-after-adjust",
            "drop-initial-after-align",
            "drop-initial-before-adjust",
            "drop-initial-before-align",
            "drop-initial-size",
            "drop-initial-value",
            "elevation",
            "empty-cells",
            "fit",
            "fit-content",
            "fit-position",
            "flex",
            "flex-basis",
            "flex-direction",
            "flex-flow",
            "flex-grow",
            "flex-shrink",
            "flex-wrap",
            "float",
            "float-offset",
            "flow-from",
            "flow-into",
            "font",
            "font-family",
            "font-feature-settings",
            "font-kerning",
            "font-language-override",
            "font-optical-sizing",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-synthesis",
            "font-variant",
            "font-variant-alternates",
            "font-variant-caps",
            "font-variant-east-asian",
            "font-variant-ligatures",
            "font-variant-numeric",
            "font-variant-position",
            "font-variation-settings",
            "font-weight",
            "gap",
            "grid",
            "grid-area",
            "grid-auto-columns",
            "grid-auto-flow",
            "grid-auto-rows",
            "grid-column",
            "grid-column-end",
            "grid-column-gap",
            "grid-column-start",
            "grid-gap",
            "grid-row",
            "grid-row-end",
            "grid-row-gap",
            "grid-row-start",
            "grid-template",
            "grid-template-areas",
            "grid-template-columns",
            "grid-template-rows",
            "hanging-punctuation",
            "height",
            "hyphens",
            "icon",
            "image-orientation",
            "image-rendering",
            "image-resolution",
            "inline-box-align",
            "inset",
            "inset-block",
            "inset-block-end",
            "inset-block-start",
            "inset-inline",
            "inset-inline-end",
            "inset-inline-start",
            "isolation",
            "justify-content",
            "justify-items",
            "justify-self",
            "left",
            "letter-spacing",
            "line-break",
            "line-height",
            "line-height-step",
            "line-stacking",
            "line-stacking-ruby",
            "line-stacking-shift",
            "line-stacking-strategy",
            "list-style",
            "list-style-image",
            "list-style-position",
            "list-style-type",
            "margin",
            "margin-bottom",
            "margin-left",
            "margin-right",
            "margin-top",
            "marks",
            "marquee-direction",
            "marquee-loop",
            "marquee-play-count",
            "marquee-speed",
            "marquee-style",
            "mask-clip",
            "mask-composite",
            "mask-image",
            "mask-mode",
            "mask-origin",
            "mask-position",
            "mask-repeat",
            "mask-size",
            "mask-type",
            "max-block-size",
            "max-height",
            "max-inline-size",
            "max-width",
            "min-block-size",
            "min-height",
            "min-inline-size",
            "min-width",
            "mix-blend-mode",
            "move-to",
            "nav-down",
            "nav-index",
            "nav-left",
            "nav-right",
            "nav-up",
            "object-fit",
            "object-position",
            "offset",
            "offset-anchor",
            "offset-distance",
            "offset-path",
            "offset-position",
            "offset-rotate",
            "opacity",
            "order",
            "orphans",
            "outline",
            "outline-color",
            "outline-offset",
            "outline-style",
            "outline-width",
            "overflow",
            "overflow-style",
            "overflow-wrap",
            "overflow-x",
            "overflow-y",
            "padding",
            "padding-bottom",
            "padding-left",
            "padding-right",
            "padding-top",
            "page",
            "page-break-after",
            "page-break-before",
            "page-break-inside",
            "page-policy",
            "pause",
            "pause-after",
            "pause-before",
            "perspective",
            "perspective-origin",
            "pitch",
            "pitch-range",
            "place-content",
            "place-items",
            "place-self",
            "play-during",
            "position",
            "presentation-level",
            "punctuation-trim",
            "quotes",
            "region-break-after",
            "region-break-before",
            "region-break-inside",
            "region-fragment",
            "rendering-intent",
            "resize",
            "rest",
            "rest-after",
            "rest-before",
            "richness",
            "right",
            "rotate",
            "rotation",
            "rotation-point",
            "row-gap",
            "ruby-align",
            "ruby-overhang",
            "ruby-position",
            "ruby-span",
            "scale",
            "scroll-behavior",
            "scroll-margin",
            "scroll-margin-block",
            "scroll-margin-block-end",
            "scroll-margin-block-start",
            "scroll-margin-bottom",
            "scroll-margin-inline",
            "scroll-margin-inline-end",
            "scroll-margin-inline-start",
            "scroll-margin-left",
            "scroll-margin-right",
            "scroll-margin-top",
            "scroll-padding",
            "scroll-padding-block",
            "scroll-padding-block-end",
            "scroll-padding-block-start",
            "scroll-padding-bottom",
            "scroll-padding-inline",
            "scroll-padding-inline-end",
            "scroll-padding-inline-start",
            "scroll-padding-left",
            "scroll-padding-right",
            "scroll-padding-top",
            "scroll-snap-align",
            "scroll-snap-type",
            "shape-image-threshold",
            "shape-inside",
            "shape-margin",
            "shape-outside",
            "size",
            "speak",
            "speak-as",
            "speak-header",
            "speak-numeral",
            "speak-punctuation",
            "speech-rate",
            "stress",
            "string-set",
            "tab-size",
            "table-layout",
            "target",
            "target-name",
            "target-new",
            "target-position",
            "text-align",
            "text-align-last",
            "text-combine-upright",
            "text-decoration",
            "text-decoration-color",
            "text-decoration-line",
            "text-decoration-skip",
            "text-decoration-skip-ink",
            "text-decoration-style",
            "text-emphasis",
            "text-emphasis-color",
            "text-emphasis-position",
            "text-emphasis-style",
            "text-height",
            "text-indent",
            "text-justify",
            "text-orientation",
            "text-outline",
            "text-overflow",
            "text-rendering",
            "text-shadow",
            "text-size-adjust",
            "text-space-collapse",
            "text-transform",
            "text-underline-position",
            "text-wrap",
            "top",
            "touch-action",
            "transform",
            "transform-origin",
            "transform-style",
            "transition",
            "transition-delay",
            "transition-duration",
            "transition-property",
            "transition-timing-function",
            "translate",
            "unicode-bidi",
            "user-select",
            "vertical-align",
            "visibility",
            "voice-balance",
            "voice-duration",
            "voice-family",
            "voice-pitch",
            "voice-range",
            "voice-rate",
            "voice-stress",
            "voice-volume",
            "volume",
            "white-space",
            "widows",
            "width",
            "will-change",
            "word-break",
            "word-spacing",
            "word-wrap",
            "writing-mode",
            "z-index",
            // SVG-specific
            "clip-path",
            "clip-rule",
            "mask",
            "enable-background",
            "filter",
            "flood-color",
            "flood-opacity",
            "lighting-color",
            "stop-color",
            "stop-opacity",
            "pointer-events",
            "color-interpolation",
            "color-interpolation-filters",
            "color-rendering",
            "fill",
            "fill-opacity",
            "fill-rule",
            "image-rendering",
            "marker",
            "marker-end",
            "marker-mid",
            "marker-start",
            "paint-order",
            "shape-rendering",
            "stroke",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-rendering",
            "baseline-shift",
            "dominant-baseline",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "text-anchor",
            "writing-mode",
        ],
            propertyKeywords$1 = keySet(propertyKeywords_);

        var nonStandardPropertyKeywords_ = [
            "accent-color",
            "aspect-ratio",
            "border-block",
            "border-block-color",
            "border-block-end",
            "border-block-end-color",
            "border-block-end-style",
            "border-block-end-width",
            "border-block-start",
            "border-block-start-color",
            "border-block-start-style",
            "border-block-start-width",
            "border-block-style",
            "border-block-width",
            "border-inline",
            "border-inline-color",
            "border-inline-end",
            "border-inline-end-color",
            "border-inline-end-style",
            "border-inline-end-width",
            "border-inline-start",
            "border-inline-start-color",
            "border-inline-start-style",
            "border-inline-start-width",
            "border-inline-style",
            "border-inline-width",
            "content-visibility",
            "margin-block",
            "margin-block-end",
            "margin-block-start",
            "margin-inline",
            "margin-inline-end",
            "margin-inline-start",
            "overflow-anchor",
            "overscroll-behavior",
            "padding-block",
            "padding-block-end",
            "padding-block-start",
            "padding-inline",
            "padding-inline-end",
            "padding-inline-start",
            "scroll-snap-stop",
            "scrollbar-3d-light-color",
            "scrollbar-arrow-color",
            "scrollbar-base-color",
            "scrollbar-dark-shadow-color",
            "scrollbar-face-color",
            "scrollbar-highlight-color",
            "scrollbar-shadow-color",
            "scrollbar-track-color",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "shape-inside",
            "zoom",
        ],
            nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);

        var fontProperties_ = [
            "font-display",
            "font-family",
            "src",
            "unicode-range",
            "font-variant",
            "font-feature-settings",
            "font-stretch",
            "font-weight",
            "font-style",
        ],
            fontProperties$1 = keySet(fontProperties_);

        var counterDescriptors_ = [
            "additive-symbols",
            "fallback",
            "negative",
            "pad",
            "prefix",
            "range",
            "speak-as",
            "suffix",
            "symbols",
            "system",
        ],
            counterDescriptors = keySet(counterDescriptors_);

        var colorKeywords_ = [
            "aliceblue",
            "antiquewhite",
            "aqua",
            "aquamarine",
            "azure",
            "beige",
            "bisque",
            "black",
            "blanchedalmond",
            "blue",
            "blueviolet",
            "brown",
            "burlywood",
            "cadetblue",
            "chartreuse",
            "chocolate",
            "coral",
            "cornflowerblue",
            "cornsilk",
            "crimson",
            "cyan",
            "darkblue",
            "darkcyan",
            "darkgoldenrod",
            "darkgray",
            "darkgreen",
            "darkgrey",
            "darkkhaki",
            "darkmagenta",
            "darkolivegreen",
            "darkorange",
            "darkorchid",
            "darkred",
            "darksalmon",
            "darkseagreen",
            "darkslateblue",
            "darkslategray",
            "darkslategrey",
            "darkturquoise",
            "darkviolet",
            "deeppink",
            "deepskyblue",
            "dimgray",
            "dimgrey",
            "dodgerblue",
            "firebrick",
            "floralwhite",
            "forestgreen",
            "fuchsia",
            "gainsboro",
            "ghostwhite",
            "gold",
            "goldenrod",
            "gray",
            "grey",
            "green",
            "greenyellow",
            "honeydew",
            "hotpink",
            "indianred",
            "indigo",
            "ivory",
            "khaki",
            "lavender",
            "lavenderblush",
            "lawngreen",
            "lemonchiffon",
            "lightblue",
            "lightcoral",
            "lightcyan",
            "lightgoldenrodyellow",
            "lightgray",
            "lightgreen",
            "lightgrey",
            "lightpink",
            "lightsalmon",
            "lightseagreen",
            "lightskyblue",
            "lightslategray",
            "lightslategrey",
            "lightsteelblue",
            "lightyellow",
            "lime",
            "limegreen",
            "linen",
            "magenta",
            "maroon",
            "mediumaquamarine",
            "mediumblue",
            "mediumorchid",
            "mediumpurple",
            "mediumseagreen",
            "mediumslateblue",
            "mediumspringgreen",
            "mediumturquoise",
            "mediumvioletred",
            "midnightblue",
            "mintcream",
            "mistyrose",
            "moccasin",
            "navajowhite",
            "navy",
            "oldlace",
            "olive",
            "olivedrab",
            "orange",
            "orangered",
            "orchid",
            "palegoldenrod",
            "palegreen",
            "paleturquoise",
            "palevioletred",
            "papayawhip",
            "peachpuff",
            "peru",
            "pink",
            "plum",
            "powderblue",
            "purple",
            "rebeccapurple",
            "red",
            "rosybrown",
            "royalblue",
            "saddlebrown",
            "salmon",
            "sandybrown",
            "seagreen",
            "seashell",
            "sienna",
            "silver",
            "skyblue",
            "slateblue",
            "slategray",
            "slategrey",
            "snow",
            "springgreen",
            "steelblue",
            "tan",
            "teal",
            "thistle",
            "tomato",
            "turquoise",
            "violet",
            "wheat",
            "white",
            "whitesmoke",
            "yellow",
            "yellowgreen",
        ],
            colorKeywords$1 = keySet(colorKeywords_);

        var valueKeywords_ = [
            "above",
            "absolute",
            "activeborder",
            "additive",
            "activecaption",
            "afar",
            "after-white-space",
            "ahead",
            "alias",
            "all",
            "all-scroll",
            "alphabetic",
            "alternate",
            "always",
            "amharic",
            "amharic-abegede",
            "antialiased",
            "appworkspace",
            "arabic-indic",
            "armenian",
            "asterisks",
            "attr",
            "auto",
            "auto-flow",
            "avoid",
            "avoid-column",
            "avoid-page",
            "avoid-region",
            "axis-pan",
            "background",
            "backwards",
            "baseline",
            "below",
            "bidi-override",
            "binary",
            "bengali",
            "blink",
            "block",
            "block-axis",
            "blur",
            "bold",
            "bolder",
            "border",
            "border-box",
            "both",
            "bottom",
            "break",
            "break-all",
            "break-word",
            "brightness",
            "bullets",
            "button",
            "buttonface",
            "buttonhighlight",
            "buttonshadow",
            "buttontext",
            "calc",
            "cambodian",
            "capitalize",
            "caps-lock-indicator",
            "caption",
            "captiontext",
            "caret",
            "cell",
            "center",
            "checkbox",
            "circle",
            "cjk-decimal",
            "cjk-earthly-branch",
            "cjk-heavenly-stem",
            "cjk-ideographic",
            "clear",
            "clip",
            "close-quote",
            "col-resize",
            "collapse",
            "color",
            "color-burn",
            "color-dodge",
            "column",
            "column-reverse",
            "compact",
            "condensed",
            "conic-gradient",
            "contain",
            "content",
            "contents",
            "content-box",
            "context-menu",
            "continuous",
            "contrast",
            "copy",
            "counter",
            "counters",
            "cover",
            "crop",
            "cross",
            "crosshair",
            "cubic-bezier",
            "currentcolor",
            "cursive",
            "cyclic",
            "darken",
            "dashed",
            "decimal",
            "decimal-leading-zero",
            "default",
            "default-button",
            "dense",
            "destination-atop",
            "destination-in",
            "destination-out",
            "destination-over",
            "devanagari",
            "difference",
            "disc",
            "discard",
            "disclosure-closed",
            "disclosure-open",
            "document",
            "dot-dash",
            "dot-dot-dash",
            "dotted",
            "double",
            "down",
            "drop-shadow",
            "e-resize",
            "ease",
            "ease-in",
            "ease-in-out",
            "ease-out",
            "element",
            "ellipse",
            "ellipsis",
            "embed",
            "end",
            "ethiopic",
            "ethiopic-abegede",
            "ethiopic-abegede-am-et",
            "ethiopic-abegede-gez",
            "ethiopic-abegede-ti-er",
            "ethiopic-abegede-ti-et",
            "ethiopic-halehame-aa-er",
            "ethiopic-halehame-aa-et",
            "ethiopic-halehame-am-et",
            "ethiopic-halehame-gez",
            "ethiopic-halehame-om-et",
            "ethiopic-halehame-sid-et",
            "ethiopic-halehame-so-et",
            "ethiopic-halehame-ti-er",
            "ethiopic-halehame-ti-et",
            "ethiopic-halehame-tig",
            "ethiopic-numeric",
            "ew-resize",
            "exclusion",
            "expanded",
            "extends",
            "extra-condensed",
            "extra-expanded",
            "fantasy",
            "fast",
            "fill",
            "fill-box",
            "fixed",
            "flat",
            "flex",
            "flex-end",
            "flex-start",
            "footnotes",
            "forwards",
            "from",
            "geometricPrecision",
            "georgian",
            "grayscale",
            "graytext",
            "grid",
            "groove",
            "gujarati",
            "gurmukhi",
            "hand",
            "hangul",
            "hangul-consonant",
            "hard-light",
            "hebrew",
            "help",
            "hidden",
            "hide",
            "higher",
            "highlight",
            "highlighttext",
            "hiragana",
            "hiragana-iroha",
            "horizontal",
            "hsl",
            "hsla",
            "hue",
            "hue-rotate",
            "icon",
            "ignore",
            "inactiveborder",
            "inactivecaption",
            "inactivecaptiontext",
            "infinite",
            "infobackground",
            "infotext",
            "inherit",
            "initial",
            "inline",
            "inline-axis",
            "inline-block",
            "inline-flex",
            "inline-grid",
            "inline-table",
            "inset",
            "inside",
            "intrinsic",
            "invert",
            "italic",
            "japanese-formal",
            "japanese-informal",
            "justify",
            "kannada",
            "katakana",
            "katakana-iroha",
            "keep-all",
            "khmer",
            "korean-hangul-formal",
            "korean-hanja-formal",
            "korean-hanja-informal",
            "landscape",
            "lao",
            "large",
            "larger",
            "left",
            "level",
            "lighter",
            "lighten",
            "line-through",
            "linear",
            "linear-gradient",
            "lines",
            "list-item",
            "listbox",
            "listitem",
            "local",
            "logical",
            "loud",
            "lower",
            "lower-alpha",
            "lower-armenian",
            "lower-greek",
            "lower-hexadecimal",
            "lower-latin",
            "lower-norwegian",
            "lower-roman",
            "lowercase",
            "ltr",
            "luminosity",
            "malayalam",
            "manipulation",
            "match",
            "matrix",
            "matrix3d",
            "media-play-button",
            "media-slider",
            "media-sliderthumb",
            "media-volume-slider",
            "media-volume-sliderthumb",
            "medium",
            "menu",
            "menulist",
            "menulist-button",
            "menutext",
            "message-box",
            "middle",
            "min-intrinsic",
            "mix",
            "mongolian",
            "monospace",
            "move",
            "multiple",
            "multiple_mask_images",
            "multiply",
            "myanmar",
            "n-resize",
            "narrower",
            "ne-resize",
            "nesw-resize",
            "no-close-quote",
            "no-drop",
            "no-open-quote",
            "no-repeat",
            "none",
            "normal",
            "not-allowed",
            "nowrap",
            "ns-resize",
            "numbers",
            "numeric",
            "nw-resize",
            "nwse-resize",
            "oblique",
            "octal",
            "opacity",
            "open-quote",
            "optimizeLegibility",
            "optimizeSpeed",
            "oriya",
            "oromo",
            "outset",
            "outside",
            "outside-shape",
            "overlay",
            "overline",
            "padding",
            "padding-box",
            "painted",
            "page",
            "paused",
            "persian",
            "perspective",
            "pinch-zoom",
            "plus-darker",
            "plus-lighter",
            "pointer",
            "polygon",
            "portrait",
            "pre",
            "pre-line",
            "pre-wrap",
            "preserve-3d",
            "progress",
            "push-button",
            "radial-gradient",
            "radio",
            "read-only",
            "read-write",
            "read-write-plaintext-only",
            "rectangle",
            "region",
            "relative",
            "repeat",
            "repeating-linear-gradient",
            "repeating-radial-gradient",
            "repeating-conic-gradient",
            "repeat-x",
            "repeat-y",
            "reset",
            "reverse",
            "rgb",
            "rgba",
            "ridge",
            "right",
            "rotate",
            "rotate3d",
            "rotateX",
            "rotateY",
            "rotateZ",
            "round",
            "row",
            "row-resize",
            "row-reverse",
            "rtl",
            "run-in",
            "running",
            "s-resize",
            "sans-serif",
            "saturate",
            "saturation",
            "scale",
            "scale3d",
            "scaleX",
            "scaleY",
            "scaleZ",
            "screen",
            "scroll",
            "scrollbar",
            "scroll-position",
            "se-resize",
            "searchfield",
            "searchfield-cancel-button",
            "searchfield-decoration",
            "searchfield-results-button",
            "searchfield-results-decoration",
            "self-start",
            "self-end",
            "semi-condensed",
            "semi-expanded",
            "separate",
            "sepia",
            "serif",
            "show",
            "sidama",
            "simp-chinese-formal",
            "simp-chinese-informal",
            "single",
            "skew",
            "skewX",
            "skewY",
            "skip-white-space",
            "slide",
            "slider-horizontal",
            "slider-vertical",
            "sliderthumb-horizontal",
            "sliderthumb-vertical",
            "slow",
            "small",
            "small-caps",
            "small-caption",
            "smaller",
            "soft-light",
            "solid",
            "somali",
            "source-atop",
            "source-in",
            "source-out",
            "source-over",
            "space",
            "space-around",
            "space-between",
            "space-evenly",
            "spell-out",
            "square",
            "square-button",
            "start",
            "static",
            "status-bar",
            "stretch",
            "stroke",
            "stroke-box",
            "sub",
            "subpixel-antialiased",
            "svg_masks",
            "super",
            "sw-resize",
            "symbolic",
            "symbols",
            "system-ui",
            "table",
            "table-caption",
            "table-cell",
            "table-column",
            "table-column-group",
            "table-footer-group",
            "table-header-group",
            "table-row",
            "table-row-group",
            "tamil",
            "telugu",
            "text",
            "text-bottom",
            "text-top",
            "textarea",
            "textfield",
            "thai",
            "thick",
            "thin",
            "threeddarkshadow",
            "threedface",
            "threedhighlight",
            "threedlightshadow",
            "threedshadow",
            "tibetan",
            "tigre",
            "tigrinya-er",
            "tigrinya-er-abegede",
            "tigrinya-et",
            "tigrinya-et-abegede",
            "to",
            "top",
            "trad-chinese-formal",
            "trad-chinese-informal",
            "transform",
            "translate",
            "translate3d",
            "translateX",
            "translateY",
            "translateZ",
            "transparent",
            "ultra-condensed",
            "ultra-expanded",
            "underline",
            "unidirectional-pan",
            "unset",
            "up",
            "upper-alpha",
            "upper-armenian",
            "upper-greek",
            "upper-hexadecimal",
            "upper-latin",
            "upper-norwegian",
            "upper-roman",
            "uppercase",
            "urdu",
            "url",
            "var",
            "vertical",
            "vertical-text",
            "view-box",
            "visible",
            "visibleFill",
            "visiblePainted",
            "visibleStroke",
            "visual",
            "w-resize",
            "wait",
            "wave",
            "wider",
            "window",
            "windowframe",
            "windowtext",
            "words",
            "wrap",
            "wrap-reverse",
            "x-large",
            "x-small",
            "xor",
            "xx-large",
            "xx-small",
        ],
            valueKeywords$1 = keySet(valueKeywords_);

        var allWords = documentTypes_
            .concat(mediaTypes_)
            .concat(mediaFeatures_)
            .concat(mediaValueKeywords_)
            .concat(propertyKeywords_)
            .concat(nonStandardPropertyKeywords_)
            .concat(colorKeywords_)
            .concat(valueKeywords_);

        const keywords$1 = {
            properties: propertyKeywords_,
            colors: colorKeywords_,
            fonts: fontProperties_,
            values: valueKeywords_,
            all: allWords,
        };

        const defaults = {
            documentTypes: documentTypes,
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords$1,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            fontProperties: fontProperties$1,
            counterDescriptors: counterDescriptors,
            colorKeywords: colorKeywords$1,
            valueKeywords: valueKeywords$1,
            tokenHooks: {
                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenCComment;
                    return tokenCComment(stream, state);
                },
            },
        };

        mkCSS({});

        function tokenCComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next()) != null) {
                if (maybeEnd && ch == "/") {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return ["comment", "comment"];
        }

        mkCSS({
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords$1,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            colorKeywords: colorKeywords$1,
            valueKeywords: valueKeywords$1,
            fontProperties: fontProperties$1,
            allowNested: true,
            lineComment: "//",
            tokenHooks: {
                "/": function(stream, state) {
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return ["comment", "comment"];
                    } else if (stream.eat("*")) {
                        state.tokenize = tokenCComment;
                        return tokenCComment(stream, state);
                    } else {
                        return ["operator", "operator"];
                    }
                },
                ":": function(stream) {
                    if (stream.match(/^\s*\{/, false)) return [null, null];
                    return false;
                },
                $: function(stream) {
                    stream.match(/^[\w-]+/);
                    if (stream.match(/^\s*:/, false))
                        return ["def", "variable-definition"];
                    return ["variableName.special", "variable"];
                },
                "#": function(stream) {
                    if (!stream.eat("{")) return false;
                    return [null, "interpolation"];
                },
            },
        });

        mkCSS({
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            mediaValueKeywords: mediaValueKeywords,
            propertyKeywords: propertyKeywords$1,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            colorKeywords: colorKeywords$1,
            valueKeywords: valueKeywords$1,
            fontProperties: fontProperties$1,
            allowNested: true,
            lineComment: "//",
            tokenHooks: {
                "/": function(stream, state) {
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return ["comment", "comment"];
                    } else if (stream.eat("*")) {
                        state.tokenize = tokenCComment;
                        return tokenCComment(stream, state);
                    } else {
                        return ["operator", "operator"];
                    }
                },
                "@": function(stream) {
                    if (stream.eat("{")) return [null, "interpolation"];
                    if (
                        stream.match(
                            /^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i,
                            false
                        )
                    )
                        return false;
                    stream.eatWhile(/[\w\\\-]/);
                    if (stream.match(/^\s*:/, false))
                        return ["def", "variable-definition"];
                    return ["variableName", "variable"];
                },
                "&": function() {
                    return ["atom", "atom"];
                },
            },
        });

        mkCSS({
            documentTypes: documentTypes,
            mediaTypes: mediaTypes,
            mediaFeatures: mediaFeatures,
            propertyKeywords: propertyKeywords$1,
            nonStandardPropertyKeywords: nonStandardPropertyKeywords,
            fontProperties: fontProperties$1,
            counterDescriptors: counterDescriptors,
            colorKeywords: colorKeywords$1,
            valueKeywords: valueKeywords$1,
            supportsAtComponent: true,
            tokenHooks: {
                "/": function(stream, state) {
                    if (!stream.eat("*")) return false;
                    state.tokenize = tokenCComment;
                    return tokenCComment(stream, state);
                },
            },
        });

        const propertyKeywords = new Set(keywords$1.properties);
        const colorKeywords = new Set(keywords$1.colors);
        const valueKeywords = new Set(keywords$1.values);
        const fontProperties = new Set(keywords$1.fonts);

        function tokenRegexp(words) {
            return new RegExp("^" + words.join("|"));
        }

        let keywords = ["true", "false", "null", "auto"];
        let keywordsRegexp = new RegExp("^" + keywords.join("|"));

        let operators = [
            "\\(",
            "\\)",
            "=",
            ">",
            "<",
            "==",
            ">=",
            "<=",
            "\\+",
            "-",
            "\\!=",
            "/",
            "\\*",
            "%",
            "and",
            "or",
            "not",
            ";",
            "\\{",
            "\\}",
            ":",
        ];
        let opRegexp = tokenRegexp(operators);

        let pseudoElementsRegexp = /^::?[a-zA-Z_][\w\-]*/;

        let word;

        function isEndLine(stream) {
            return !stream.peek() || stream.match(/\s+$/, false);
        }

        function urlTokens(stream, state) {
            let ch = stream.peek();

            if (ch === ")") {
                stream.next();
                state.tokenizer = tokenBase;
                return "operator";
            } else if (ch === "(") {
                stream.next();
                stream.eatSpace();

                return "operator";
            } else if (ch === "'" || ch === '"') {
                state.tokenizer = buildStringTokenizer(stream.next());
                return "string";
            } else {
                state.tokenizer = buildStringTokenizer(")", false);
                return "string";
            }
        }
        function comment(indentation, multiLine) {
            return function(stream, state) {
                if (stream.sol() && stream.indentation() <= indentation) {
                    state.tokenizer = tokenBase;
                    return tokenBase(stream, state);
                }

                if (multiLine && stream.skipTo("*/")) {
                    stream.next();
                    stream.next();
                    state.tokenizer = tokenBase;
                } else {
                    stream.skipToEnd();
                }

                return "comment";
            };
        }

        function buildStringTokenizer(quote, greedy) {
            if (greedy == null) {
                greedy = true;
            }

            function stringTokenizer(stream, state) {
                let nextChar = stream.next();
                let peekChar = stream.peek();
                let previousChar = stream.string.charAt(stream.pos - 2);

                let endingString =
                    (nextChar !== "\\" && peekChar === quote) ||
                    (nextChar === quote && previousChar !== "\\");

                if (endingString) {
                    if (nextChar !== quote && greedy) {
                        stream.next();
                    }
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    state.tokenizer = tokenBase;
                    return "string";
                } else if (nextChar === "#" && peekChar === "{") {
                    state.tokenizer =
                        buildInterpolationTokenizer(stringTokenizer);
                    stream.next();
                    return "operator";
                } else {
                    return "string";
                }
            }

            return stringTokenizer;
        }

        function buildInterpolationTokenizer(currentTokenizer) {
            return function(stream, state) {
                if (stream.peek() === "}") {
                    stream.next();
                    state.tokenizer = currentTokenizer;
                    return "operator";
                } else {
                    return tokenBase(stream, state);
                }
            };
        }

        function indent(state, stream) {
            if (state.indentCount == 0) {
                state.indentCount++;
                let lastScopeOffset = state.scopes[0].offset;
                let currentOffset = lastScopeOffset + stream.indentUnit;
                state.scopes.unshift({ offset: currentOffset });
            }
        }

        function dedent(state) {
            if (state.scopes.length == 1) return;

            state.scopes.shift();
        }

        function tokenBase(stream, state) {
            let ch = stream.peek();

            // Comment
            if (stream.match("/*")) {
                state.tokenizer = comment(stream.indentation(), true);
                return state.tokenizer(stream, state);
            }
            if (stream.match("//")) {
                state.tokenizer = comment(stream.indentation(), false);
                return state.tokenizer(stream, state);
            }

            // Interpolation
            if (stream.match("#{")) {
                state.tokenizer = buildInterpolationTokenizer(tokenBase);
                return "operator";
            }

            // Strings
            if (ch === '"' || ch === "'") {
                stream.next();
                state.tokenizer = buildStringTokenizer(ch);
                return "string";
            }

            if (!state.cursorHalf) {
                // first half i.e. before : for key-value pairs
                // including selectors
                if (ch === "-") {
                    if (stream.match(/^-\w+-/)) {
                        return "meta";
                    }
                }

                if (ch === ".") {
                    stream.next();
                    if (stream.match(/^[\w-]+/)) {
                        indent(state, stream);
                        return "qualifier";
                    } else if (stream.peek() === "#") {
                        indent(state, stream);
                        return "tag";
                    }
                }

                if (ch === "#") {
                    stream.next();
                    // ID selectors
                    if (stream.match(/^[\w-]+/)) {
                        indent(state, stream);
                        return "builtin";
                    }
                    if (stream.peek() === "#") {
                        indent(state, stream);
                        return "tag";
                    }
                }

                // Variables
                if (ch === "$") {
                    stream.next();
                    stream.eatWhile(/[\w-]/);
                    return "variable-2";
                }

                // Numbers
                if (stream.match(/^-?[0-9\.]+/)) return "number";

                // Units
                if (stream.match(/^(px|em|in)\b/)) return "unit";

                if (stream.match(keywordsRegexp)) return "keyword";

                if (stream.match(/^url/) && stream.peek() === "(") {
                    state.tokenizer = urlTokens;
                    return "atom";
                }

                if (ch === "=") {
                    // Match shortcut mixin definition
                    if (stream.match(/^=[\w-]+/)) {
                        indent(state, stream);
                        return "meta";
                    }
                }

                if (ch === "+") {
                    // Match shortcut mixin definition
                    if (stream.match(/^\+[\w-]+/)) {
                        return "meta";
                    }
                }

                if (ch === "@") {
                    if (stream.match("@extend")) {
                        if (!stream.match(/\s*[\w]/)) dedent(state);
                    }
                }

                // Indent Directives
                if (
                    stream.match(
                        /^@(else if|if|media|else|for|each|while|mixin|function)/
                    )
                ) {
                    indent(state, stream);
                    return "def";
                }

                // Other Directives
                if (ch === "@") {
                    stream.next();
                    stream.eatWhile(/[\w-]/);
                    return "def";
                }

                if (stream.eatWhile(/[\w-]/)) {
                    if (stream.match(/ *: *[\w-\+\$#!\("']/, false)) {
                        word = stream.current().toLowerCase();
                        let prop = state.prevProp + "-" + word;
                        if (propertyKeywords.has(prop)) {
                            return "property";
                        } else if (propertyKeywords.has(word)) {
                            state.prevProp = word;
                            return "property";
                        } else if (fontProperties.has(word)) {
                            return "property";
                        }
                        return "tag";
                    } else if (stream.match(/ *:/, false)) {
                        indent(state, stream);
                        state.cursorHalf = 1;
                        state.prevProp = stream.current().toLowerCase();
                        return "property";
                    } else if (stream.match(/ *,/, false)) {
                        return "tag";
                    } else {
                        indent(state, stream);
                        return "tag";
                    }
                }

                if (ch === ":") {
                    if (stream.match(pseudoElementsRegexp)) {
                        // could be a pseudo-element
                        return "type";
                    }
                    stream.next();
                    state.cursorHalf = 1;
                    return "operator";
                }
            } else {
                if (ch === "#") {
                    stream.next();
                    // Hex numbers
                    if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)) {
                        if (isEndLine(stream)) {
                            state.cursorHalf = 0;
                        }
                        return "number";
                    }
                }

                // Numbers
                if (stream.match(/^-?[0-9\.]+/)) {
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "number";
                }

                // Units
                if (stream.match(/^(px|em|in)\b/)) {
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "unit";
                }

                if (stream.match(keywordsRegexp)) {
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "keyword";
                }

                if (stream.match(/^url/) && stream.peek() === "(") {
                    state.tokenizer = urlTokens;
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "atom";
                }

                // Variables
                if (ch === "$") {
                    stream.next();
                    stream.eatWhile(/[\w-]/);
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "variable-2";
                }

                // bang character for !important, !default, etc.
                if (ch === "!") {
                    stream.next();
                    state.cursorHalf = 0;
                    return stream.match(/^[\w]+/) ? "keyword" : "operator";
                }

                if (stream.match(opRegexp)) {
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    return "operator";
                }

                // attributes
                if (stream.eatWhile(/[\w-]/)) {
                    if (isEndLine(stream)) {
                        state.cursorHalf = 0;
                    }
                    word = stream.current().toLowerCase();
                    if (valueKeywords.has(word)) {
                        return "atom";
                    } else if (colorKeywords.has(word)) {
                        return "keyword";
                    } else if (propertyKeywords.has(word)) {
                        state.prevProp = stream.current().toLowerCase();
                        return "property";
                    } else {
                        return "tag";
                    }
                }

                if (isEndLine(stream)) {
                    state.cursorHalf = 0;
                    return null;
                }
            }

            if (stream.match(opRegexp)) return "operator";

            stream.next();
            return null;
        }

        function tokenLexer(stream, state) {
            if (stream.sol()) state.indentCount = 0;
            let style = state.tokenizer(stream, state);
            let current = stream.current();

            if (current === "@return" || current === "}") {
                dedent(state);
            }

            if (style !== null) {
                let startOfToken = stream.pos - current.length;

                let withCurrentIndent =
                    startOfToken + stream.indentUnit * state.indentCount;

                let newScopes = [];

                for (let i = 0; i < state.scopes.length; i++) {
                    let scope = state.scopes[i];

                    if (scope.offset <= withCurrentIndent)
                        newScopes.push(scope);
                }

                state.scopes = newScopes;
            }

            return style;
        }

        const sass = {
            startState: function() {
                return {
                    tokenizer: tokenBase,
                    scopes: [{ offset: 0, type: "sass" }],
                    indentCount: 0,
                    cursorHalf: 0, // cursor half tells us if cursor lies after (1)
                    // or before (0) colon (well... more or less)
                    definedVars: [],
                    definedMixins: [],
                };
            },
            token: function(stream, state) {
                let style = tokenLexer(stream, state);
                state.lastToken = { style: style, content: stream.current() };
                return style;
            },

            indent: function(state) {
                return state.scopes[0].offset;
            },

            languageData: {
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                autocomplete: keywords$1.all,
            },
        };

        exports.sass = sass;
    }
    _M78();
    function _M79() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function parseWords(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }
        var keywords = parseWords(
            "Tcl safe after append array auto_execok auto_import auto_load " +
            "auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror " +
            "binary break catch cd close concat continue dde eof encoding error " +
            "eval exec exit expr fblocked fconfigure fcopy file fileevent filename " +
            "filename flush for foreach format gets glob global history http if " +
            "incr info interp join lappend lindex linsert list llength load lrange " +
            "lreplace lsearch lset lsort memory msgcat namespace open package parray " +
            "pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp " +
            "registry regsub rename resource return scan seek set socket source split " +
            "string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord " +
            "tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest " +
            "tclvars tell time trace unknown unset update uplevel upvar variable " +
            "vwait"
        );
        var functions = parseWords(
            "if elseif else and not or eq ne in ni for foreach while switch"
        );
        var isOperatorChar = /[+\-*&%=<>!?^\/\|]/;
        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }
        function tokenBase(stream, state) {
            var beforeParams = state.beforeParams;
            state.beforeParams = false;
            var ch = stream.next();
            if ((ch == '"' || ch == "'") && state.inParams) {
                return chain(stream, state, tokenString(ch));
            } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
                if (ch == "(" && beforeParams) state.inParams = true;
                else if (ch == ")") state.inParams = false;
                return null;
            } else if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            } else if (ch == "#") {
                if (stream.eat("*")) return chain(stream, state, tokenComment);
                if (ch == "#" && stream.match(/ *\[ *\[/))
                    return chain(stream, state, tokenUnparsed);
                stream.skipToEnd();
                return "comment";
            } else if (ch == '"') {
                stream.skipTo(/"/);
                return "comment";
            } else if (ch == "$") {
                stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
                stream.eatWhile(/}/);
                state.beforeParams = true;
                return "builtin";
            } else if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "comment";
            } else {
                stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
                var word = stream.current().toLowerCase();
                if (keywords && keywords.propertyIsEnumerable(word))
                    return "keyword";
                if (functions && functions.propertyIsEnumerable(word)) {
                    state.beforeParams = true;
                    return "keyword";
                }
                return null;
            }
        }
        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end) state.tokenize = tokenBase;
                return "string";
            };
        }
        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "#" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }
        function tokenUnparsed(stream, state) {
            var maybeEnd = 0,
                ch;
            while ((ch = stream.next())) {
                if (ch == "#" && maybeEnd == 2) {
                    state.tokenize = tokenBase;
                    break;
                }
                if (ch == "]") maybeEnd++;
                else if (ch != " ") maybeEnd = 0;
            }
            return "meta";
        }
        const tcl = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    beforeParams: false,
                    inParams: false,
                };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.tcl = tcl;
    }
    _M79();
    function _M80() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // Tokenizer
        var textwords = {};

        var keywords = {
            allTags: true,
            closeAll: true,
            list: true,
            newJournal: true,
            newTiddler: true,
            permaview: true,
            saveChanges: true,
            search: true,
            slider: true,
            tabs: true,
            tag: true,
            tagging: true,
            tags: true,
            tiddler: true,
            timeline: true,
            today: true,
            version: true,
            option: true,
            with: true,
            filter: true,
        };

        var isSpaceName = /[\w_\-]/i,
            reHR = /^\-\-\-\-+$/, // <hr>
            reWikiCommentStart = /^\/\*\*\*$/, // /***
            reWikiCommentStop = /^\*\*\*\/$/, // ***/
            reBlockQuote = /^<<<$/,
            reJsCodeStart = /^\/\/\{\{\{$/, // //{{{ js block start
            reJsCodeStop = /^\/\/\}\}\}$/, // //}}} js stop
            reXmlCodeStart = /^<!--\{\{\{-->$/, // xml block start
            reXmlCodeStop = /^<!--\}\}\}-->$/, // xml stop
            reCodeBlockStart = /^\{\{\{$/, // {{{ TW text div block start
            reCodeBlockStop = /^\}\}\}$/, // }}} TW text stop
            reUntilCodeStop = /.*?\}\}\}/;

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }

        function tokenBase(stream, state) {
            var sol = stream.sol(),
                ch = stream.peek();

            state.block = false; // indicates the start of a code block.

            // check start of  blocks
            if (sol && /[<\/\*{}\-]/.test(ch)) {
                if (stream.match(reCodeBlockStart)) {
                    state.block = true;
                    return chain(stream, state, twTokenCode);
                }
                if (stream.match(reBlockQuote)) return "quote";
                if (
                    stream.match(reWikiCommentStart) ||
                    stream.match(reWikiCommentStop)
                )
                    return "comment";
                if (
                    stream.match(reJsCodeStart) ||
                    stream.match(reJsCodeStop) ||
                    stream.match(reXmlCodeStart) ||
                    stream.match(reXmlCodeStop)
                )
                    return "comment";
                if (stream.match(reHR)) return "contentSeparator";
            }

            stream.next();
            if (sol && /[\/\*!#;:>|]/.test(ch)) {
                if (ch == "!") {
                    // tw header
                    stream.skipToEnd();
                    return "header";
                }
                if (ch == "*") {
                    // tw list
                    stream.eatWhile("*");
                    return "comment";
                }
                if (ch == "#") {
                    // tw numbered list
                    stream.eatWhile("#");
                    return "comment";
                }
                if (ch == ";") {
                    // definition list, term
                    stream.eatWhile(";");
                    return "comment";
                }
                if (ch == ":") {
                    // definition list, description
                    stream.eatWhile(":");
                    return "comment";
                }
                if (ch == ">") {
                    // single line quote
                    stream.eatWhile(">");
                    return "quote";
                }
                if (ch == "|") return "header";
            }

            if (ch == "{" && stream.match("{{"))
                return chain(stream, state, twTokenCode);

            // rudimentary html:// file:// link matching. TW knows much more ...
            if (
                /[hf]/i.test(ch) &&
                /[ti]/i.test(stream.peek()) &&
                stream.match(
                    /\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i
                )
            )
                return "link";

            // just a little string indicator, don't want to have the whole string covered
            if (ch == '"') return "string";

            if (ch == "~")
                // _no_ CamelCase indicator should be bold
                return "brace";

            if (/[\[\]]/.test(ch) && stream.match(ch))
                // check for [[..]]
                return "brace";

            if (ch == "@") {
                // check for space link. TODO fix @@...@@ highlighting
                stream.eatWhile(isSpaceName);
                return "link";
            }

            if (/\d/.test(ch)) {
                // numbers
                stream.eatWhile(/\d/);
                return "number";
            }

            if (ch == "/") {
                // tw invisible comment
                if (stream.eat("%")) {
                    return chain(stream, state, twTokenComment);
                } else if (stream.eat("/")) {
                    //
                    return chain(stream, state, twTokenEm);
                }
            }

            if (ch == "_" && stream.eat("_"))
                // tw underline
                return chain(stream, state, twTokenUnderline);

            // strikethrough and mdash handling
            if (ch == "-" && stream.eat("-")) {
                // if strikethrough looks ugly, change CSS.
                if (stream.peek() != " ")
                    return chain(stream, state, twTokenStrike);
                // mdash
                if (stream.peek() == " ") return "brace";
            }

            if (ch == "'" && stream.eat("'"))
                // tw bold
                return chain(stream, state, twTokenStrong);

            if (ch == "<" && stream.eat("<"))
                // tw macro
                return chain(stream, state, twTokenMacro);

            // core macro handling
            stream.eatWhile(/[\w\$_]/);
            return textwords.propertyIsEnumerable(stream.current())
                ? "keyword"
                : null;
        }

        // tw invisible comment
        function twTokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "%";
            }
            return "comment";
        }

        // tw strong / bold
        function twTokenStrong(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "'" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "'";
            }
            return "strong";
        }

        // tw code
        function twTokenCode(stream, state) {
            var sb = state.block;

            if (sb && stream.current()) {
                return "comment";
            }

            if (!sb && stream.match(reUntilCodeStop)) {
                state.tokenize = tokenBase;
                return "comment";
            }

            if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
                state.tokenize = tokenBase;
                return "comment";
            }

            stream.next();
            return "comment";
        }

        // tw em / italic
        function twTokenEm(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "/";
            }
            return "emphasis";
        }

        // tw underlined text
        function twTokenUnderline(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "_" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "_";
            }
            return "link";
        }

        // tw strike through text looks ugly
        // change CSS if needed
        function twTokenStrike(stream, state) {
            var maybeEnd = false,
                ch;

            while ((ch = stream.next())) {
                if (ch == "-" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "-";
            }
            return "deleted";
        }

        // macro
        function twTokenMacro(stream, state) {
            if (stream.current() == "<<") {
                return "meta";
            }

            var ch = stream.next();
            if (!ch) {
                state.tokenize = tokenBase;
                return null;
            }
            if (ch == ">") {
                if (stream.peek() == ">") {
                    stream.next();
                    state.tokenize = tokenBase;
                    return "meta";
                }
            }

            stream.eatWhile(/[\w\$_]/);
            return keywords.propertyIsEnumerable(stream.current())
                ? "keyword"
                : null;
        }

        // Interface
        const tiddlyWiki = {
            startState: function() {
                return { tokenize: tokenBase };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                return style;
            },
        };

        exports.tiddlyWiki = tiddlyWiki;
    }
    _M80();
    function _M81() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var TOKEN_STYLES = {
            addition: "inserted",
            attributes: "propertyName",
            bold: "strong",
            cite: "keyword",
            code: "monospace",
            definitionList: "list",
            deletion: "deleted",
            div: "punctuation",
            em: "emphasis",
            footnote: "variable",
            footCite: "qualifier",
            header: "heading",
            html: "comment",
            image: "atom",
            italic: "emphasis",
            link: "link",
            linkDefinition: "link",
            list1: "list",
            list2: "list.special",
            list3: "list",
            notextile: "string.special",
            pre: "operator",
            p: "content",
            quote: "bracket",
            span: "quote",
            specialChar: "character",
            strong: "strong",
            sub: "content.special",
            sup: "content.special",
            table: "variableName.special",
            tableHeading: "operator",
        };

        function startNewLine(stream, state) {
            state.mode = Modes.newLayout;
            state.tableHeading = false;

            if (
                state.layoutType === "definitionList" &&
                state.spanningLayout &&
                stream.match(RE("definitionListEnd"), false)
            )
                state.spanningLayout = false;
        }

        function handlePhraseModifier(stream, state, ch) {
            if (ch === "_") {
                if (stream.eat("_"))
                    return togglePhraseModifier(
                        stream,
                        state,
                        "italic",
                        /__/,
                        2
                    );
                else return togglePhraseModifier(stream, state, "em", /_/, 1);
            }

            if (ch === "*") {
                if (stream.eat("*")) {
                    return togglePhraseModifier(
                        stream,
                        state,
                        "bold",
                        /\*\*/,
                        2
                    );
                }
                return togglePhraseModifier(stream, state, "strong", /\*/, 1);
            }

            if (ch === "[") {
                if (stream.match(/\d+\]/)) state.footCite = true;
                return tokenStyles(state);
            }

            if (ch === "(") {
                var spec = stream.match(/^(r|tm|c)\)/);
                if (spec) return TOKEN_STYLES.specialChar;
            }

            if (ch === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
                return TOKEN_STYLES.html;

            if (ch === "?" && stream.eat("?"))
                return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);

            if (ch === "=" && stream.eat("="))
                return togglePhraseModifier(
                    stream,
                    state,
                    "notextile",
                    /==/,
                    2
                );

            if (ch === "-" && !stream.eat("-"))
                return togglePhraseModifier(stream, state, "deletion", /-/, 1);

            if (ch === "+")
                return togglePhraseModifier(stream, state, "addition", /\+/, 1);

            if (ch === "~")
                return togglePhraseModifier(stream, state, "sub", /~/, 1);

            if (ch === "^")
                return togglePhraseModifier(stream, state, "sup", /\^/, 1);

            if (ch === "%")
                return togglePhraseModifier(stream, state, "span", /%/, 1);

            if (ch === "@")
                return togglePhraseModifier(stream, state, "code", /@/, 1);

            if (ch === "!") {
                var type = togglePhraseModifier(
                    stream,
                    state,
                    "image",
                    /(?:\([^\)]+\))?!/,
                    1
                );
                stream.match(/^:\S+/); // optional Url portion
                return type;
            }
            return tokenStyles(state);
        }

        function togglePhraseModifier(
            stream,
            state,
            phraseModifier,
            closeRE,
            openSize
        ) {
            var charBefore =
                stream.pos > openSize
                    ? stream.string.charAt(stream.pos - openSize - 1)
                    : null;
            var charAfter = stream.peek();
            if (state[phraseModifier]) {
                if (
                    (!charAfter || /\W/.test(charAfter)) &&
                    charBefore &&
                    /\S/.test(charBefore)
                ) {
                    var type = tokenStyles(state);
                    state[phraseModifier] = false;
                    return type;
                }
            } else if (
                (!charBefore || /\W/.test(charBefore)) &&
                charAfter &&
                /\S/.test(charAfter) &&
                stream.match(
                    new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"),
                    false
                )
            ) {
                state[phraseModifier] = true;
                state.mode = Modes.attributes;
            }
            return tokenStyles(state);
        }
        function tokenStyles(state) {
            var disabled = textileDisabled(state);
            if (disabled) return disabled;

            var styles = [];
            if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);

            styles = styles.concat(
                activeStyles(
                    state,
                    "addition",
                    "bold",
                    "cite",
                    "code",
                    "deletion",
                    "em",
                    "footCite",
                    "image",
                    "italic",
                    "link",
                    "span",
                    "strong",
                    "sub",
                    "sup",
                    "table",
                    "tableHeading"
                )
            );

            if (state.layoutType === "header")
                styles.push(TOKEN_STYLES.header + "-" + state.header);

            return styles.length ? styles.join(" ") : null;
        }

        function textileDisabled(state) {
            var type = state.layoutType;

            switch (type) {
                case "notextile":
                case "code":
                case "pre":
                    return TOKEN_STYLES[type];
                default:
                    if (state.notextile)
                        return (
                            TOKEN_STYLES.notextile +
                            (type ? " " + TOKEN_STYLES[type] : "")
                        );
                    return null;
            }
        }

        function activeStyles(state) {
            var styles = [];
            for (var i = 1; i < arguments.length; ++i) {
                if (state[arguments[i]])
                    styles.push(TOKEN_STYLES[arguments[i]]);
            }
            return styles;
        }

        function blankLine(state) {
            var spanningLayout = state.spanningLayout,
                type = state.layoutType;

            for (var key in state)
                if (state.hasOwnProperty(key)) delete state[key];

            state.mode = Modes.newLayout;
            if (spanningLayout) {
                state.layoutType = type;
                state.spanningLayout = true;
            }
        }

        var REs = {
            cache: {},
            single: {
                bc: "bc",
                bq: "bq",
                definitionList: /- .*?:=+/,
                definitionListEnd: /.*=:\s*$/,
                div: "div",
                drawTable: /\|.*\|/,
                foot: /fn\d+/,
                header: /h[1-6]/,
                html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
                link: /[^"]+":\S/,
                linkDefinition: /\[[^\s\]]+\]\S+/,
                list: /(?:#+|\*+)/,
                notextile: "notextile",
                para: "p",
                pre: "pre",
                table: "table",
                tableCellAttributes: /[\/\\]\d+/,
                tableHeading: /\|_\./,
                tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
                text: /[^!"_=\*\[\(<\?\+~\^%@-]+/,
            },
            attributes: {
                align: /(?:<>|<|>|=)/,
                selector: /\([^\(][^\)]+\)/,
                lang: /\[[^\[\]]+\]/,
                pad: /(?:\(+|\)+){1,2}/,
                css: /\{[^\}]+\}/,
            },
            createRe: function(name) {
                switch (name) {
                    case "drawTable":
                        return REs.makeRe("^", REs.single.drawTable, "$");
                    case "html":
                        return REs.makeRe(
                            "^",
                            REs.single.html,
                            "(?:",
                            REs.single.html,
                            ")*",
                            "$"
                        );
                    case "linkDefinition":
                        return REs.makeRe("^", REs.single.linkDefinition, "$");
                    case "listLayout":
                        return REs.makeRe(
                            "^",
                            REs.single.list,
                            RE("allAttributes"),
                            "*\\s+"
                        );
                    case "tableCellAttributes":
                        return REs.makeRe(
                            "^",
                            REs.choiceRe(
                                REs.single.tableCellAttributes,
                                RE("allAttributes")
                            ),
                            "+\\."
                        );
                    case "type":
                        return REs.makeRe("^", RE("allTypes"));
                    case "typeLayout":
                        return REs.makeRe(
                            "^",
                            RE("allTypes"),
                            RE("allAttributes"),
                            "*\\.\\.?",
                            "(\\s+|$)"
                        );
                    case "attributes":
                        return REs.makeRe("^", RE("allAttributes"), "+");

                    case "allTypes":
                        return REs.choiceRe(
                            REs.single.div,
                            REs.single.foot,
                            REs.single.header,
                            REs.single.bc,
                            REs.single.bq,
                            REs.single.notextile,
                            REs.single.pre,
                            REs.single.table,
                            REs.single.para
                        );

                    case "allAttributes":
                        return REs.choiceRe(
                            REs.attributes.selector,
                            REs.attributes.css,
                            REs.attributes.lang,
                            REs.attributes.align,
                            REs.attributes.pad
                        );

                    default:
                        return REs.makeRe("^", REs.single[name]);
                }
            },
            makeRe: function() {
                var pattern = "";
                for (var i = 0; i < arguments.length; ++i) {
                    var arg = arguments[i];
                    pattern += typeof arg === "string" ? arg : arg.source;
                }
                return new RegExp(pattern);
            },
            choiceRe: function() {
                var parts = [arguments[0]];
                for (var i = 1; i < arguments.length; ++i) {
                    parts[i * 2 - 1] = "|";
                    parts[i * 2] = arguments[i];
                }

                parts.unshift("(?:");
                parts.push(")");
                return REs.makeRe.apply(null, parts);
            },
        };

        function RE(name) {
            return REs.cache[name] || (REs.cache[name] = REs.createRe(name));
        }

        var Modes = {
            newLayout: function(stream, state) {
                if (stream.match(RE("typeLayout"), false)) {
                    state.spanningLayout = false;
                    return (state.mode = Modes.blockType)(stream, state);
                }
                var newMode;
                if (!textileDisabled(state)) {
                    if (stream.match(RE("listLayout"), false))
                        newMode = Modes.list;
                    else if (stream.match(RE("drawTable"), false))
                        newMode = Modes.table;
                    else if (stream.match(RE("linkDefinition"), false))
                        newMode = Modes.linkDefinition;
                    else if (stream.match(RE("definitionList")))
                        newMode = Modes.definitionList;
                    else if (stream.match(RE("html"), false))
                        newMode = Modes.html;
                }
                return (state.mode = newMode || Modes.text)(stream, state);
            },

            blockType: function(stream, state) {
                var match, type;
                state.layoutType = null;

                if ((match = stream.match(RE("type")))) type = match[0];
                else return (state.mode = Modes.text)(stream, state);

                if ((match = type.match(RE("header")))) {
                    state.layoutType = "header";
                    state.header = parseInt(match[0][1]);
                } else if (type.match(RE("bq"))) {
                    state.layoutType = "quote";
                } else if (type.match(RE("bc"))) {
                    state.layoutType = "code";
                } else if (type.match(RE("foot"))) {
                    state.layoutType = "footnote";
                } else if (type.match(RE("notextile"))) {
                    state.layoutType = "notextile";
                } else if (type.match(RE("pre"))) {
                    state.layoutType = "pre";
                } else if (type.match(RE("div"))) {
                    state.layoutType = "div";
                } else if (type.match(RE("table"))) {
                    state.layoutType = "table";
                }

                state.mode = Modes.attributes;
                return tokenStyles(state);
            },

            text: function(stream, state) {
                if (stream.match(RE("text"))) return tokenStyles(state);

                var ch = stream.next();
                if (ch === '"') return (state.mode = Modes.link)(stream, state);
                return handlePhraseModifier(stream, state, ch);
            },

            attributes: function(stream, state) {
                state.mode = Modes.layoutLength;

                if (stream.match(RE("attributes")))
                    return TOKEN_STYLES.attributes;
                else return tokenStyles(state);
            },

            layoutLength: function(stream, state) {
                if (stream.eat(".") && stream.eat("."))
                    state.spanningLayout = true;

                state.mode = Modes.text;
                return tokenStyles(state);
            },

            list: function(stream, state) {
                var match = stream.match(RE("list"));
                state.listDepth = match[0].length;
                var listMod = (state.listDepth - 1) % 3;
                if (!listMod) state.layoutType = "list1";
                else if (listMod === 1) state.layoutType = "list2";
                else state.layoutType = "list3";

                state.mode = Modes.attributes;
                return tokenStyles(state);
            },

            link: function(stream, state) {
                state.mode = Modes.text;
                if (stream.match(RE("link"))) {
                    stream.match(/\S+/);
                    return TOKEN_STYLES.link;
                }
                return tokenStyles(state);
            },

            linkDefinition: function(stream) {
                stream.skipToEnd();
                return TOKEN_STYLES.linkDefinition;
            },

            definitionList: function(stream, state) {
                stream.match(RE("definitionList"));

                state.layoutType = "definitionList";

                if (stream.match(/\s*$/)) state.spanningLayout = true;
                else state.mode = Modes.attributes;

                return tokenStyles(state);
            },

            html: function(stream) {
                stream.skipToEnd();
                return TOKEN_STYLES.html;
            },

            table: function(stream, state) {
                state.layoutType = "table";
                return (state.mode = Modes.tableCell)(stream, state);
            },

            tableCell: function(stream, state) {
                if (stream.match(RE("tableHeading"))) state.tableHeading = true;
                else stream.eat("|");

                state.mode = Modes.tableCellAttributes;
                return tokenStyles(state);
            },

            tableCellAttributes: function(stream, state) {
                state.mode = Modes.tableText;

                if (stream.match(RE("tableCellAttributes")))
                    return TOKEN_STYLES.attributes;
                else return tokenStyles(state);
            },

            tableText: function(stream, state) {
                if (stream.match(RE("tableText"))) return tokenStyles(state);

                if (stream.peek() === "|") {
                    // end of cell
                    state.mode = Modes.tableCell;
                    return tokenStyles(state);
                }
                return handlePhraseModifier(stream, state, stream.next());
            },
        };

        const textile = {
            startState: function() {
                return { mode: Modes.newLayout };
            },
            token: function(stream, state) {
                if (stream.sol()) startNewLine(stream, state);
                return state.mode(stream, state);
            },
            blankLine: blankLine,
        };

        exports.textile = textile;
    }
    _M81();
    function _M82() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function inBlock(style, terminator, returnTokenizer) {
            return function(stream, state) {
                while (!stream.eol()) {
                    if (stream.match(terminator)) {
                        state.tokenize = inText;
                        break;
                    }
                    stream.next();
                }

                if (returnTokenizer) state.tokenize = returnTokenizer;

                return style;
            };
        }

        function inLine(style) {
            return function(stream, state) {
                while (!stream.eol()) {
                    stream.next();
                }
                state.tokenize = inText;
                return style;
            };
        }

        function inText(stream, state) {
            function chain(parser) {
                state.tokenize = parser;
                return parser(stream, state);
            }

            var sol = stream.sol();
            var ch = stream.next();

            //non start of line
            switch (
            ch //switch is generally much faster than if, so it is used here
            ) {
                case "{": //plugin
                    stream.eat("/");
                    stream.eatSpace();
                    stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
                    state.tokenize = inPlugin;
                    return "tag";
                case "_": //bold
                    if (stream.eat("_"))
                        return chain(inBlock("strong", "__", inText));
                    break;
                case "'": //italics
                    if (stream.eat("'"))
                        return chain(inBlock("em", "''", inText));
                    break;
                case "(": // Wiki Link
                    if (stream.eat("("))
                        return chain(inBlock("link", "))", inText));
                    break;
                case "[": // Weblink
                    return chain(inBlock("url", "]", inText));
                case "|": //table
                    if (stream.eat("|")) return chain(inBlock("comment", "||"));
                    break;
                case "-":
                    if (stream.eat("=")) {
                        //titleBar
                        return chain(inBlock("header string", "=-", inText));
                    } else if (stream.eat("-")) {
                        //deleted
                        return chain(inBlock("error tw-deleted", "--", inText));
                    }
                    break;
                case "=": //underline
                    if (stream.match("=="))
                        return chain(inBlock("tw-underline", "===", inText));
                    break;
                case ":":
                    if (stream.eat(":")) return chain(inBlock("comment", "::"));
                    break;
                case "^": //box
                    return chain(inBlock("tw-box", "^"));
                case "~": //np
                    if (stream.match("np~"))
                        return chain(inBlock("meta", "~/np~"));
                    break;
            }

            //start of line types
            if (sol) {
                switch (ch) {
                    case "!": //header at start of line
                        if (stream.match("!!!!!")) {
                            return chain(inLine("header string"));
                        } else if (stream.match("!!!!")) {
                            return chain(inLine("header string"));
                        } else if (stream.match("!!!")) {
                            return chain(inLine("header string"));
                        } else if (stream.match("!!")) {
                            return chain(inLine("header string"));
                        } else {
                            return chain(inLine("header string"));
                        }
                    case "*": //unordered list line item, or <li /> at start of line
                    case "#": //ordered list line item, or <li /> at start of line
                    case "+": //ordered list line item, or <li /> at start of line
                        return chain(inLine("tw-listitem bracket"));
                }
            }

            //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki
            return null;
        }

        // Return variables for tokenizers
        var pluginName, type;
        function inPlugin(stream, state) {
            var ch = stream.next();
            var peek = stream.peek();

            if (ch == "}") {
                state.tokenize = inText;
                //type = ch == ")" ? "endPlugin" : "selfclosePlugin"; inPlugin
                return "tag";
            } else if (ch == "(" || ch == ")") {
                return "bracket";
            } else if (ch == "=") {
                type = "equals";

                if (peek == ">") {
                    stream.next();
                    peek = stream.peek();
                }

                //here we detect values directly after equal character with no quotes
                if (!/[\'\"]/.test(peek)) {
                    state.tokenize = inAttributeNoQuote();
                }
                //end detect values

                return "operator";
            } else if (/[\'\"]/.test(ch)) {
                state.tokenize = inAttribute(ch);
                return state.tokenize(stream, state);
            } else {
                stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
                return "keyword";
            }
        }

        function inAttribute(quote) {
            return function(stream, state) {
                while (!stream.eol()) {
                    if (stream.next() == quote) {
                        state.tokenize = inPlugin;
                        break;
                    }
                }
                return "string";
            };
        }

        function inAttributeNoQuote() {
            return function(stream, state) {
                while (!stream.eol()) {
                    var ch = stream.next();
                    var peek = stream.peek();
                    if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
                        state.tokenize = inPlugin;
                        break;
                    }
                }
                return "string";
            };
        }

        var curState, setStyle;
        function pass() {
            for (var i = arguments.length - 1; i >= 0; i--)
                curState.cc.push(arguments[i]);
        }

        function cont() {
            pass.apply(null, arguments);
            return true;
        }

        function pushContext(pluginName, startOfLine) {
            var noIndent = curState.context && curState.context.noIndent;
            curState.context = {
                prev: curState.context,
                pluginName: pluginName,
                indent: curState.indented,
                startOfLine: startOfLine,
                noIndent: noIndent,
            };
        }

        function popContext() {
            if (curState.context) curState.context = curState.context.prev;
        }

        function element(type) {
            if (type == "openPlugin") {
                curState.pluginName = pluginName;
                return cont(attributes, endplugin(curState.startOfLine));
            } else if (type == "closePlugin") {
                var err = false;
                if (curState.context) {
                    err = curState.context.pluginName != pluginName;
                    popContext();
                } else {
                    err = true;
                }
                if (err) setStyle = "error";
                return cont(endcloseplugin(err));
            } else if (type == "string") {
                if (!curState.context || curState.context.name != "!cdata")
                    pushContext("!cdata");
                if (curState.tokenize == inText) popContext();
                return cont();
            } else return cont();
        }

        function endplugin(startOfLine) {
            return function(type) {
                if (type == "selfclosePlugin" || type == "endPlugin")
                    return cont();
                if (type == "endPlugin") {
                    pushContext(curState.pluginName, startOfLine);
                    return cont();
                }
                return cont();
            };
        }

        function endcloseplugin(err) {
            return function(type) {
                if (err) setStyle = "error";
                if (type == "endPlugin") return cont();
                return pass();
            };
        }

        function attributes(type) {
            if (type == "keyword") {
                setStyle = "attribute";
                return cont(attributes);
            }
            if (type == "equals") return cont(attvalue, attributes);
            return pass();
        }
        function attvalue(type) {
            if (type == "keyword") {
                setStyle = "string";
                return cont();
            }
            if (type == "string") return cont(attvaluemaybe);
            return pass();
        }
        function attvaluemaybe(type) {
            if (type == "string") return cont(attvaluemaybe);
            else return pass();
        }
        const tiki = {
            startState: function() {
                return {
                    tokenize: inText,
                    cc: [],
                    indented: 0,
                    startOfLine: true,
                    pluginName: null,
                    context: null,
                };
            },
            token: function(stream, state) {
                if (stream.sol()) {
                    state.startOfLine = true;
                    state.indented = stream.indentation();
                }
                if (stream.eatSpace()) return null;

                setStyle = type = pluginName = null;
                var style = state.tokenize(stream, state);
                if ((style || type) && style != "comment") {
                    curState = state;
                    while (true) {
                        var comb = state.cc.pop() || element;
                        if (comb(type || style)) break;
                    }
                }
                state.startOfLine = false;
                return setStyle || style;
            },
            indent: function(state, textAfter, cx) {
                var context = state.context;
                if (context && context.noIndent) return 0;
                if (context && /^{\//.test(textAfter)) context = context.prev;
                while (context && !context.startOfLine) context = context.prev;
                if (context) return context.indent + cx.unit;
                else return 0;
            },
        };

        exports.tiki = tiki;
    }
    _M82();
    function _M83() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        const toml = {
            startState: function() {
                return {
                    inString: false,
                    stringType: "",
                    lhs: true,
                    inArray: 0,
                };
            },
            token: function(stream, state) {
                //check for state changes
                if (
                    !state.inString &&
                    (stream.peek() == '"' || stream.peek() == "'")
                ) {
                    state.stringType = stream.peek();
                    stream.next(); // Skip quote
                    state.inString = true; // Update state
                }
                if (stream.sol() && state.inArray === 0) {
                    state.lhs = true;
                }
                //return state
                if (state.inString) {
                    while (state.inString && !stream.eol()) {
                        if (stream.peek() === state.stringType) {
                            stream.next(); // Skip quote
                            state.inString = false; // Clear flag
                        } else if (stream.peek() === "\\") {
                            stream.next();
                            stream.next();
                        } else {
                            stream.match(/^.[^\\\"\']*/);
                        }
                    }
                    return state.lhs ? "property" : "string"; // Token style
                } else if (state.inArray && stream.peek() === "]") {
                    stream.next();
                    state.inArray--;
                    return "bracket";
                } else if (
                    state.lhs &&
                    stream.peek() === "[" &&
                    stream.skipTo("]")
                ) {
                    stream.next(); //skip closing ]
                    // array of objects has an extra open & close []
                    if (stream.peek() === "]") stream.next();
                    return "atom";
                } else if (stream.peek() === "#") {
                    stream.skipToEnd();
                    return "comment";
                } else if (stream.eatSpace()) {
                    return null;
                } else if (
                    state.lhs &&
                    stream.eatWhile(function(c) {
                        return c != "=" && c != " ";
                    })
                ) {
                    return "property";
                } else if (state.lhs && stream.peek() === "=") {
                    stream.next();
                    state.lhs = false;
                    return null;
                } else if (
                    !state.lhs &&
                    stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)
                ) {
                    return "atom"; //date
                } else if (
                    !state.lhs &&
                    (stream.match("true") || stream.match("false"))
                ) {
                    return "atom";
                } else if (!state.lhs && stream.peek() === "[") {
                    state.inArray++;
                    stream.next();
                    return "bracket";
                } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
                    return "number";
                } else if (!stream.eatSpace()) {
                    stream.next();
                }
                return null;
            },
            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.toml = toml;
    }
    _M83();
    function _M84() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var words = {};

        function tokenBase(stream) {
            if (stream.eatSpace()) return null;

            var sol = stream.sol();
            var ch = stream.next();

            if (ch === "\\") {
                if (
                    stream.match("fB") ||
                    stream.match("fR") ||
                    stream.match("fI") ||
                    stream.match("u") ||
                    stream.match("d") ||
                    stream.match("%") ||
                    stream.match("&")
                ) {
                    return "string";
                }
                if (stream.match("m[")) {
                    stream.skipTo("]");
                    stream.next();
                    return "string";
                }
                if (stream.match("s+") || stream.match("s-")) {
                    stream.eatWhile(/[\d-]/);
                    return "string";
                }
                if (stream.match("(") || stream.match("*(")) {
                    stream.eatWhile(/[\w-]/);
                    return "string";
                }
                return "string";
            }
            if (sol && (ch === "." || ch === "'")) {
                if (stream.eat("\\") && stream.eat('"')) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (sol && ch === ".") {
                if (
                    stream.match("B ") ||
                    stream.match("I ") ||
                    stream.match("R ")
                ) {
                    return "attribute";
                }
                if (
                    stream.match("TH ") ||
                    stream.match("SH ") ||
                    stream.match("SS ") ||
                    stream.match("HP ")
                ) {
                    stream.skipToEnd();
                    return "quote";
                }
                if (
                    (stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) ||
                    (stream.match(/[a-z]/) && stream.match(/[a-z]/))
                ) {
                    return "attribute";
                }
            }
            stream.eatWhile(/[\w-]/);
            var cur = stream.current();
            return words.hasOwnProperty(cur) ? words[cur] : null;
        }

        function tokenize(stream, state) {
            return (state.tokens[0] || tokenBase)(stream, state);
        }
        const troff = {
            startState: function() {
                return { tokens: [] };
            },
            token: function(stream, state) {
                return tokenize(stream, state);
            },
        };

        exports.troff = troff;
    }
    _M84();
    function _M85() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        const parserConfig = {
            name: "ttcn-cfg",
            keywords: words(
                "Yes No LogFile FileMask ConsoleMask AppendFile" +
                " TimeStampFormat LogEventTypes SourceInfoFormat" +
                " LogEntityName LogSourceInfo DiskFullAction" +
                " LogFileNumber LogFileSize MatchingHints Detailed" +
                " Compact SubCategories Stack Single None Seconds" +
                " DateTime Time Stop Error Retry Delete TCPPort KillTimer" +
                " NumHCs UnixSocketsEnabled LocalAddress"
            ),
            fileNCtrlMaskOptions: words(
                "TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING" +
                " TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP" +
                " TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION" +
                " TTCN_USER TTCN_FUNCTION TTCN_STATISTICS" +
                " TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG" +
                " EXECUTOR ERROR WARNING PORTEVENT TIMEROP" +
                " VERDICTOP DEFAULTOP TESTCASE ACTION USER" +
                " FUNCTION STATISTICS PARALLEL MATCHING DEBUG" +
                " LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED" +
                " DEBUG_ENCDEC DEBUG_TESTPORT" +
                " DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE" +
                " DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT" +
                " DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED" +
                " EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA" +
                " EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS" +
                " EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED" +
                " FUNCTION_RND FUNCTION_UNQUALIFIED" +
                " MATCHING_DONE MATCHING_MCSUCCESS" +
                " MATCHING_MCUNSUCC MATCHING_MMSUCCESS" +
                " MATCHING_MMUNSUCC MATCHING_PCSUCCESS" +
                " MATCHING_PCUNSUCC MATCHING_PMSUCCESS" +
                " MATCHING_PMUNSUCC MATCHING_PROBLEM" +
                " MATCHING_TIMEOUT MATCHING_UNQUALIFIED" +
                " PARALLEL_PORTCONN PARALLEL_PORTMAP" +
                " PARALLEL_PTC PARALLEL_UNQUALIFIED" +
                " PORTEVENT_DUALRECV PORTEVENT_DUALSEND" +
                " PORTEVENT_MCRECV PORTEVENT_MCSEND" +
                " PORTEVENT_MMRECV PORTEVENT_MMSEND" +
                " PORTEVENT_MQUEUE PORTEVENT_PCIN" +
                " PORTEVENT_PCOUT PORTEVENT_PMIN" +
                " PORTEVENT_PMOUT PORTEVENT_PQUEUE" +
                " PORTEVENT_STATE PORTEVENT_UNQUALIFIED" +
                " STATISTICS_UNQUALIFIED STATISTICS_VERDICT" +
                " TESTCASE_FINISH TESTCASE_START" +
                " TESTCASE_UNQUALIFIED TIMEROP_GUARD" +
                " TIMEROP_READ TIMEROP_START TIMEROP_STOP" +
                " TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED" +
                " USER_UNQUALIFIED VERDICTOP_FINAL" +
                " VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT" +
                " VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"
            ),
            externalCommands: words(
                "BeginControlPart EndControlPart BeginTestCase" + " EndTestCase"
            ),
            multiLineStrings: true,
        };

        var keywords = parserConfig.keywords,
            fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,
            externalCommands = parserConfig.externalCommands,
            multiLineStrings = parserConfig.multiLineStrings,
            indentStatements = parserConfig.indentStatements !== false;
        var isOperatorChar = /[\|]/;
        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[:=]/.test(ch)) {
                curPunc = ch;
                return "punctuation";
            }
            if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            if (ch == "[") {
                stream.eatWhile(/[\w_\]]/);
                return "number";
            }

            stream.eatWhile(/[\w\$_]/);
            var cur = stream.current();
            if (keywords.propertyIsEnumerable(cur)) return "keyword";
            if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return "atom";
            if (externalCommands.propertyIsEnumerable(cur)) return "deleted";

            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        var afterNext = stream.peek();
                        //look if the character if the quote is like the B in '10100010'B
                        if (afterNext) {
                            afterNext = afterNext.toLowerCase();
                            if (
                                afterNext == "b" ||
                                afterNext == "h" ||
                                afterNext == "o"
                            )
                                stream.next();
                        }
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !(escaped || multiLineStrings))
                    state.tokenize = null;
                return "string";
            };
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            var indent = state.indented;
            if (state.context && state.context.type == "statement")
                indent = state.context.indented;
            return (state.context = new Context(
                indent,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        //Interface
        const ttcnCfg = {
            startState: function() {
                return {
                    tokenize: null,
                    context: new Context(0, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":" || curPunc == ",") &&
                    ctx.type == "statement"
                ) {
                    popContext(state);
                } else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    indentStatements &&
                    (((ctx.type == "}" || ctx.type == "top") &&
                        curPunc != ";") ||
                        (ctx.type == "statement" && curPunc == "newstatement"))
                )
                    pushContext(state, stream.column(), "statement");
                state.startOfLine = false;
                return style;
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: { line: "#" },
            },
        };

        exports.ttcnCfg = ttcnCfg;
    }
    _M85();
    function _M86() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        const parserConfig = {
            name: "ttcn",
            keywords: words(
                "activate address alive all alt altstep and and4b any" +
                " break case component const continue control deactivate" +
                " display do else encode enumerated except exception" +
                " execute extends extension external for from function" +
                " goto group if import in infinity inout interleave" +
                " label language length log match message mixed mod" +
                " modifies module modulepar mtc noblock not not4b nowait" +
                " of on optional or or4b out override param pattern port" +
                " procedure record recursive rem repeat return runs select" +
                " self sender set signature system template testcase to" +
                " type union value valueof var variant while with xor xor4b"
            ),
            builtin: words(
                "bit2hex bit2int bit2oct bit2str char2int char2oct encvalue" +
                " decomp decvalue float2int float2str hex2bit hex2int" +
                " hex2oct hex2str int2bit int2char int2float int2hex" +
                " int2oct int2str int2unichar isbound ischosen ispresent" +
                " isvalue lengthof log2str oct2bit oct2char oct2hex oct2int" +
                " oct2str regexp replace rnd sizeof str2bit str2float" +
                " str2hex str2int str2oct substr unichar2int unichar2char" +
                " enum2int"
            ),
            types: words(
                "anytype bitstring boolean char charstring default float" +
                " hexstring integer objid octetstring universal verdicttype timer"
            ),
            timerOps: words("read running start stop timeout"),
            portOps: words(
                "call catch check clear getcall getreply halt raise receive" +
                " reply send trigger"
            ),
            configOps: words(
                "create connect disconnect done kill killed map unmap"
            ),
            verdictOps: words("getverdict setverdict"),
            sutOps: words("action"),
            functionOps: words("apply derefers refers"),

            verdictConsts: words("error fail inconc none pass"),
            booleanConsts: words("true false"),
            otherConsts: words("null NULL omit"),

            visibilityModifiers: words("private public friend"),
            templateMatch: words(
                "complement ifpresent subset superset permutation"
            ),
            multiLineStrings: true,
        };

        var wordList = [];
        function add(obj) {
            if (obj)
                for (var prop in obj)
                    if (obj.hasOwnProperty(prop)) wordList.push(prop);
        }
        add(parserConfig.keywords);
        add(parserConfig.builtin);
        add(parserConfig.timerOps);
        add(parserConfig.portOps);

        var keywords = parserConfig.keywords || {},
            builtin = parserConfig.builtin || {},
            timerOps = parserConfig.timerOps || {},
            portOps = parserConfig.portOps || {},
            configOps = parserConfig.configOps || {},
            verdictOps = parserConfig.verdictOps || {},
            sutOps = parserConfig.sutOps || {},
            functionOps = parserConfig.functionOps || {},
            verdictConsts = parserConfig.verdictConsts || {},
            booleanConsts = parserConfig.booleanConsts || {},
            otherConsts = parserConfig.otherConsts || {},
            types = parserConfig.types || {},
            visibilityModifiers = parserConfig.visibilityModifiers || {},
            templateMatch = parserConfig.templateMatch || {},
            multiLineStrings = parserConfig.multiLineStrings,
            indentStatements = parserConfig.indentStatements !== false;
        var isOperatorChar = /[+\-*&@=<>!\/]/;
        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();

            if (ch == '"' || ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\[\]{}\(\),;\\:\?\.]/.test(ch)) {
                curPunc = ch;
                return "punctuation";
            }
            if (ch == "#") {
                stream.skipToEnd();
                return "atom";
            }
            if (ch == "%") {
                stream.eatWhile(/\b/);
                return "atom";
            }
            if (/\d/.test(ch)) {
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            if (ch == "/") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return tokenComment(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                if (ch == "@") {
                    if (
                        stream.match("try") ||
                        stream.match("catch") ||
                        stream.match("lazy")
                    ) {
                        return "keyword";
                    }
                }
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            var cur = stream.current();

            if (keywords.propertyIsEnumerable(cur)) return "keyword";
            if (builtin.propertyIsEnumerable(cur)) return "builtin";

            if (timerOps.propertyIsEnumerable(cur)) return "def";
            if (configOps.propertyIsEnumerable(cur)) return "def";
            if (verdictOps.propertyIsEnumerable(cur)) return "def";
            if (portOps.propertyIsEnumerable(cur)) return "def";
            if (sutOps.propertyIsEnumerable(cur)) return "def";
            if (functionOps.propertyIsEnumerable(cur)) return "def";

            if (verdictConsts.propertyIsEnumerable(cur)) return "string";
            if (booleanConsts.propertyIsEnumerable(cur)) return "string";
            if (otherConsts.propertyIsEnumerable(cur)) return "string";

            if (types.propertyIsEnumerable(cur)) return "typeName.standard";
            if (visibilityModifiers.propertyIsEnumerable(cur))
                return "modifier";
            if (templateMatch.propertyIsEnumerable(cur)) return "atom";

            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        var afterQuote = stream.peek();
                        //look if the character after the quote is like the B in '10100010'B
                        if (afterQuote) {
                            afterQuote = afterQuote.toLowerCase();
                            if (
                                afterQuote == "b" ||
                                afterQuote == "h" ||
                                afterQuote == "o"
                            )
                                stream.next();
                        }
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end || !(escaped || multiLineStrings))
                    state.tokenize = null;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "/" && maybeEnd) {
                    state.tokenize = null;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }

        function pushContext(state, col, type) {
            var indent = state.indented;
            if (state.context && state.context.type == "statement")
                indent = state.context.indented;
            return (state.context = new Context(
                indent,
                col,
                type,
                null,
                state.context
            ));
        }

        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        //Interface
        const ttcn = {
            startState: function() {
                return {
                    tokenize: null,
                    context: new Context(0, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":" || curPunc == ",") &&
                    ctx.type == "statement"
                ) {
                    popContext(state);
                } else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    indentStatements &&
                    (((ctx.type == "}" || ctx.type == "top") &&
                        curPunc != ";") ||
                        (ctx.type == "statement" && curPunc == "newstatement"))
                )
                    pushContext(state, stream.column(), "statement");

                state.startOfLine = false;

                return style;
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
                autocomplete: wordList,
            },
        };

        exports.ttcn = ttcn;
    }
    _M86();
    function _M87() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var curPunc;

        function wordRegexp(words) {
            return new RegExp("^(?:" + words.join("|") + ")$", "i");
        }
        wordRegexp([]);
        var keywords = wordRegexp(["@prefix", "@base", "a"]);
        var operatorChars = /[*+\-<>=&|]/;

        function tokenBase(stream, state) {
            var ch = stream.next();
            curPunc = null;
            if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
                stream.match(/^[^\s\u00a0>]*>?/);
                return "atom";
            } else if (ch == '"' || ch == "'") {
                state.tokenize = tokenLiteral(ch);
                return state.tokenize(stream, state);
            } else if (/[{}\(\),\.;\[\]]/.test(ch)) {
                curPunc = ch;
                return null;
            } else if (ch == "#") {
                stream.skipToEnd();
                return "comment";
            } else if (operatorChars.test(ch)) {
                stream.eatWhile(operatorChars);
                return null;
            } else if (ch == ":") {
                return "operator";
            } else {
                stream.eatWhile(/[_\w\d]/);
                if (stream.peek() == ":") {
                    return "variableName.special";
                } else {
                    var word = stream.current();

                    if (keywords.test(word)) {
                        return "meta";
                    }

                    if (ch >= "A" && ch <= "Z") {
                        return "comment";
                    } else {
                        return "keyword";
                    }
                }
                var word = stream.current();
            }
        }

        function tokenLiteral(quote) {
            return function(stream, state) {
                var escaped = false,
                    ch;
                while ((ch = stream.next()) != null) {
                    if (ch == quote && !escaped) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    escaped = !escaped && ch == "\\";
                }
                return "string";
            };
        }

        function pushContext(state, type, col) {
            state.context = {
                prev: state.context,
                indent: state.indent,
                col: col,
                type: type,
            };
        }
        function popContext(state) {
            state.indent = state.context.indent;
            state.context = state.context.prev;
        }

        const turtle = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    context: null,
                    indent: 0,
                    col: 0,
                };
            },

            token: function(stream, state) {
                if (stream.sol()) {
                    if (state.context && state.context.align == null)
                        state.context.align = false;
                    state.indent = stream.indentation();
                }
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);

                if (
                    style != "comment" &&
                    state.context &&
                    state.context.align == null &&
                    state.context.type != "pattern"
                ) {
                    state.context.align = true;
                }

                if (curPunc == "(") pushContext(state, ")", stream.column());
                else if (curPunc == "[")
                    pushContext(state, "]", stream.column());
                else if (curPunc == "{")
                    pushContext(state, "}", stream.column());
                else if (/[\]\}\)]/.test(curPunc)) {
                    while (state.context && state.context.type == "pattern")
                        popContext(state);
                    if (state.context && curPunc == state.context.type)
                        popContext(state);
                } else if (
                    curPunc == "." &&
                    state.context &&
                    state.context.type == "pattern"
                )
                    popContext(state);
                else if (/atom|string|variable/.test(style) && state.context) {
                    if (/[\}\]]/.test(state.context.type))
                        pushContext(state, "pattern", stream.column());
                    else if (
                        state.context.type == "pattern" &&
                        !state.context.align
                    ) {
                        state.context.align = true;
                        state.context.col = stream.column();
                    }
                }

                return style;
            },

            indent: function(state, textAfter, cx) {
                var firstChar = textAfter && textAfter.charAt(0);
                var context = state.context;
                if (/[\]\}]/.test(firstChar))
                    while (context && context.type == "pattern")
                        context = context.prev;

                var closing = context && firstChar == context.type;
                if (!context) return 0;
                else if (context.type == "pattern") return context.col;
                else if (context.align) return context.col + (closing ? 0 : 1);
                else return context.indent + (closing ? 0 : cx.unit);
            },

            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.turtle = turtle;
    }
    _M87();
    function _M88() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var ERRORCLASS = "error";

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
        }

        var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
        var singleDelimiters = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]");
        var doubleOperators = new RegExp(
            "^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))"
        );
        var doubleDelimiters = new RegExp(
            "^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))"
        );
        var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
        var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");

        var openingKeywords = [
            "class",
            "module",
            "sub",
            "enum",
            "select",
            "while",
            "if",
            "function",
            "get",
            "set",
            "property",
            "try",
            "structure",
            "synclock",
            "using",
            "with",
        ];
        var middleKeywords = ["else", "elseif", "case", "catch", "finally"];
        var endKeywords = ["next", "loop"];

        var operatorKeywords = [
            "and",
            "andalso",
            "or",
            "orelse",
            "xor",
            "in",
            "not",
            "is",
            "isnot",
            "like",
        ];
        var wordOperators = wordRegexp(operatorKeywords);

        var commonKeywords = [
            "#const",
            "#else",
            "#elseif",
            "#end",
            "#if",
            "#region",
            "addhandler",
            "addressof",
            "alias",
            "as",
            "byref",
            "byval",
            "cbool",
            "cbyte",
            "cchar",
            "cdate",
            "cdbl",
            "cdec",
            "cint",
            "clng",
            "cobj",
            "compare",
            "const",
            "continue",
            "csbyte",
            "cshort",
            "csng",
            "cstr",
            "cuint",
            "culng",
            "cushort",
            "declare",
            "default",
            "delegate",
            "dim",
            "directcast",
            "each",
            "erase",
            "error",
            "event",
            "exit",
            "explicit",
            "false",
            "for",
            "friend",
            "gettype",
            "goto",
            "handles",
            "implements",
            "imports",
            "infer",
            "inherits",
            "interface",
            "isfalse",
            "istrue",
            "lib",
            "me",
            "mod",
            "mustinherit",
            "mustoverride",
            "my",
            "mybase",
            "myclass",
            "namespace",
            "narrowing",
            "new",
            "nothing",
            "notinheritable",
            "notoverridable",
            "of",
            "off",
            "on",
            "operator",
            "option",
            "optional",
            "out",
            "overloads",
            "overridable",
            "overrides",
            "paramarray",
            "partial",
            "private",
            "protected",
            "public",
            "raiseevent",
            "readonly",
            "redim",
            "removehandler",
            "resume",
            "return",
            "shadows",
            "shared",
            "static",
            "step",
            "stop",
            "strict",
            "then",
            "throw",
            "to",
            "true",
            "trycast",
            "typeof",
            "until",
            "until",
            "when",
            "widening",
            "withevents",
            "writeonly",
        ];

        var commontypes = [
            "object",
            "boolean",
            "char",
            "string",
            "byte",
            "sbyte",
            "short",
            "ushort",
            "int16",
            "uint16",
            "integer",
            "uinteger",
            "int32",
            "uint32",
            "long",
            "ulong",
            "int64",
            "uint64",
            "decimal",
            "single",
            "double",
            "float",
            "date",
            "datetime",
            "intptr",
            "uintptr",
        ];

        var keywords = wordRegexp(commonKeywords);
        var types = wordRegexp(commontypes);
        var stringPrefixes = '"';

        var opening = wordRegexp(openingKeywords);
        var middle = wordRegexp(middleKeywords);
        var closing = wordRegexp(endKeywords);
        var doubleClosing = wordRegexp(["end"]);
        var doOpening = wordRegexp(["do"]);

        function indent(_stream, state) {
            state.currentIndent++;
        }

        function dedent(_stream, state) {
            state.currentIndent--;
        }
        // tokenizers
        function tokenBase(stream, state) {
            if (stream.eatSpace()) {
                return null;
            }

            var ch = stream.peek();

            // Handle Comments
            if (ch === "'") {
                stream.skipToEnd();
                return "comment";
            }

            // Handle Number Literals
            if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
                var floatLiteral = false;
                // Floats
                if (stream.match(/^\d*\.\d+F?/i)) {
                    floatLiteral = true;
                } else if (stream.match(/^\d+\.\d*F?/)) {
                    floatLiteral = true;
                } else if (stream.match(/^\.\d+F?/)) {
                    floatLiteral = true;
                }

                if (floatLiteral) {
                    // Float literals may be "imaginary"
                    stream.eat(/J/i);
                    return "number";
                }
                // Integers
                var intLiteral = false;
                // Hex
                if (stream.match(/^&H[0-9a-f]+/i)) {
                    intLiteral = true;
                }
                // Octal
                else if (stream.match(/^&O[0-7]+/i)) {
                    intLiteral = true;
                }
                // Decimal
                else if (stream.match(/^[1-9]\d*F?/)) {
                    // Decimal literals may be "imaginary"
                    stream.eat(/J/i);
                    // TODO - Can you have imaginary longs?
                    intLiteral = true;
                }
                // Zero by itself with no other piece of number.
                else if (stream.match(/^0(?![\dx])/i)) {
                    intLiteral = true;
                }
                if (intLiteral) {
                    // Integer literals may be "long"
                    stream.eat(/L/i);
                    return "number";
                }
            }

            // Handle Strings
            if (stream.match(stringPrefixes)) {
                state.tokenize = tokenStringFactory(stream.current());
                return state.tokenize(stream, state);
            }

            // Handle operators and Delimiters
            if (
                stream.match(tripleDelimiters) ||
                stream.match(doubleDelimiters)
            ) {
                return null;
            }
            if (
                stream.match(doubleOperators) ||
                stream.match(singleOperators) ||
                stream.match(wordOperators)
            ) {
                return "operator";
            }
            if (stream.match(singleDelimiters)) {
                return null;
            }
            if (stream.match(doOpening)) {
                indent(stream, state);
                state.doInCurrentLine = true;
                return "keyword";
            }
            if (stream.match(opening)) {
                if (!state.doInCurrentLine) indent(stream, state);
                else state.doInCurrentLine = false;
                return "keyword";
            }
            if (stream.match(middle)) {
                return "keyword";
            }

            if (stream.match(doubleClosing)) {
                dedent(stream, state);
                dedent(stream, state);
                return "keyword";
            }
            if (stream.match(closing)) {
                dedent(stream, state);
                return "keyword";
            }

            if (stream.match(types)) {
                return "keyword";
            }

            if (stream.match(keywords)) {
                return "keyword";
            }

            if (stream.match(identifiers)) {
                return "variable";
            }

            // Handle non-detected items
            stream.next();
            return ERRORCLASS;
        }

        function tokenStringFactory(delimiter) {
            var singleline = delimiter.length == 1;
            var OUTCLASS = "string";

            return function(stream, state) {
                while (!stream.eol()) {
                    stream.eatWhile(/[^'"]/);
                    if (stream.match(delimiter)) {
                        state.tokenize = tokenBase;
                        return OUTCLASS;
                    } else {
                        stream.eat(/['"]/);
                    }
                }
                if (singleline) {
                    state.tokenize = tokenBase;
                }
                return OUTCLASS;
            };
        }

        function tokenLexer(stream, state) {
            var style = state.tokenize(stream, state);
            var current = stream.current();

            // Handle '.' connected identifiers
            if (current === ".") {
                style = state.tokenize(stream, state);
                if (style === "variable") {
                    return "variable";
                } else {
                    return ERRORCLASS;
                }
            }

            var delimiter_index = "[({".indexOf(current);
            if (delimiter_index !== -1) {
                indent(stream, state);
            }
            delimiter_index = "])}".indexOf(current);
            if (delimiter_index !== -1) {
                if (dedent(stream, state)) {
                    return ERRORCLASS;
                }
            }

            return style;
        }

        const vb = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    lastToken: null,
                    currentIndent: 0,
                    nextLineIndent: 0,
                    doInCurrentLine: false,
                };
            },

            token: function(stream, state) {
                if (stream.sol()) {
                    state.currentIndent += state.nextLineIndent;
                    state.nextLineIndent = 0;
                    state.doInCurrentLine = 0;
                }
                var style = tokenLexer(stream, state);

                state.lastToken = { style: style, content: stream.current() };

                return style;
            },

            indent: function(state, textAfter, cx) {
                var trueText = textAfter.replace(/^\s+|\s+$/g, "");
                if (
                    trueText.match(closing) ||
                    trueText.match(doubleClosing) ||
                    trueText.match(middle)
                )
                    return cx.unit * (state.currentIndent - 1);
                if (state.currentIndent < 0) return 0;
                return state.currentIndent * cx.unit;
            },

            languageData: {
                closeBrackets: { brackets: ["(", "[", "{", '"'] },
                commentTokens: { line: "'" },
                autocomplete: openingKeywords
                    .concat(middleKeywords)
                    .concat(endKeywords)
                    .concat(operatorKeywords)
                    .concat(commonKeywords)
                    .concat(commontypes),
            },
        };

        exports.vb = vb;
    }
    _M88();
    function _M89() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkVBScript(parserConf) {
            var ERRORCLASS = "error";

            function wordRegexp(words) {
                return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
            }

            var singleOperators = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
            var doubleOperators = new RegExp("^((<>)|(<=)|(>=))");
            var singleDelimiters = new RegExp("^[\\.,]");
            var brackets = new RegExp("^[\\(\\)]");
            var identifiers = new RegExp("^[A-Za-z][_A-Za-z0-9]*");

            var openingKeywords = [
                "class",
                "sub",
                "select",
                "while",
                "if",
                "function",
                "property",
                "with",
                "for",
            ];
            var middleKeywords = ["else", "elseif", "case"];
            var endKeywords = ["next", "loop", "wend"];

            var wordOperators = wordRegexp([
                "and",
                "or",
                "not",
                "xor",
                "is",
                "mod",
                "eqv",
                "imp",
            ]);
            var commonkeywords = [
                "dim",
                "redim",
                "then",
                "until",
                "randomize",
                "byval",
                "byref",
                "new",
                "property",
                "exit",
                "in",
                "const",
                "private",
                "public",
                "get",
                "set",
                "let",
                "stop",
                "on error resume next",
                "on error goto 0",
                "option explicit",
                "call",
                "me",
            ];

            //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx
            var atomWords = ["true", "false", "nothing", "empty", "null"];
            //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx
            var builtinFuncsWords = [
                "abs",
                "array",
                "asc",
                "atn",
                "cbool",
                "cbyte",
                "ccur",
                "cdate",
                "cdbl",
                "chr",
                "cint",
                "clng",
                "cos",
                "csng",
                "cstr",
                "date",
                "dateadd",
                "datediff",
                "datepart",
                "dateserial",
                "datevalue",
                "day",
                "escape",
                "eval",
                "execute",
                "exp",
                "filter",
                "formatcurrency",
                "formatdatetime",
                "formatnumber",
                "formatpercent",
                "getlocale",
                "getobject",
                "getref",
                "hex",
                "hour",
                "inputbox",
                "instr",
                "instrrev",
                "int",
                "fix",
                "isarray",
                "isdate",
                "isempty",
                "isnull",
                "isnumeric",
                "isobject",
                "join",
                "lbound",
                "lcase",
                "left",
                "len",
                "loadpicture",
                "log",
                "ltrim",
                "rtrim",
                "trim",
                "maths",
                "mid",
                "minute",
                "month",
                "monthname",
                "msgbox",
                "now",
                "oct",
                "replace",
                "rgb",
                "right",
                "rnd",
                "round",
                "scriptengine",
                "scriptenginebuildversion",
                "scriptenginemajorversion",
                "scriptengineminorversion",
                "second",
                "setlocale",
                "sgn",
                "sin",
                "space",
                "split",
                "sqr",
                "strcomp",
                "string",
                "strreverse",
                "tan",
                "time",
                "timer",
                "timeserial",
                "timevalue",
                "typename",
                "ubound",
                "ucase",
                "unescape",
                "vartype",
                "weekday",
                "weekdayname",
                "year",
            ];

            //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx
            var builtinConsts = [
                "vbBlack",
                "vbRed",
                "vbGreen",
                "vbYellow",
                "vbBlue",
                "vbMagenta",
                "vbCyan",
                "vbWhite",
                "vbBinaryCompare",
                "vbTextCompare",
                "vbSunday",
                "vbMonday",
                "vbTuesday",
                "vbWednesday",
                "vbThursday",
                "vbFriday",
                "vbSaturday",
                "vbUseSystemDayOfWeek",
                "vbFirstJan1",
                "vbFirstFourDays",
                "vbFirstFullWeek",
                "vbGeneralDate",
                "vbLongDate",
                "vbShortDate",
                "vbLongTime",
                "vbShortTime",
                "vbObjectError",
                "vbOKOnly",
                "vbOKCancel",
                "vbAbortRetryIgnore",
                "vbYesNoCancel",
                "vbYesNo",
                "vbRetryCancel",
                "vbCritical",
                "vbQuestion",
                "vbExclamation",
                "vbInformation",
                "vbDefaultButton1",
                "vbDefaultButton2",
                "vbDefaultButton3",
                "vbDefaultButton4",
                "vbApplicationModal",
                "vbSystemModal",
                "vbOK",
                "vbCancel",
                "vbAbort",
                "vbRetry",
                "vbIgnore",
                "vbYes",
                "vbNo",
                "vbCr",
                "VbCrLf",
                "vbFormFeed",
                "vbLf",
                "vbNewLine",
                "vbNullChar",
                "vbNullString",
                "vbTab",
                "vbVerticalTab",
                "vbUseDefault",
                "vbTrue",
                "vbFalse",
                "vbEmpty",
                "vbNull",
                "vbInteger",
                "vbLong",
                "vbSingle",
                "vbDouble",
                "vbCurrency",
                "vbDate",
                "vbString",
                "vbObject",
                "vbError",
                "vbBoolean",
                "vbVariant",
                "vbDataObject",
                "vbDecimal",
                "vbByte",
                "vbArray",
            ];
            //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx
            var builtinObjsWords = ["WScript", "err", "debug", "RegExp"];
            var knownProperties = [
                "description",
                "firstindex",
                "global",
                "helpcontext",
                "helpfile",
                "ignorecase",
                "length",
                "number",
                "pattern",
                "source",
                "value",
                "count",
            ];
            var knownMethods = [
                "clear",
                "execute",
                "raise",
                "replace",
                "test",
                "write",
                "writeline",
                "close",
                "open",
                "state",
                "eof",
                "update",
                "addnew",
                "end",
                "createobject",
                "quit",
            ];

            var aspBuiltinObjsWords = [
                "server",
                "response",
                "request",
                "session",
                "application",
            ];
            var aspKnownProperties = [
                "buffer",
                "cachecontrol",
                "charset",
                "contenttype",
                "expires",
                "expiresabsolute",
                "isclientconnected",
                "pics",
                "status", //response
                "clientcertificate",
                "cookies",
                "form",
                "querystring",
                "servervariables",
                "totalbytes", //request
                "contents",
                "staticobjects", //application
                "codepage",
                "lcid",
                "sessionid",
                "timeout", //session
                "scripttimeout",
            ]; //server
            var aspKnownMethods = [
                "addheader",
                "appendtolog",
                "binarywrite",
                "end",
                "flush",
                "redirect", //response
                "binaryread", //request
                "remove",
                "removeall",
                "lock",
                "unlock", //application
                "abandon", //session
                "getlasterror",
                "htmlencode",
                "mappath",
                "transfer",
                "urlencode",
            ]; //server

            var knownWords = knownMethods.concat(knownProperties);

            builtinObjsWords = builtinObjsWords.concat(builtinConsts);

            if (parserConf.isASP) {
                builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
                knownWords = knownWords.concat(
                    aspKnownMethods,
                    aspKnownProperties
                );
            }
            var keywords = wordRegexp(commonkeywords);
            var atoms = wordRegexp(atomWords);
            var builtinFuncs = wordRegexp(builtinFuncsWords);
            var builtinObjs = wordRegexp(builtinObjsWords);
            var known = wordRegexp(knownWords);
            var stringPrefixes = '"';

            var opening = wordRegexp(openingKeywords);
            var middle = wordRegexp(middleKeywords);
            var closing = wordRegexp(endKeywords);
            var doubleClosing = wordRegexp(["end"]);
            var doOpening = wordRegexp(["do"]);
            var noIndentWords = wordRegexp(["on error resume next", "exit"]);
            var comment = wordRegexp(["rem"]);

            function indent(_stream, state) {
                state.currentIndent++;
            }

            function dedent(_stream, state) {
                state.currentIndent--;
            }
            // tokenizers
            function tokenBase(stream, state) {
                if (stream.eatSpace()) {
                    return null;
                    //return null;
                }

                var ch = stream.peek();

                // Handle Comments
                if (ch === "'") {
                    stream.skipToEnd();
                    return "comment";
                }
                if (stream.match(comment)) {
                    stream.skipToEnd();
                    return "comment";
                }

                // Handle Number Literals
                if (
                    stream.match(/^((&H)|(&O))?[0-9\.]/i, false) &&
                    !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)
                ) {
                    var floatLiteral = false;
                    // Floats
                    if (stream.match(/^\d*\.\d+/i)) {
                        floatLiteral = true;
                    } else if (stream.match(/^\d+\.\d*/)) {
                        floatLiteral = true;
                    } else if (stream.match(/^\.\d+/)) {
                        floatLiteral = true;
                    }

                    if (floatLiteral) {
                        // Float literals may be "imaginary"
                        stream.eat(/J/i);
                        return "number";
                    }
                    // Integers
                    var intLiteral = false;
                    // Hex
                    if (stream.match(/^&H[0-9a-f]+/i)) {
                        intLiteral = true;
                    }
                    // Octal
                    else if (stream.match(/^&O[0-7]+/i)) {
                        intLiteral = true;
                    }
                    // Decimal
                    else if (stream.match(/^[1-9]\d*F?/)) {
                        // Decimal literals may be "imaginary"
                        stream.eat(/J/i);
                        // TODO - Can you have imaginary longs?
                        intLiteral = true;
                    }
                    // Zero by itself with no other piece of number.
                    else if (stream.match(/^0(?![\dx])/i)) {
                        intLiteral = true;
                    }
                    if (intLiteral) {
                        // Integer literals may be "long"
                        stream.eat(/L/i);
                        return "number";
                    }
                }

                // Handle Strings
                if (stream.match(stringPrefixes)) {
                    state.tokenize = tokenStringFactory(stream.current());
                    return state.tokenize(stream, state);
                }

                // Handle operators and Delimiters
                if (
                    stream.match(doubleOperators) ||
                    stream.match(singleOperators) ||
                    stream.match(wordOperators)
                ) {
                    return "operator";
                }
                if (stream.match(singleDelimiters)) {
                    return null;
                }

                if (stream.match(brackets)) {
                    return "bracket";
                }

                if (stream.match(noIndentWords)) {
                    state.doInCurrentLine = true;

                    return "keyword";
                }

                if (stream.match(doOpening)) {
                    indent(stream, state);
                    state.doInCurrentLine = true;

                    return "keyword";
                }
                if (stream.match(opening)) {
                    if (!state.doInCurrentLine) indent(stream, state);
                    else state.doInCurrentLine = false;

                    return "keyword";
                }
                if (stream.match(middle)) {
                    return "keyword";
                }

                if (stream.match(doubleClosing)) {
                    dedent(stream, state);
                    dedent(stream, state);

                    return "keyword";
                }
                if (stream.match(closing)) {
                    if (!state.doInCurrentLine) dedent(stream, state);
                    else state.doInCurrentLine = false;

                    return "keyword";
                }

                if (stream.match(keywords)) {
                    return "keyword";
                }

                if (stream.match(atoms)) {
                    return "atom";
                }

                if (stream.match(known)) {
                    return "variableName.special";
                }

                if (stream.match(builtinFuncs)) {
                    return "builtin";
                }

                if (stream.match(builtinObjs)) {
                    return "builtin";
                }

                if (stream.match(identifiers)) {
                    return "variable";
                }

                // Handle non-detected items
                stream.next();
                return ERRORCLASS;
            }

            function tokenStringFactory(delimiter) {
                var singleline = delimiter.length == 1;
                var OUTCLASS = "string";

                return function(stream, state) {
                    while (!stream.eol()) {
                        stream.eatWhile(/[^'"]/);
                        if (stream.match(delimiter)) {
                            state.tokenize = tokenBase;
                            return OUTCLASS;
                        } else {
                            stream.eat(/['"]/);
                        }
                    }
                    if (singleline) {
                        state.tokenize = tokenBase;
                    }
                    return OUTCLASS;
                };
            }

            function tokenLexer(stream, state) {
                var style = state.tokenize(stream, state);
                var current = stream.current();

                // Handle '.' connected identifiers
                if (current === ".") {
                    style = state.tokenize(stream, state);

                    current = stream.current();
                    if (
                        style &&
                        (style.substr(0, 8) === "variable" ||
                            style === "builtin" ||
                            style === "keyword")
                    ) {
                        //|| knownWords.indexOf(current.substring(1)) > -1) {
                        if (style === "builtin" || style === "keyword")
                            style = "variable";
                        if (knownWords.indexOf(current.substr(1)) > -1)
                            style = "keyword";

                        return style;
                    } else {
                        return ERRORCLASS;
                    }
                }

                return style;
            }

            return {
                startState: function() {
                    return {
                        tokenize: tokenBase,
                        lastToken: null,
                        currentIndent: 0,
                        nextLineIndent: 0,
                        doInCurrentLine: false,
                        ignoreKeyword: false,
                    };
                },

                token: function(stream, state) {
                    if (stream.sol()) {
                        state.currentIndent += state.nextLineIndent;
                        state.nextLineIndent = 0;
                        state.doInCurrentLine = 0;
                    }
                    var style = tokenLexer(stream, state);

                    state.lastToken = {
                        style: style,
                        content: stream.current(),
                    };

                    if (style === null) style = null;

                    return style;
                },

                indent: function(state, textAfter, cx) {
                    var trueText = textAfter.replace(/^\s+|\s+$/g, "");
                    if (
                        trueText.match(closing) ||
                        trueText.match(doubleClosing) ||
                        trueText.match(middle)
                    )
                        return cx.unit * (state.currentIndent - 1);
                    if (state.currentIndent < 0) return 0;
                    return state.currentIndent * cx.unit;
                },
            };
        }
        const vbScript = mkVBScript({});
        const vbScriptASP = mkVBScript({ isASP: true });

        exports.vbScript = vbScript;
        exports.vbScriptASP = vbScriptASP;
    }
    _M89();
    function _M90() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function parseWords(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var keywords = parseWords(
            "#end #else #break #stop #[[ #]] " +
            "#{end} #{else} #{break} #{stop}"
        );
        var functions = parseWords(
            "#if #elseif #foreach #set #include #parse #macro #define #evaluate " +
            "#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}"
        );
        var specials = parseWords(
            "$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent"
        );
        var isOperatorChar = /[+\-*&%=<>!?:\/|]/;

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }
        function tokenBase(stream, state) {
            var beforeParams = state.beforeParams;
            state.beforeParams = false;
            var ch = stream.next();
            // start of unparsed string?
            if (ch == "'" && !state.inString && state.inParams) {
                state.lastTokenWasBuiltin = false;
                return chain(stream, state, tokenString(ch));
            }
            // start of parsed string?
            else if (ch == '"') {
                state.lastTokenWasBuiltin = false;
                if (state.inString) {
                    state.inString = false;
                    return "string";
                } else if (state.inParams)
                    return chain(stream, state, tokenString(ch));
            }
            // is it one of the special signs []{}().,;? Separator?
            else if (/[\[\]{}\(\),;\.]/.test(ch)) {
                if (ch == "(" && beforeParams) state.inParams = true;
                else if (ch == ")") {
                    state.inParams = false;
                    state.lastTokenWasBuiltin = true;
                }
                return null;
            }
            // start of a number value?
            else if (/\d/.test(ch)) {
                state.lastTokenWasBuiltin = false;
                stream.eatWhile(/[\w\.]/);
                return "number";
            }
            // multi line comment?
            else if (ch == "#" && stream.eat("*")) {
                state.lastTokenWasBuiltin = false;
                return chain(stream, state, tokenComment);
            }
            // unparsed content?
            else if (ch == "#" && stream.match(/ *\[ *\[/)) {
                state.lastTokenWasBuiltin = false;
                return chain(stream, state, tokenUnparsed);
            }
            // single line comment?
            else if (ch == "#" && stream.eat("#")) {
                state.lastTokenWasBuiltin = false;
                stream.skipToEnd();
                return "comment";
            }
            // variable?
            else if (ch == "$") {
                stream.eat("!");
                stream.eatWhile(/[\w\d\$_\.{}-]/);
                // is it one of the specials?
                if (
                    specials &&
                    specials.propertyIsEnumerable(stream.current())
                ) {
                    return "keyword";
                } else {
                    state.lastTokenWasBuiltin = true;
                    state.beforeParams = true;
                    return "builtin";
                }
            }
            // is it a operator?
            else if (isOperatorChar.test(ch)) {
                state.lastTokenWasBuiltin = false;
                stream.eatWhile(isOperatorChar);
                return "operator";
            } else {
                // get the whole word
                stream.eatWhile(/[\w\$_{}@]/);
                var word = stream.current();
                // is it one of the listed keywords?
                if (keywords && keywords.propertyIsEnumerable(word))
                    return "keyword";
                // is it one of the listed functions?
                if (
                    (functions && functions.propertyIsEnumerable(word)) ||
                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) &&
                        stream.peek() == "(" &&
                        !(
                            functions &&
                            functions.propertyIsEnumerable(word.toLowerCase())
                        ))
                ) {
                    state.beforeParams = true;
                    state.lastTokenWasBuiltin = false;
                    return "keyword";
                }
                if (state.inString) {
                    state.lastTokenWasBuiltin = false;
                    return "string";
                }
                if (
                    stream.pos > word.length &&
                    stream.string.charAt(stream.pos - word.length - 1) == "." &&
                    state.lastTokenWasBuiltin
                )
                    return "builtin";
                // default: just a "word"
                state.lastTokenWasBuiltin = false;
                return null;
            }
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    if (quote == '"' && stream.peek() == "$" && !escaped) {
                        state.inString = true;
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "\\";
                }
                if (end) state.tokenize = tokenBase;
                return "string";
            };
        }

        function tokenComment(stream, state) {
            var maybeEnd = false,
                ch;
            while ((ch = stream.next())) {
                if (ch == "#" && maybeEnd) {
                    state.tokenize = tokenBase;
                    break;
                }
                maybeEnd = ch == "*";
            }
            return "comment";
        }

        function tokenUnparsed(stream, state) {
            var maybeEnd = 0,
                ch;
            while ((ch = stream.next())) {
                if (ch == "#" && maybeEnd == 2) {
                    state.tokenize = tokenBase;
                    break;
                }
                if (ch == "]") maybeEnd++;
                else if (ch != " ") maybeEnd = 0;
            }
            return "meta";
        }
        // Interface

        const velocity = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    beforeParams: false,
                    inParams: false,
                    inString: false,
                    lastTokenWasBuiltin: false,
                };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
            languageData: {
                commentTokens: {
                    line: "##",
                    block: { open: "#*", close: "*#" },
                },
            },
        };

        exports.velocity = velocity;
    }
    _M90();
    function _M91() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function mkVerilog(parserConfig) {
            var statementIndentUnit = parserConfig.statementIndentUnit,
                dontAlignCalls = parserConfig.dontAlignCalls,
                noIndentKeywords = parserConfig.noIndentKeywords || [],
                multiLineStrings = parserConfig.multiLineStrings,
                hooks = parserConfig.hooks || {};

            function words(str) {
                var obj = {},
                    words = str.split(" ");
                for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
                return obj;
            }

            /**
             * Keywords from IEEE 1800-2012
             */
            var keywords = words(
                "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +
                "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +
                "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +
                "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +
                "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +
                "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +
                "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +
                "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +
                "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +
                "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +
                "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +
                "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +
                "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +
                "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +
                "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +
                "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +
                "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +
                "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"
            );

            /** Operators from IEEE 1800-2012
      unary_operator ::=
      + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
      binary_operator ::=
      + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **
      | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<
      | -> | <->
      inc_or_dec_operator ::= ++ | --
      unary_module_path_operator ::=
      ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
      binary_module_path_operator ::=
      == | != | && | || | & | | | ^ | ^~ | ~^
  */
            var isOperatorChar = /[\+\-\*\/!~&|^%=?:]/;
            var isBracketChar = /[\[\]{}()]/;

            var unsignedNumber = /\d[0-9_]*/;
            var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
            var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
            var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
            var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
            var realLiteral =
                /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;

            var closingBracketOrWord = /^((\w+)|[)}\]])/;
            var closingBracket = /[)}\]]/;

            var curPunc;
            var curKeyword;

            // Block openings which are closed by a matching keyword in the form of ("end" + keyword)
            // E.g. "task" => "endtask"
            var blockKeywords = words(
                "case checker class clocking config function generate interface module package " +
                "primitive program property specify sequence table task"
            );

            // Opening/closing pairs
            var openClose = {};
            for (var keyword in blockKeywords) {
                openClose[keyword] = "end" + keyword;
            }
            openClose["begin"] = "end";
            openClose["casex"] = "endcase";
            openClose["casez"] = "endcase";
            openClose["do"] = "while";
            openClose["fork"] = "join;join_any;join_none";
            openClose["covergroup"] = "endgroup";

            for (var i in noIndentKeywords) {
                var keyword = noIndentKeywords[i];
                if (openClose[keyword]) {
                    openClose[keyword] = undefined;
                }
            }

            // Keywords which open statements that are ended with a semi-colon
            var statementKeywords = words(
                "always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while"
            );

            function tokenBase(stream, state) {
                var ch = stream.peek(),
                    style;
                if (hooks[ch] && (style = hooks[ch](stream, state)) != false)
                    return style;
                if (
                    hooks.tokenBase &&
                    (style = hooks.tokenBase(stream, state)) != false
                )
                    return style;

                if (/[,;:\.]/.test(ch)) {
                    curPunc = stream.next();
                    return null;
                }
                if (isBracketChar.test(ch)) {
                    curPunc = stream.next();
                    return "bracket";
                }
                // Macros (tick-defines)
                if (ch == "`") {
                    stream.next();
                    if (stream.eatWhile(/[\w\$_]/)) {
                        return "def";
                    } else {
                        return null;
                    }
                }
                // System calls
                if (ch == "$") {
                    stream.next();
                    if (stream.eatWhile(/[\w\$_]/)) {
                        return "meta";
                    } else {
                        return null;
                    }
                }
                // Time literals
                if (ch == "#") {
                    stream.next();
                    stream.eatWhile(/[\d_.]/);
                    return "def";
                }
                // Strings
                if (ch == '"') {
                    stream.next();
                    state.tokenize = tokenString(ch);
                    return state.tokenize(stream, state);
                }
                // Comments
                if (ch == "/") {
                    stream.next();
                    if (stream.eat("*")) {
                        state.tokenize = tokenComment;
                        return tokenComment(stream, state);
                    }
                    if (stream.eat("/")) {
                        stream.skipToEnd();
                        return "comment";
                    }
                    stream.backUp(1);
                }

                // Numeric literals
                if (
                    stream.match(realLiteral) ||
                    stream.match(decimalLiteral) ||
                    stream.match(binaryLiteral) ||
                    stream.match(octLiteral) ||
                    stream.match(hexLiteral) ||
                    stream.match(unsignedNumber) ||
                    stream.match(realLiteral)
                ) {
                    return "number";
                }

                // Operators
                if (stream.eatWhile(isOperatorChar)) {
                    return "meta";
                }

                // Keywords / plain variables
                if (stream.eatWhile(/[\w\$_]/)) {
                    var cur = stream.current();
                    if (keywords[cur]) {
                        if (openClose[cur]) {
                            curPunc = "newblock";
                        }
                        if (statementKeywords[cur]) {
                            curPunc = "newstatement";
                        }
                        curKeyword = cur;
                        return "keyword";
                    }
                    return "variable";
                }

                stream.next();
                return null;
            }

            function tokenString(quote) {
                return function(stream, state) {
                    var escaped = false,
                        next,
                        end = false;
                    while ((next = stream.next()) != null) {
                        if (next == quote && !escaped) {
                            end = true;
                            break;
                        }
                        escaped = !escaped && next == "\\";
                    }
                    if (end || !(escaped || multiLineStrings))
                        state.tokenize = tokenBase;
                    return "string";
                };
            }

            function tokenComment(stream, state) {
                var maybeEnd = false,
                    ch;
                while ((ch = stream.next())) {
                    if (ch == "/" && maybeEnd) {
                        state.tokenize = tokenBase;
                        break;
                    }
                    maybeEnd = ch == "*";
                }
                return "comment";
            }

            function Context(indented, column, type, align, prev) {
                this.indented = indented;
                this.column = column;
                this.type = type;
                this.align = align;
                this.prev = prev;
            }
            function pushContext(state, col, type) {
                var indent = state.indented;
                var c = new Context(indent, col, type, null, state.context);
                return (state.context = c);
            }
            function popContext(state) {
                var t = state.context.type;
                if (t == ")" || t == "]" || t == "}") {
                    state.indented = state.context.indented;
                }
                return (state.context = state.context.prev);
            }

            function isClosing(text, contextClosing) {
                if (text == contextClosing) {
                    return true;
                } else {
                    // contextClosing may be multiple keywords separated by ;
                    var closingKeywords = contextClosing.split(";");
                    for (var i in closingKeywords) {
                        if (text == closingKeywords[i]) {
                            return true;
                        }
                    }
                    return false;
                }
            }

            function buildElectricInputRegEx() {
                // Reindentation should occur on any bracket char: {}()[]
                // or on a match of any of the block closing keywords, at
                // the end of a line
                var allClosings = [];
                for (var i in openClose) {
                    if (openClose[i]) {
                        var closings = openClose[i].split(";");
                        for (var j in closings) {
                            allClosings.push(closings[j]);
                        }
                    }
                }
                var re = new RegExp(
                    "[{}()\\[\\]]|(" + allClosings.join("|") + ")$"
                );
                return re;
            }

            // Interface
            return {
                startState: function(indentUnit) {
                    var state = {
                        tokenize: null,
                        context: new Context(-indentUnit, 0, "top", false),
                        indented: 0,
                        startOfLine: true,
                    };
                    if (hooks.startState) hooks.startState(state);
                    return state;
                },

                token: function(stream, state) {
                    var ctx = state.context;
                    if (stream.sol()) {
                        if (ctx.align == null) ctx.align = false;
                        state.indented = stream.indentation();
                        state.startOfLine = true;
                    }
                    if (hooks.token) {
                        // Call hook, with an optional return value of a style to override verilog styling.
                        var style = hooks.token(stream, state);
                        if (style !== undefined) {
                            return style;
                        }
                    }
                    if (stream.eatSpace()) return null;
                    curPunc = null;
                    curKeyword = null;
                    var style = (state.tokenize || tokenBase)(stream, state);
                    if (
                        style == "comment" ||
                        style == "meta" ||
                        style == "variable"
                    )
                        return style;
                    if (ctx.align == null) ctx.align = true;

                    if (curPunc == ctx.type) {
                        popContext(state);
                    } else if (
                        (curPunc == ";" && ctx.type == "statement") ||
                        (ctx.type && isClosing(curKeyword, ctx.type))
                    ) {
                        ctx = popContext(state);
                        while (ctx && ctx.type == "statement")
                            ctx = popContext(state);
                    } else if (curPunc == "{") {
                        pushContext(state, stream.column(), "}");
                    } else if (curPunc == "[") {
                        pushContext(state, stream.column(), "]");
                    } else if (curPunc == "(") {
                        pushContext(state, stream.column(), ")");
                    } else if (ctx && ctx.type == "endcase" && curPunc == ":") {
                        pushContext(state, stream.column(), "statement");
                    } else if (curPunc == "newstatement") {
                        pushContext(state, stream.column(), "statement");
                    } else if (curPunc == "newblock") {
                        if (
                            curKeyword == "function" &&
                            ctx &&
                            (ctx.type == "statement" || ctx.type == "endgroup")
                        );
                        else if (
                            curKeyword == "task" &&
                            ctx &&
                            ctx.type == "statement"
                        );
                        else {
                            var close = openClose[curKeyword];
                            pushContext(state, stream.column(), close);
                        }
                    }

                    state.startOfLine = false;
                    return style;
                },

                indent: function(state, textAfter, cx) {
                    if (state.tokenize != tokenBase && state.tokenize != null)
                        return null;
                    if (hooks.indent) {
                        var fromHook = hooks.indent(state);
                        if (fromHook >= 0) return fromHook;
                    }
                    var ctx = state.context,
                        firstChar = textAfter && textAfter.charAt(0);
                    if (ctx.type == "statement" && firstChar == "}")
                        ctx = ctx.prev;
                    var closing = false;
                    var possibleClosing = textAfter.match(closingBracketOrWord);
                    if (possibleClosing)
                        closing = isClosing(possibleClosing[0], ctx.type);
                    if (ctx.type == "statement")
                        return (
                            ctx.indented +
                            (firstChar == "{"
                                ? 0
                                : statementIndentUnit || cx.unit)
                        );
                    else if (
                        closingBracket.test(ctx.type) &&
                        ctx.align &&
                        !dontAlignCalls
                    )
                        return ctx.column + (closing ? 0 : 1);
                    else if (ctx.type == ")" && !closing)
                        return ctx.indented + (statementIndentUnit || cx.unit);
                    else return ctx.indented + (closing ? 0 : cx.unit);
                },

                languageData: {
                    indentOnInput: buildElectricInputRegEx(),
                    commentTokens: {
                        line: "//",
                        block: { open: "/*", close: "*/" },
                    },
                },
            };
        }
        const verilog = mkVerilog({});

        // TL-Verilog mode.
        // See tl-x.org for language spec.
        // See the mode in action at makerchip.com.
        // Contact: steve.hoover@redwoodeda.com

        // TLV Identifier prefixes.
        // Note that sign is not treated separately, so "+/-" versions of numeric identifiers
        // are included.
        var tlvIdentifierStyle = {
            "|": "link",
            ">": "property", // Should condition this off for > TLV 1c.
            $: "variable",
            $$: "variable",
            "?$": "qualifier",
            "?*": "qualifier",
            "-": "contentSeparator",
            "/": "property",
            "/-": "property",
            "@": "variableName.special",
            "@-": "variableName.special",
            "@++": "variableName.special",
            "@+=": "variableName.special",
            "@+=-": "variableName.special",
            "@--": "variableName.special",
            "@-=": "variableName.special",
            "%+": "tag",
            "%-": "tag",
            "%": "tag",
            ">>": "tag",
            "<<": "tag",
            "<>": "tag",
            "#": "tag", // Need to choose a style for this.
            "^": "attribute",
            "^^": "attribute",
            "^!": "attribute",
            "*": "variable",
            "**": "variable",
            "\\": "keyword",
            '"': "comment",
        };

        // Lines starting with these characters define scope (result in indentation).
        var tlvScopePrefixChars = {
            "/": "beh-hier",
            ">": "beh-hier",
            "-": "phys-hier",
            "|": "pipe",
            "?": "when",
            "@": "stage",
            "\\": "keyword",
        };
        var tlvIndentUnit = 3;
        var tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/; // Matches an identifier.
        // Note that ':' is excluded, because of it's use in [:].
        var tlvLineIndentationMatch = /^[! ] */;
        var tlvCommentMatch = /^\/[\/\*]/;

        const tlv = mkVerilog({
            hooks: {
                electricInput: false,

                // Return undefined for verilog tokenizing, or style for TLV token (null not used).
                // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
                // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
                //   - M4 tokens
                //   - TLV scope indentation
                //   - Statement delimitation (enabled by tlvTrackStatements)
                token: function(stream, state) {
                    var style = undefined;
                    var match; // Return value of pattern matches.

                    // Set highlighting mode based on code region (TLV or SV).
                    if (stream.sol() && !state.tlvInBlockComment) {
                        // Process region.
                        if (stream.peek() == "\\") {
                            style = "def";
                            stream.skipToEnd();
                            if (stream.string.match(/\\SV/)) {
                                state.tlvCodeActive = false;
                            } else if (stream.string.match(/\\TLV/)) {
                                state.tlvCodeActive = true;
                            }
                        }
                        // Correct indentation in the face of a line prefix char.
                        if (
                            state.tlvCodeActive &&
                            stream.pos == 0 &&
                            state.indented == 0 &&
                            (match = stream.match(
                                tlvLineIndentationMatch,
                                false
                            ))
                        ) {
                            state.indented = match[0].length;
                        }

                        // Compute indentation state:
                        //   o Auto indentation on next line
                        //   o Indentation scope styles
                        var indented = state.indented;
                        var depth = indented / tlvIndentUnit;
                        if (depth <= state.tlvIndentationStyle.length) {
                            // not deeper than current scope

                            var blankline = stream.string.length == indented;
                            var chPos = depth * tlvIndentUnit;
                            if (chPos < stream.string.length) {
                                var bodyString = stream.string.slice(chPos);
                                var ch = bodyString[0];
                                if (
                                    tlvScopePrefixChars[ch] &&
                                    (match = bodyString.match(tlvIdentMatch)) &&
                                    tlvIdentifierStyle[match[1]]
                                ) {
                                    // This line begins scope.
                                    // Next line gets indented one level.
                                    indented += tlvIndentUnit;
                                    // Style the next level of indentation (except non-region keyword identifiers,
                                    //   which are statements themselves)
                                    if (!(ch == "\\" && chPos > 0)) {
                                        state.tlvIndentationStyle[depth] =
                                            tlvScopePrefixChars[ch];
                                        depth++;
                                    }
                                }
                            }
                            // Clear out deeper indentation levels unless line is blank.
                            if (!blankline) {
                                while (
                                    state.tlvIndentationStyle.length > depth
                                ) {
                                    state.tlvIndentationStyle.pop();
                                }
                            }
                        }
                        // Set next level of indentation.
                        state.tlvNextIndent = indented;
                    }

                    if (state.tlvCodeActive) {
                        var match;
                        if (style !== undefined);
                        else if (state.tlvInBlockComment) {
                            // In a block comment.
                            if (stream.match(/^.*?\*\//)) {
                                // Exit block comment.
                                state.tlvInBlockComment = false;
                            } else {
                                stream.skipToEnd();
                            }
                            style = "comment";
                        } else if (
                            (match = stream.match(tlvCommentMatch)) &&
                            !state.tlvInBlockComment
                        ) {
                            // Start comment.
                            if (match[0] == "//") {
                                // Line comment.
                                stream.skipToEnd();
                            } else {
                                // Block comment.
                                state.tlvInBlockComment = true;
                            }
                            style = "comment";
                        } else if ((match = stream.match(tlvIdentMatch))) {
                            // looks like an identifier (or identifier prefix)
                            var prefix = match[1];
                            var mnemonic = match[2];
                            if (
                                // is identifier prefix
                                tlvIdentifierStyle.hasOwnProperty(prefix) &&
                                // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
                                (mnemonic.length > 0 || stream.eol())
                            ) {
                                style = tlvIdentifierStyle[prefix];
                            } else {
                                // Just swallow one character and try again.
                                // This enables subsequent identifier match with preceding symbol character, which
                                //   is legal within a statement.  (Eg, !$reset).  It also enables detection of
                                //   comment start with preceding symbols.
                                stream.backUp(stream.current().length - 1);
                            }
                        } else if (stream.match(/^\t+/)) {
                            // Highlight tabs, which are illegal.
                            style = "invalid";
                        } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
                            // [:], (), {}, ;.
                            style = "meta";
                        } else if (
                            (match = stream.match(/^[mM]4([\+_])?[\w\d_]*/))
                        ) {
                            // m4 pre proc
                            style =
                                match[1] == "+" ? "keyword.special" : "keyword";
                        } else if (stream.match(/^ +/)) {
                            // Skip over spaces.
                            if (stream.eol()) {
                                // Trailing spaces.
                                style = "error";
                            }
                        } else if (stream.match(/^[\w\d_]+/)) {
                            // alpha-numeric token.
                            style = "number";
                        } else {
                            // Eat the next char w/ no formatting.
                            stream.next();
                        }
                    } else {
                        if (stream.match(/^[mM]4([\w\d_]*)/)) {
                            // m4 pre proc
                            style = "keyword";
                        }
                    }
                    return style;
                },

                indent: function(state) {
                    return state.tlvCodeActive == true
                        ? state.tlvNextIndent
                        : -1;
                },

                startState: function(state) {
                    state.tlvIndentationStyle = []; // Styles to use for each level of indentation.
                    state.tlvCodeActive = true; // True when we're in a TLV region (and at beginning of file).
                    state.tlvNextIndent = -1; // The number of spaces to autoindent the next line if tlvCodeActive.
                    state.tlvInBlockComment = false; // True inside /**/ comment.
                },
            },
        });

        exports.tlv = tlv;
        exports.verilog = verilog;
    }
    _M91();
    function _M92() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function simpleMode(states) {
            ensureState(states, "start");
            var states_ = {},
                meta = states.languageData || {},
                hasIndentation = false;
            for (var state in states)
                if (state != meta && states.hasOwnProperty(state)) {
                    var list = (states_[state] = []),
                        orig = states[state];
                    for (var i = 0; i < orig.length; i++) {
                        var data = orig[i];
                        list.push(new Rule(data, states));
                        if (data.indent || data.dedent) hasIndentation = true;
                    }
                }
            return {
                startState: function() {
                    return {
                        state: "start",
                        pending: null,
                        indent: hasIndentation ? [] : null,
                    };
                },
                copyState: function(state) {
                    var s = {
                        state: state.state,
                        pending: state.pending,
                        indent: state.indent && state.indent.slice(0),
                    };
                    if (state.stack) s.stack = state.stack.slice(0);
                    return s;
                },
                token: tokenFunction(states_),
                indent: indentFunction(states_, meta),
                languageData: meta,
            };
        }
        function ensureState(states, name) {
            if (!states.hasOwnProperty(name))
                throw new Error("Undefined state " + name + " in simple mode");
        }

        function toRegex(val, caret) {
            if (!val) return /(?:)/;
            var flags = "";
            if (val instanceof RegExp) {
                if (val.ignoreCase) flags = "i";
                val = val.source;
            } else {
                val = String(val);
            }
            return new RegExp(
                (caret === false ? "" : "^") + "(?:" + val + ")",
                flags
            );
        }

        function asToken(val) {
            if (!val) return null;
            if (val.apply) return val;
            if (typeof val == "string") return val.replace(/\./g, " ");
            var result = [];
            for (var i = 0; i < val.length; i++)
                result.push(val[i] && val[i].replace(/\./g, " "));
            return result;
        }

        function Rule(data, states) {
            if (data.next || data.push)
                ensureState(states, data.next || data.push);
            this.regex = toRegex(data.regex);
            this.token = asToken(data.token);
            this.data = data;
        }

        function tokenFunction(states) {
            return function(stream, state) {
                if (state.pending) {
                    var pend = state.pending.shift();
                    if (state.pending.length == 0) state.pending = null;
                    stream.pos += pend.text.length;
                    return pend.token;
                }

                var curState = states[state.state];
                for (var i = 0; i < curState.length; i++) {
                    var rule = curState[i];
                    var matches =
                        (!rule.data.sol || stream.sol()) &&
                        stream.match(rule.regex);
                    if (matches) {
                        if (rule.data.next) {
                            state.state = rule.data.next;
                        } else if (rule.data.push) {
                            (state.stack || (state.stack = [])).push(
                                state.state
                            );
                            state.state = rule.data.push;
                        } else if (
                            rule.data.pop &&
                            state.stack &&
                            state.stack.length
                        ) {
                            state.state = state.stack.pop();
                        }

                        if (rule.data.indent)
                            state.indent.push(
                                stream.indentation() + stream.indentUnit
                            );
                        if (rule.data.dedent) state.indent.pop();
                        var token = rule.token;
                        if (token && token.apply) token = token(matches);
                        if (
                            matches.length > 2 &&
                            rule.token &&
                            typeof rule.token != "string"
                        ) {
                            state.pending = [];
                            for (var j = 2; j < matches.length; j++)
                                if (matches[j])
                                    state.pending.push({
                                        text: matches[j],
                                        token: rule.token[j - 1],
                                    });
                            stream.backUp(
                                matches[0].length -
                                (matches[1] ? matches[1].length : 0)
                            );
                            return token[0];
                        } else if (token && token.join) {
                            return token[0];
                        } else {
                            return token;
                        }
                    }
                }
                stream.next();
                return null;
            };
        }

        function indentFunction(states, meta) {
            return function(state, textAfter) {
                if (
                    state.indent == null ||
                    (meta.dontIndentStates &&
                        meta.doneIndentState.indexOf(state.state) > -1)
                )
                    return null;

                var pos = state.indent.length - 1,
                    rules = states[state.state];
                scan: for (; ;) {
                    for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i];
                        if (
                            rule.data.dedent &&
                            rule.data.dedentIfLineStart !== false
                        ) {
                            var m = rule.regex.exec(textAfter);
                            if (m && m[0]) {
                                pos--;
                                if (rule.next || rule.push)
                                    rules = states[rule.next || rule.push];
                                textAfter = textAfter.slice(m[0].length);
                                continue scan;
                            }
                        }
                    }
                    break;
                }
                return pos < 0 ? 0 : state.indent[pos];
            };
        }

        var kKeywords = [
            "align",
            "block",
            "br(_if|_table|_on_(cast|data|func|i31|null))?",
            "call(_indirect|_ref)?",
            "current_memory",
            "\\bdata\\b",
            "catch(_all)?",
            "delegate",
            "drop",
            "elem",
            "else",
            "end",
            "export",
            "\\bextern\\b",
            "\\bfunc\\b",
            "global(\\.(get|set))?",
            "if",
            "import",
            "local(\\.(get|set|tee))?",
            "loop",
            "module",
            "mut",
            "nop",
            "offset",
            "param",
            "result",
            "rethrow",
            "return(_call(_indirect|_ref)?)?",
            "select",
            "start",
            "table(\\.(size|get|set|size|grow|fill|init|copy))?",
            "then",
            "throw",
            "try",
            "type",
            "unreachable",
            "unwind",

            // Numeric opcodes.
            "i(32|64)\\.(store(8|16)|(load(8|16)_[su]))",
            "i64\\.(load32_[su]|store32)",
            "[fi](32|64)\\.(const|load|store)",
            "f(32|64)\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)",
            "i(32|64)\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)",
            "i64\\.extend_[su]_i32",
            "i32\\.wrap_i64",
            "i(32|64)\\.trunc_f(32|64)_[su]",
            "f(32|64)\\.convert_i(32|64)_[su]",
            "f64\\.promote_f32",
            "f32\\.demote_f64",
            "f32\\.reinterpret_i32",
            "i32\\.reinterpret_f32",
            "f64\\.reinterpret_i64",
            "i64\\.reinterpret_f64",
            // Atomics.
            "memory(\\.((atomic\\.(notify|wait(32|64)))|grow|size))?",
            "i64.atomic\\.(load32_u|store32|rmw32\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)",
            "i(32|64)\\.atomic\\.(load((8|16)_u)?|store(8|16)?|rmw(\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))",
            // SIMD.
            "v128\\.load(8x8|16x4|32x2)_[su]",
            "v128\\.load(8|16|32|64)_splat",
            "v128\\.(load|store)(8|16|32|64)_lane",
            "v128\\.load(32|64)_zero",
            "v128.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)",
            "i(8x16|16x8)\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)",
            "i(8x16|16x8|32x4|64x2)\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)",
            "(i(8x16|16x8|32x4|64x2)|f(32x4|64x2)).(splat|replace_lane)",
            "i(8x16|16x8|32x4)\\.(([lg][te]_u)|((min|max)_[su]))",
            "f(32x4|64x2)\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)",
            "[fi](32x4|64x2)\\.extract_lane",
            "i8x16\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])",
            "i16x8\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)",
            "i16x8\\.(extend|extmul)_(low|high)_i8x16_[su]",
            "i32x4\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)",
            "i32x4\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]",
            "i64x2\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])",
            "f32x4\\.(convert_i32x4_[su]|demote_f64x2_zero)",
            "f64x2\\.(promote_low_f32x4|convert_low_i32x4_[su])",
            // Reference types, function references, and GC.
            "\\bany\\b",
            "array\\.len",
            "(array|struct)(\\.(new_(default_)?with_rtt|get(_[su])?|set))?",
            "\\beq\\b",
            "field",
            "i31\\.(new|get_[su])",
            "\\bnull\\b",
            "ref(\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?",
            "rtt(\\.(canon|sub))?",
        ];

        const wast = simpleMode({
            start: [
                { regex: new RegExp(kKeywords.join("|")), token: "keyword" },
                {
                    regex: /\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\b/,
                    token: "atom",
                },
                { regex: /\b(funcref|externref|[fi](32|64))\b/, token: "atom" },
                {
                    regex: /\$([a-zA-Z0-9_`\+\-\*\/\\\^~=<>!\?@#$%&|:\.]+)/,
                    token: "variable",
                },
                {
                    regex: /"(?:[^"\\\x00-\x1f\x7f]|\\[nt\\'"]|\\[0-9a-fA-F][0-9a-fA-F])*"/,
                    token: "string",
                },
                { regex: /\(;.*?/, token: "comment", next: "comment" },
                { regex: /;;.*$/, token: "comment" },
                { regex: /\(/, indent: true },
                { regex: /\)/, dedent: true },
            ],

            comment: [
                { regex: /.*?;\)/, token: "comment", next: "start" },
                { regex: /.*/, token: "comment" },
            ],

            meta: {
                dontIndentStates: ["comment"],
            },
        });

        // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,
        // which seems like a reasonable choice, although it's not standard right now.

        exports.wast = wast;
    }
    _M92();
    function _M93() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(",");
            for (var i = 0; i < words.length; ++i) {
                var allCaps = words[i].toUpperCase();
                var firstCap =
                    words[i].charAt(0).toUpperCase() + words[i].slice(1);
                obj[words[i]] = true;
                obj[allCaps] = true;
                obj[firstCap] = true;
            }
            return obj;
        }

        function metaHook(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
        }

        var atoms = words("null"),
            hooks = { "`": metaHook, $: metaHook },
            multiLineStrings = false;

        var keywords = words(
            "abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block," +
            "body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case," +
            "end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for," +
            "function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage," +
            "literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map," +
            "postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal," +
            "sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor"
        );

        var blockKeywords = words(
            "architecture,entity,begin,case,port,else,elsif,end,for,function,if"
        );

        var isOperatorChar = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
        var curPunc;

        function tokenBase(stream, state) {
            var ch = stream.next();
            if (hooks[ch]) {
                var result = hooks[ch](stream, state);
                if (result !== false) return result;
            }
            if (ch == '"') {
                state.tokenize = tokenString2(ch);
                return state.tokenize(stream, state);
            }
            if (ch == "'") {
                state.tokenize = tokenString(ch);
                return state.tokenize(stream, state);
            }
            if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
                curPunc = ch;
                return null;
            }
            if (/[\d']/.test(ch)) {
                stream.eatWhile(/[\w\.']/);
                return "number";
            }
            if (ch == "-") {
                if (stream.eat("-")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }
            if (isOperatorChar.test(ch)) {
                stream.eatWhile(isOperatorChar);
                return "operator";
            }
            stream.eatWhile(/[\w\$_]/);
            var cur = stream.current();
            if (keywords.propertyIsEnumerable(cur.toLowerCase())) {
                if (blockKeywords.propertyIsEnumerable(cur))
                    curPunc = "newstatement";
                return "keyword";
            }
            if (atoms.propertyIsEnumerable(cur)) return "atom";
            return "variable";
        }

        function tokenString(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "--";
                }
                if (end || !(escaped || multiLineStrings))
                    state.tokenize = tokenBase;
                return "string";
            };
        }
        function tokenString2(quote) {
            return function(stream, state) {
                var escaped = false,
                    next,
                    end = false;
                while ((next = stream.next()) != null) {
                    if (next == quote && !escaped) {
                        end = true;
                        break;
                    }
                    escaped = !escaped && next == "--";
                }
                if (end || !(escaped || multiLineStrings))
                    state.tokenize = tokenBase;
                return "string.special";
            };
        }

        function Context(indented, column, type, align, prev) {
            this.indented = indented;
            this.column = column;
            this.type = type;
            this.align = align;
            this.prev = prev;
        }
        function pushContext(state, col, type) {
            return (state.context = new Context(
                state.indented,
                col,
                type,
                null,
                state.context
            ));
        }
        function popContext(state) {
            var t = state.context.type;
            if (t == ")" || t == "]" || t == "}")
                state.indented = state.context.indented;
            return (state.context = state.context.prev);
        }

        // Interface
        const vhdl = {
            startState: function(indentUnit) {
                return {
                    tokenize: null,
                    context: new Context(-indentUnit, 0, "top", false),
                    indented: 0,
                    startOfLine: true,
                };
            },

            token: function(stream, state) {
                var ctx = state.context;
                if (stream.sol()) {
                    if (ctx.align == null) ctx.align = false;
                    state.indented = stream.indentation();
                    state.startOfLine = true;
                }
                if (stream.eatSpace()) return null;
                curPunc = null;
                var style = (state.tokenize || tokenBase)(stream, state);
                if (style == "comment" || style == "meta") return style;
                if (ctx.align == null) ctx.align = true;

                if (
                    (curPunc == ";" || curPunc == ":") &&
                    ctx.type == "statement"
                )
                    popContext(state);
                else if (curPunc == "{")
                    pushContext(state, stream.column(), "}");
                else if (curPunc == "[")
                    pushContext(state, stream.column(), "]");
                else if (curPunc == "(")
                    pushContext(state, stream.column(), ")");
                else if (curPunc == "}") {
                    while (ctx.type == "statement") ctx = popContext(state);
                    if (ctx.type == "}") ctx = popContext(state);
                    while (ctx.type == "statement") ctx = popContext(state);
                } else if (curPunc == ctx.type) popContext(state);
                else if (
                    ctx.type == "}" ||
                    ctx.type == "top" ||
                    (ctx.type == "statement" && curPunc == "newstatement")
                )
                    pushContext(state, stream.column(), "statement");
                state.startOfLine = false;
                return style;
            },

            indent: function(state, textAfter, cx) {
                if (state.tokenize != tokenBase && state.tokenize != null)
                    return 0;
                var firstChar = textAfter && textAfter.charAt(0),
                    ctx = state.context,
                    closing = firstChar == ctx.type;
                if (ctx.type == "statement")
                    return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
                else if (ctx.align) return ctx.column + (closing ? 0 : 1);
                else return ctx.indented + (closing ? 0 : cx.unit);
            },

            languageData: {
                indentOnInput: /^\s*[{}]$/,
                commentTokens: { line: "--" },
            },
        };

        exports.vhdl = vhdl;
    }
    _M93();
    function _M94() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function wordRegexp(words) {
            return new RegExp("^((" + words.join(")|(") + "))\\b");
        }
        var builtinArray = [
            "Clamp",
            "Constructor",
            "EnforceRange",
            "Exposed",
            "ImplicitThis",
            "Global",
            "PrimaryGlobal",
            "LegacyArrayClass",
            "LegacyUnenumerableNamedProperties",
            "LenientThis",
            "NamedConstructor",
            "NewObject",
            "NoInterfaceObject",
            "OverrideBuiltins",
            "PutForwards",
            "Replaceable",
            "SameObject",
            "TreatNonObjectAsNull",
            "TreatNullAs",
            "EmptyString",
            "Unforgeable",
            "Unscopeable",
        ];
        var builtins = wordRegexp(builtinArray);

        var typeArray = [
            "unsigned",
            "short",
            "long", // UnsignedIntegerType
            "unrestricted",
            "float",
            "double", // UnrestrictedFloatType
            "boolean",
            "byte",
            "octet", // Rest of PrimitiveType
            "Promise", // PromiseType
            "ArrayBuffer",
            "DataView",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Uint8Array",
            "Uint16Array",
            "Uint32Array",
            "Uint8ClampedArray",
            "Float32Array",
            "Float64Array", // BufferRelatedType
            "ByteString",
            "DOMString",
            "USVString",
            "sequence",
            "object",
            "RegExp",
            "Error",
            "DOMException",
            "FrozenArray", // Rest of NonAnyType
            "any", // Rest of SingleType
            "void", // Rest of ReturnType
        ];
        var types = wordRegexp(typeArray);

        var keywordArray = [
            "attribute",
            "callback",
            "const",
            "deleter",
            "dictionary",
            "enum",
            "getter",
            "implements",
            "inherit",
            "interface",
            "iterable",
            "legacycaller",
            "maplike",
            "partial",
            "required",
            "serializer",
            "setlike",
            "setter",
            "static",
            "stringifier",
            "typedef", // ArgumentNameKeyword except
            // "unrestricted"
            "optional",
            "readonly",
            "or",
        ];
        var keywords = wordRegexp(keywordArray);

        var atomArray = [
            "true",
            "false", // BooleanLiteral
            "Infinity",
            "NaN", // FloatLiteral
            "null", // Rest of ConstValue
        ];
        var atoms = wordRegexp(atomArray);

        var startDefArray = ["callback", "dictionary", "enum", "interface"];
        var startDefs = wordRegexp(startDefArray);

        var endDefArray = ["typedef"];
        var endDefs = wordRegexp(endDefArray);

        var singleOperators = /^[:<=>?]/;
        var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
        var floats =
            /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
        var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
        var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
        var strings = /^"[^"]*"/;
        var multilineComments = /^\/\*.*?\*\//;
        var multilineCommentsStart = /^\/\*.*/;
        var multilineCommentsEnd = /^.*?\*\//;

        function readToken(stream, state) {
            // whitespace
            if (stream.eatSpace()) return null;

            // comment
            if (state.inComment) {
                if (stream.match(multilineCommentsEnd)) {
                    state.inComment = false;
                    return "comment";
                }
                stream.skipToEnd();
                return "comment";
            }
            if (stream.match("//")) {
                stream.skipToEnd();
                return "comment";
            }
            if (stream.match(multilineComments)) return "comment";
            if (stream.match(multilineCommentsStart)) {
                state.inComment = true;
                return "comment";
            }

            // integer and float
            if (stream.match(/^-?[0-9\.]/, false)) {
                if (stream.match(integers) || stream.match(floats))
                    return "number";
            }

            // string
            if (stream.match(strings)) return "string";

            // identifier
            if (state.startDef && stream.match(identifiers)) return "def";

            if (state.endDef && stream.match(identifiersEnd)) {
                state.endDef = false;
                return "def";
            }

            if (stream.match(keywords)) return "keyword";

            if (stream.match(types)) {
                var lastToken = state.lastToken;
                var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];

                if (
                    lastToken === ":" ||
                    lastToken === "implements" ||
                    nextToken === "implements" ||
                    nextToken === "="
                ) {
                    // Used as identifier
                    return "builtin";
                } else {
                    // Used as type
                    return "type";
                }
            }

            if (stream.match(builtins)) return "builtin";
            if (stream.match(atoms)) return "atom";
            if (stream.match(identifiers)) return "variable";

            // other
            if (stream.match(singleOperators)) return "operator";

            // unrecognized
            stream.next();
            return null;
        }
        const webIDL = {
            startState: function() {
                return {
                    // Is in multiline comment
                    inComment: false,
                    // Last non-whitespace, matched token
                    lastToken: "",
                    // Next token is a definition
                    startDef: false,
                    // Last token of the statement is a definition
                    endDef: false,
                };
            },
            token: function(stream, state) {
                var style = readToken(stream, state);

                if (style) {
                    var cur = stream.current();
                    state.lastToken = cur;
                    if (style === "keyword") {
                        state.startDef = startDefs.test(cur);
                        state.endDef = state.endDef || endDefs.test(cur);
                    } else {
                        state.startDef = false;
                    }
                }

                return style;
            },

            languageData: {
                autocomplete: builtinArray
                    .concat(typeArray)
                    .concat(keywordArray)
                    .concat(atomArray),
            },
        };

        exports.webIDL = webIDL;
    }
    _M94();
    function _M95() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var htmlConfig = {
            autoSelfClosers: {
                area: true,
                base: true,
                br: true,
                col: true,
                command: true,
                embed: true,
                frame: true,
                hr: true,
                img: true,
                input: true,
                keygen: true,
                link: true,
                meta: true,
                param: true,
                source: true,
                track: true,
                wbr: true,
                menuitem: true,
            },
            implicitlyClosed: {
                dd: true,
                li: true,
                optgroup: true,
                option: true,
                p: true,
                rp: true,
                rt: true,
                tbody: true,
                td: true,
                tfoot: true,
                th: true,
                tr: true,
            },
            contextGrabbers: {
                dd: { dd: true, dt: true },
                dt: { dd: true, dt: true },
                li: { li: true },
                option: { option: true, optgroup: true },
                optgroup: { optgroup: true },
                p: {
                    address: true,
                    article: true,
                    aside: true,
                    blockquote: true,
                    dir: true,
                    div: true,
                    dl: true,
                    fieldset: true,
                    footer: true,
                    form: true,
                    h1: true,
                    h2: true,
                    h3: true,
                    h4: true,
                    h5: true,
                    h6: true,
                    header: true,
                    hgroup: true,
                    hr: true,
                    menu: true,
                    nav: true,
                    ol: true,
                    p: true,
                    pre: true,
                    section: true,
                    table: true,
                    ul: true,
                },
                rp: { rp: true, rt: true },
                rt: { rp: true, rt: true },
                tbody: { tbody: true, tfoot: true },
                td: { td: true, th: true },
                tfoot: { tbody: true },
                th: { td: true, th: true },
                thead: { tbody: true, tfoot: true },
                tr: { tr: true },
            },
            doNotIndent: { pre: true },
            allowUnquoted: true,
            allowMissing: true,
            caseFold: true,
        };

        var xmlConfig = {
            autoSelfClosers: {},
            implicitlyClosed: {},
            contextGrabbers: {},
            doNotIndent: {},
            allowUnquoted: false,
            allowMissing: false,
            allowMissingTagName: false,
            caseFold: false,
        };

        function mkXML(parserConfig) {
            var config = {};
            var defaults = parserConfig.htmlMode ? htmlConfig : xmlConfig;
            for (var prop in defaults) config[prop] = defaults[prop];
            for (var prop in parserConfig) config[prop] = parserConfig[prop];

            // Return variables for tokenizers
            var type, setStyle;

            function inText(stream, state) {
                function chain(parser) {
                    state.tokenize = parser;
                    return parser(stream, state);
                }

                var ch = stream.next();
                if (ch == "<") {
                    if (stream.eat("!")) {
                        if (stream.eat("[")) {
                            if (stream.match("CDATA["))
                                return chain(inBlock("atom", "]]>"));
                            else return null;
                        } else if (stream.match("--")) {
                            return chain(inBlock("comment", "-->"));
                        } else if (stream.match("DOCTYPE", true, true)) {
                            stream.eatWhile(/[\w\._\-]/);
                            return chain(doctype(1));
                        } else {
                            return null;
                        }
                    } else if (stream.eat("?")) {
                        stream.eatWhile(/[\w\._\-]/);
                        state.tokenize = inBlock("meta", "?>");
                        return "meta";
                    } else {
                        type = stream.eat("/") ? "closeTag" : "openTag";
                        state.tokenize = inTag;
                        return "angleBracket";
                    }
                } else if (ch == "&") {
                    var ok;
                    if (stream.eat("#")) {
                        if (stream.eat("x")) {
                            ok =
                                stream.eatWhile(/[a-fA-F\d]/) &&
                                stream.eat(";");
                        } else {
                            ok = stream.eatWhile(/[\d]/) && stream.eat(";");
                        }
                    } else {
                        ok = stream.eatWhile(/[\w\.\-:]/) && stream.eat(";");
                    }
                    return ok ? "atom" : "error";
                } else {
                    stream.eatWhile(/[^&<]/);
                    return null;
                }
            }
            inText.isInText = true;

            function inTag(stream, state) {
                var ch = stream.next();
                if (ch == ">" || (ch == "/" && stream.eat(">"))) {
                    state.tokenize = inText;
                    type = ch == ">" ? "endTag" : "selfcloseTag";
                    return "angleBracket";
                } else if (ch == "=") {
                    type = "equals";
                    return null;
                } else if (ch == "<") {
                    state.tokenize = inText;
                    state.state = baseState;
                    state.tagName = state.tagStart = null;
                    state.tokenize(stream, state);
                    return "invalid";
                } else if (/[\'\"]/.test(ch)) {
                    state.tokenize = inAttribute(ch);
                    state.stringStartCol = stream.column();
                    return state.tokenize(stream, state);
                } else {
                    stream.match(/^[^\s\u00a0=<>\"\']*[^\s\u00a0=<>\"\'\/]/);
                    return "word";
                }
            }

            function inAttribute(quote) {
                var closure = function(stream, state) {
                    while (!stream.eol()) {
                        if (stream.next() == quote) {
                            state.tokenize = inTag;
                            break;
                        }
                    }
                    return "string";
                };
                closure.isInAttribute = true;
                return closure;
            }

            function inBlock(style, terminator) {
                return function(stream, state) {
                    while (!stream.eol()) {
                        if (stream.match(terminator)) {
                            state.tokenize = inText;
                            break;
                        }
                        stream.next();
                    }
                    return style;
                };
            }

            function doctype(depth) {
                return function(stream, state) {
                    var ch;
                    while ((ch = stream.next()) != null) {
                        if (ch == "<") {
                            state.tokenize = doctype(depth + 1);
                            return state.tokenize(stream, state);
                        } else if (ch == ">") {
                            if (depth == 1) {
                                state.tokenize = inText;
                                break;
                            } else {
                                state.tokenize = doctype(depth - 1);
                                return state.tokenize(stream, state);
                            }
                        }
                    }
                    return "meta";
                };
            }

            function lower(tagName) {
                return tagName && tagName.toLowerCase();
            }

            function Context(state, tagName, startOfLine) {
                this.prev = state.context;
                this.tagName = tagName || "";
                this.indent = state.indented;
                this.startOfLine = startOfLine;
                if (
                    config.doNotIndent.hasOwnProperty(tagName) ||
                    (state.context && state.context.noIndent)
                )
                    this.noIndent = true;
            }
            function popContext(state) {
                if (state.context) state.context = state.context.prev;
            }
            function maybePopContext(state, nextTagName) {
                var parentTagName;
                while (true) {
                    if (!state.context) {
                        return;
                    }
                    parentTagName = state.context.tagName;
                    if (
                        !config.contextGrabbers.hasOwnProperty(
                            lower(parentTagName)
                        ) ||
                        !config.contextGrabbers[
                            lower(parentTagName)
                        ].hasOwnProperty(lower(nextTagName))
                    ) {
                        return;
                    }
                    popContext(state);
                }
            }

            function baseState(type, stream, state) {
                if (type == "openTag") {
                    state.tagStart = stream.column();
                    return tagNameState;
                } else if (type == "closeTag") {
                    return closeTagNameState;
                } else {
                    return baseState;
                }
            }
            function tagNameState(type, stream, state) {
                if (type == "word") {
                    state.tagName = stream.current();
                    setStyle = "tag";
                    return attrState;
                } else if (config.allowMissingTagName && type == "endTag") {
                    setStyle = "angleBracket";
                    return attrState(type, stream, state);
                } else {
                    setStyle = "error";
                    return tagNameState;
                }
            }
            function closeTagNameState(type, stream, state) {
                if (type == "word") {
                    var tagName = stream.current();
                    if (
                        state.context &&
                        state.context.tagName != tagName &&
                        config.implicitlyClosed.hasOwnProperty(
                            lower(state.context.tagName)
                        )
                    )
                        popContext(state);
                    if (
                        (state.context && state.context.tagName == tagName) ||
                        config.matchClosing === false
                    ) {
                        setStyle = "tag";
                        return closeState;
                    } else {
                        setStyle = "error";
                        return closeStateErr;
                    }
                } else if (config.allowMissingTagName && type == "endTag") {
                    setStyle = "angleBracket";
                    return closeState(type, stream, state);
                } else {
                    setStyle = "error";
                    return closeStateErr;
                }
            }

            function closeState(type, _stream, state) {
                if (type != "endTag") {
                    setStyle = "error";
                    return closeState;
                }
                popContext(state);
                return baseState;
            }
            function closeStateErr(type, stream, state) {
                setStyle = "error";
                return closeState(type, stream, state);
            }

            function attrState(type, _stream, state) {
                if (type == "word") {
                    setStyle = "attribute";
                    return attrEqState;
                } else if (type == "endTag" || type == "selfcloseTag") {
                    var tagName = state.tagName,
                        tagStart = state.tagStart;
                    state.tagName = state.tagStart = null;
                    if (
                        type == "selfcloseTag" ||
                        config.autoSelfClosers.hasOwnProperty(lower(tagName))
                    ) {
                        maybePopContext(state, tagName);
                    } else {
                        maybePopContext(state, tagName);
                        state.context = new Context(
                            state,
                            tagName,
                            tagStart == state.indented
                        );
                    }
                    return baseState;
                }
                setStyle = "error";
                return attrState;
            }
            function attrEqState(type, stream, state) {
                if (type == "equals") return attrValueState;
                if (!config.allowMissing) setStyle = "error";
                return attrState(type, stream, state);
            }
            function attrValueState(type, stream, state) {
                if (type == "string") return attrContinuedState;
                if (type == "word" && config.allowUnquoted) {
                    setStyle = "string";
                    return attrState;
                }
                setStyle = "error";
                return attrState(type, stream, state);
            }
            function attrContinuedState(type, stream, state) {
                if (type == "string") return attrContinuedState;
                return attrState(type, stream, state);
            }

            return {
                startState: function() {
                    var state = {
                        tokenize: inText,
                        state: baseState,
                        indented: 0,
                        tagName: null,
                        tagStart: null,
                        context: null,
                    };
                    return state;
                },

                token: function(stream, state) {
                    if (!state.tagName && stream.sol())
                        state.indented = stream.indentation();

                    if (stream.eatSpace()) return null;
                    type = null;
                    var style = state.tokenize(stream, state);
                    if ((style || type) && style != "comment") {
                        setStyle = null;
                        state.state = state.state(type || style, stream, state);
                        if (setStyle) style = setStyle;
                    }
                    return style;
                },

                indent: function(state, textAfter, cx) {
                    var context = state.context;
                    // Indent multi-line strings (e.g. css).
                    if (state.tokenize.isInAttribute) {
                        if (state.tagStart == state.indented)
                            return state.stringStartCol + 1;
                        else return state.indented + cx.unit;
                    }
                    if (context && context.noIndent) return null;
                    if (state.tokenize != inTag && state.tokenize != inText)
                        return null;
                    // Indent the starts of attribute names.
                    if (state.tagName) {
                        if (config.multilineTagIndentPastTag !== false)
                            return state.tagStart + state.tagName.length + 2;
                        else
                            return (
                                state.tagStart +
                                cx.unit * (config.multilineTagIndentFactor || 1)
                            );
                    }
                    if (config.alignCDATA && /<!\[CDATA\[/.test(textAfter))
                        return 0;
                    var tagAfter =
                        textAfter && /^<(\/)?([\w_:\.-]*)/.exec(textAfter);
                    if (tagAfter && tagAfter[1]) {
                        // Closing tag spotted
                        while (context) {
                            if (context.tagName == tagAfter[2]) {
                                context = context.prev;
                                break;
                            } else if (
                                config.implicitlyClosed.hasOwnProperty(
                                    lower(context.tagName)
                                )
                            ) {
                                context = context.prev;
                            } else {
                                break;
                            }
                        }
                    } else if (tagAfter) {
                        // Opening tag spotted
                        while (context) {
                            var grabbers =
                                config.contextGrabbers[lower(context.tagName)];
                            if (
                                grabbers &&
                                grabbers.hasOwnProperty(lower(tagAfter[2]))
                            )
                                context = context.prev;
                            else break;
                        }
                    }
                    while (context && context.prev && !context.startOfLine)
                        context = context.prev;
                    if (context) return context.indent + cx.unit;
                    else return state.baseIndent || 0;
                },

                languageData: {
                    indentOnInput: /<\/[\s\w:]+>$/,
                    commentTokens: { block: { open: "<!--", close: "-->" } },
                },

                configuration: config.htmlMode ? "html" : "xml",
                skipAttribute: function(state) {
                    if (state.state == attrValueState) state.state = attrState;
                },

                xmlCurrentTag: function(state) {
                    return state.tagName
                        ? {
                            name: state.tagName,
                            close: state.type == "closeTag",
                        }
                        : null;
                },

                xmlCurrentContext: function(state) {
                    var context = [];
                    for (var cx = state.context; cx; cx = cx.prev)
                        context.push(cx.tagName);
                    return context.reverse();
                },
            };
        }
        const xml = mkXML({});
        const html = mkXML({ htmlMode: true });

        exports.html = html;
        exports.mkXML = mkXML;
        exports.xml = xml;
    }
    _M95();
    function _M96() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        // The keywords object is set to the result of this self executing
        // function. Each keyword is a property of the keywords object whose
        // value is {type: atype, style: astyle}
        var keywords = (function() {
            // convenience functions used to build keywords object
            function kw(type) {
                return { type: type, style: "keyword" };
            }
            var operator = kw("operator"),
                atom = { type: "atom", style: "atom" },
                punctuation = { type: "punctuation", style: null },
                qualifier = { type: "axis_specifier", style: "qualifier" };

            // kwObj is what is return from this function at the end
            var kwObj = {
                ",": punctuation,
            };

            // a list of 'basic' keywords. For each add a property to kwObj with the value of
            // {type: basic[i], style: "keyword"} e.g. 'after' --> {type: "after", style: "keyword"}
            var basic = [
                "after",
                "all",
                "allowing",
                "ancestor",
                "ancestor-or-self",
                "any",
                "array",
                "as",
                "ascending",
                "at",
                "attribute",
                "base-uri",
                "before",
                "boundary-space",
                "by",
                "case",
                "cast",
                "castable",
                "catch",
                "child",
                "collation",
                "comment",
                "construction",
                "contains",
                "content",
                "context",
                "copy",
                "copy-namespaces",
                "count",
                "decimal-format",
                "declare",
                "default",
                "delete",
                "descendant",
                "descendant-or-self",
                "descending",
                "diacritics",
                "different",
                "distance",
                "document",
                "document-node",
                "element",
                "else",
                "empty",
                "empty-sequence",
                "encoding",
                "end",
                "entire",
                "every",
                "exactly",
                "except",
                "external",
                "first",
                "following",
                "following-sibling",
                "for",
                "from",
                "ftand",
                "ftnot",
                "ft-option",
                "ftor",
                "function",
                "fuzzy",
                "greatest",
                "group",
                "if",
                "import",
                "in",
                "inherit",
                "insensitive",
                "insert",
                "instance",
                "intersect",
                "into",
                "invoke",
                "is",
                "item",
                "language",
                "last",
                "lax",
                "least",
                "let",
                "levels",
                "lowercase",
                "map",
                "modify",
                "module",
                "most",
                "namespace",
                "next",
                "no",
                "node",
                "nodes",
                "no-inherit",
                "no-preserve",
                "not",
                "occurs",
                "of",
                "only",
                "option",
                "order",
                "ordered",
                "ordering",
                "paragraph",
                "paragraphs",
                "parent",
                "phrase",
                "preceding",
                "preceding-sibling",
                "preserve",
                "previous",
                "processing-instruction",
                "relationship",
                "rename",
                "replace",
                "return",
                "revalidation",
                "same",
                "satisfies",
                "schema",
                "schema-attribute",
                "schema-element",
                "score",
                "self",
                "sensitive",
                "sentence",
                "sentences",
                "sequence",
                "skip",
                "sliding",
                "some",
                "stable",
                "start",
                "stemming",
                "stop",
                "strict",
                "strip",
                "switch",
                "text",
                "then",
                "thesaurus",
                "times",
                "to",
                "transform",
                "treat",
                "try",
                "tumbling",
                "type",
                "typeswitch",
                "union",
                "unordered",
                "update",
                "updating",
                "uppercase",
                "using",
                "validate",
                "value",
                "variable",
                "version",
                "weight",
                "when",
                "where",
                "wildcards",
                "window",
                "with",
                "without",
                "word",
                "words",
                "xquery",
            ];
            for (var i = 0, l = basic.length; i < l; i++) {
                kwObj[basic[i]] = kw(basic[i]);
            }
            // a list of types. For each add a property to kwObj with the value of
            // {type: "atom", style: "atom"}
            var types = [
                "xs:anyAtomicType",
                "xs:anySimpleType",
                "xs:anyType",
                "xs:anyURI",
                "xs:base64Binary",
                "xs:boolean",
                "xs:byte",
                "xs:date",
                "xs:dateTime",
                "xs:dateTimeStamp",
                "xs:dayTimeDuration",
                "xs:decimal",
                "xs:double",
                "xs:duration",
                "xs:ENTITIES",
                "xs:ENTITY",
                "xs:float",
                "xs:gDay",
                "xs:gMonth",
                "xs:gMonthDay",
                "xs:gYear",
                "xs:gYearMonth",
                "xs:hexBinary",
                "xs:ID",
                "xs:IDREF",
                "xs:IDREFS",
                "xs:int",
                "xs:integer",
                "xs:item",
                "xs:java",
                "xs:language",
                "xs:long",
                "xs:Name",
                "xs:NCName",
                "xs:negativeInteger",
                "xs:NMTOKEN",
                "xs:NMTOKENS",
                "xs:nonNegativeInteger",
                "xs:nonPositiveInteger",
                "xs:normalizedString",
                "xs:NOTATION",
                "xs:numeric",
                "xs:positiveInteger",
                "xs:precisionDecimal",
                "xs:QName",
                "xs:short",
                "xs:string",
                "xs:time",
                "xs:token",
                "xs:unsignedByte",
                "xs:unsignedInt",
                "xs:unsignedLong",
                "xs:unsignedShort",
                "xs:untyped",
                "xs:untypedAtomic",
                "xs:yearMonthDuration",
            ];
            for (var i = 0, l = types.length; i < l; i++) {
                kwObj[types[i]] = atom;
            }
            // each operator will add a property to kwObj with value of {type: "operator", style: "keyword"}
            var operators = [
                "eq",
                "ne",
                "lt",
                "le",
                "gt",
                "ge",
                ":=",
                "=",
                ">",
                ">=",
                "<",
                "<=",
                ".",
                "|",
                "?",
                "and",
                "or",
                "div",
                "idiv",
                "mod",
                "*",
                "/",
                "+",
                "-",
            ];
            for (var i = 0, l = operators.length; i < l; i++) {
                kwObj[operators[i]] = operator;
            }
            // each axis_specifiers will add a property to kwObj with value of {type: "axis_specifier", style: "qualifier"}
            var axis_specifiers = [
                "self::",
                "attribute::",
                "child::",
                "descendant::",
                "descendant-or-self::",
                "parent::",
                "ancestor::",
                "ancestor-or-self::",
                "following::",
                "preceding::",
                "following-sibling::",
                "preceding-sibling::",
            ];
            for (var i = 0, l = axis_specifiers.length; i < l; i++) {
                kwObj[axis_specifiers[i]] = qualifier;
            }
            return kwObj;
        })();

        function chain(stream, state, f) {
            state.tokenize = f;
            return f(stream, state);
        }

        // the primary mode tokenizer
        function tokenBase(stream, state) {
            var ch = stream.next(),
                mightBeFunction = false,
                isEQName = isEQNameAhead(stream);

            // an XML tag (if not in some sub, chained tokenizer)
            if (ch == "<") {
                if (stream.match("!--", true))
                    return chain(stream, state, tokenXMLComment);

                if (stream.match("![CDATA", false)) {
                    state.tokenize = tokenCDATA;
                    return "tag";
                }

                if (stream.match("?", false)) {
                    return chain(stream, state, tokenPreProcessing);
                }

                var isclose = stream.eat("/");
                stream.eatSpace();
                var tagName = "",
                    c;
                while ((c = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))) tagName += c;

                return chain(stream, state, tokenTag(tagName, isclose));
            }
            // start code block
            else if (ch == "{") {
                pushStateStack(state, { type: "codeblock" });
                return null;
            }
            // end code block
            else if (ch == "}") {
                popStateStack(state);
                return null;
            }
            // if we're in an XML block
            else if (isInXmlBlock(state)) {
                if (ch == ">") return "tag";
                else if (ch == "/" && stream.eat(">")) {
                    popStateStack(state);
                    return "tag";
                } else return "variable";
            }
            // if a number
            else if (/\d/.test(ch)) {
                stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
                return "atom";
            }
            // comment start
            else if (ch === "(" && stream.eat(":")) {
                pushStateStack(state, { type: "comment" });
                return chain(stream, state, tokenComment);
            }
            // quoted string
            else if (!isEQName && (ch === '"' || ch === "'"))
                return chain(stream, state, tokenString(ch));
            // variable
            else if (ch === "$") {
                return chain(stream, state, tokenVariable);
            }
            // assignment
            else if (ch === ":" && stream.eat("=")) {
                return "keyword";
            }
            // open paren
            else if (ch === "(") {
                pushStateStack(state, { type: "paren" });
                return null;
            }
            // close paren
            else if (ch === ")") {
                popStateStack(state);
                return null;
            }
            // open paren
            else if (ch === "[") {
                pushStateStack(state, { type: "bracket" });
                return null;
            }
            // close paren
            else if (ch === "]") {
                popStateStack(state);
                return null;
            } else {
                var known = keywords.propertyIsEnumerable(ch) && keywords[ch];

                // if there's a EQName ahead, consume the rest of the string portion, it's likely a function
                if (isEQName && ch === '"') while (stream.next() !== '"') { }
                if (isEQName && ch === "'") while (stream.next() !== "'") { }

                // gobble up a word if the character is not known
                if (!known) stream.eatWhile(/[\w\$_-]/);

                // gobble a colon in the case that is a lib func type call fn:doc
                var foundColon = stream.eat(":");

                // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier
                // which should get matched as a keyword
                if (!stream.eat(":") && foundColon) {
                    stream.eatWhile(/[\w\$_-]/);
                }
                // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)
                if (stream.match(/^[ \t]*\(/, false)) {
                    mightBeFunction = true;
                }
                // is the word a keyword?
                var word = stream.current();
                known = keywords.propertyIsEnumerable(word) && keywords[word];

                // if we think it's a function call but not yet known,
                // set style to variable for now for lack of something better
                if (mightBeFunction && !known)
                    known = { type: "function_call", style: "def" };

                // if the previous word was element, attribute, axis specifier, this word should be the name of that
                if (isInXmlConstructor(state)) {
                    popStateStack(state);
                    return "variable";
                }
                // as previously checked, if the word is element,attribute, axis specifier, call it an "xmlconstructor" and
                // push the stack so we know to look for it on the next word
                if (
                    word == "element" ||
                    word == "attribute" ||
                    known.type == "axis_specifier"
                )
                    pushStateStack(state, { type: "xmlconstructor" });

                // if the word is known, return the details of that else just call this a generic 'word'
                return known ? known.style : "variable";
            }
        }

        // handle comments, including nested
        function tokenComment(stream, state) {
            var maybeEnd = false,
                maybeNested = false,
                nestedCount = 0,
                ch;
            while ((ch = stream.next())) {
                if (ch == ")" && maybeEnd) {
                    if (nestedCount > 0) nestedCount--;
                    else {
                        popStateStack(state);
                        break;
                    }
                } else if (ch == ":" && maybeNested) {
                    nestedCount++;
                }
                maybeEnd = ch == ":";
                maybeNested = ch == "(";
            }

            return "comment";
        }

        // tokenizer for string literals
        // optionally pass a tokenizer function to set state.tokenize back to when finished
        function tokenString(quote, f) {
            return function(stream, state) {
                var ch;

                if (isInString(state) && stream.current() == quote) {
                    popStateStack(state);
                    if (f) state.tokenize = f;
                    return "string";
                }

                pushStateStack(state, {
                    type: "string",
                    name: quote,
                    tokenize: tokenString(quote, f),
                });

                // if we're in a string and in an XML block, allow an embedded code block
                if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
                    state.tokenize = tokenBase;
                    return "string";
                }

                while ((ch = stream.next())) {
                    if (ch == quote) {
                        popStateStack(state);
                        if (f) state.tokenize = f;
                        break;
                    } else {
                        // if we're in a string and in an XML block, allow an embedded code block in an attribute
                        if (
                            stream.match("{", false) &&
                            isInXmlAttributeBlock(state)
                        ) {
                            state.tokenize = tokenBase;
                            return "string";
                        }
                    }
                }

                return "string";
            };
        }

        // tokenizer for variables
        function tokenVariable(stream, state) {
            var isVariableChar = /[\w\$_-]/;

            // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote
            if (stream.eat('"')) {
                while (stream.next() !== '"') { }
                stream.eat(":");
            } else {
                stream.eatWhile(isVariableChar);
                if (!stream.match(":=", false)) stream.eat(":");
            }
            stream.eatWhile(isVariableChar);
            state.tokenize = tokenBase;
            return "variable";
        }

        // tokenizer for XML tags
        function tokenTag(name, isclose) {
            return function(stream, state) {
                stream.eatSpace();
                if (isclose && stream.eat(">")) {
                    popStateStack(state);
                    state.tokenize = tokenBase;
                    return "tag";
                }
                // self closing tag without attributes?
                if (!stream.eat("/"))
                    pushStateStack(state, {
                        type: "tag",
                        name: name,
                        tokenize: tokenBase,
                    });
                if (!stream.eat(">")) {
                    state.tokenize = tokenAttribute;
                    return "tag";
                } else {
                    state.tokenize = tokenBase;
                }
                return "tag";
            };
        }

        // tokenizer for XML attributes
        function tokenAttribute(stream, state) {
            var ch = stream.next();

            if (ch == "/" && stream.eat(">")) {
                if (isInXmlAttributeBlock(state)) popStateStack(state);
                if (isInXmlBlock(state)) popStateStack(state);
                return "tag";
            }
            if (ch == ">") {
                if (isInXmlAttributeBlock(state)) popStateStack(state);
                return "tag";
            }
            if (ch == "=") return null;
            // quoted string
            if (ch == '"' || ch == "'")
                return chain(stream, state, tokenString(ch, tokenAttribute));

            if (!isInXmlAttributeBlock(state))
                pushStateStack(state, {
                    type: "attribute",
                    tokenize: tokenAttribute,
                });

            stream.eat(/[a-zA-Z_:]/);
            stream.eatWhile(/[-a-zA-Z0-9_:.]/);
            stream.eatSpace();

            // the case where the attribute has not value and the tag was closed
            if (stream.match(">", false) || stream.match("/", false)) {
                popStateStack(state);
                state.tokenize = tokenBase;
            }

            return "attribute";
        }

        // handle comments, including nested
        function tokenXMLComment(stream, state) {
            var ch;
            while ((ch = stream.next())) {
                if (ch == "-" && stream.match("->", true)) {
                    state.tokenize = tokenBase;
                    return "comment";
                }
            }
        }

        // handle CDATA
        function tokenCDATA(stream, state) {
            var ch;
            while ((ch = stream.next())) {
                if (ch == "]" && stream.match("]", true)) {
                    state.tokenize = tokenBase;
                    return "comment";
                }
            }
        }

        // handle preprocessing instructions
        function tokenPreProcessing(stream, state) {
            var ch;
            while ((ch = stream.next())) {
                if (ch == "?" && stream.match(">", true)) {
                    state.tokenize = tokenBase;
                    return "processingInstruction";
                }
            }
        }

        // functions to test the current context of the state
        function isInXmlBlock(state) {
            return isIn(state, "tag");
        }
        function isInXmlAttributeBlock(state) {
            return isIn(state, "attribute");
        }
        function isInXmlConstructor(state) {
            return isIn(state, "xmlconstructor");
        }
        function isInString(state) {
            return isIn(state, "string");
        }

        function isEQNameAhead(stream) {
            // assume we've already eaten a quote (")
            if (stream.current() === '"')
                return stream.match(/^[^\"]+\"\:/, false);
            else if (stream.current() === "'")
                return stream.match(/^[^\"]+\'\:/, false);
            else return false;
        }

        function isIn(state, type) {
            return (
                state.stack.length &&
                state.stack[state.stack.length - 1].type == type
            );
        }

        function pushStateStack(state, newState) {
            state.stack.push(newState);
        }

        function popStateStack(state) {
            state.stack.pop();
            var reinstateTokenize =
                state.stack.length &&
                state.stack[state.stack.length - 1].tokenize;
            state.tokenize = reinstateTokenize || tokenBase;
        }

        // the interface for the mode API
        const xQuery = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    cc: [],
                    stack: [],
                };
            },

            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                var style = state.tokenize(stream, state);
                return style;
            },

            languageData: {
                commentTokens: { block: { open: "(:", close: ":)" } },
            },
        };

        exports.xQuery = xQuery;
    }
    _M96();
    function _M97() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        function words(str) {
            var obj = {},
                words = str.split(" ");
            for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
            return obj;
        }

        var bodiedOps = words(
            "Assert BackQuote D Defun Deriv For ForEach FromFile " +
            "FromString Function Integrate InverseTaylor Limit " +
            "LocalSymbols Macro MacroRule MacroRulePattern " +
            "NIntegrate Rule RulePattern Subst TD TExplicitSum " +
            "TSum Taylor Taylor1 Taylor2 Taylor3 ToFile " +
            "ToStdout ToString TraceRule Until While"
        );

        // patterns
        var pFloatForm = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
        var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";

        // regular expressions
        var reFloatForm = new RegExp(pFloatForm);
        var reIdentifier = new RegExp(pIdentifier);
        var rePattern = new RegExp(pIdentifier + "?_" + pIdentifier);
        var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");

        function tokenBase(stream, state) {
            var ch;

            // get next character
            ch = stream.next();

            // string
            if (ch === '"') {
                state.tokenize = tokenString;
                return state.tokenize(stream, state);
            }

            // comment
            if (ch === "/") {
                if (stream.eat("*")) {
                    state.tokenize = tokenComment;
                    return state.tokenize(stream, state);
                }
                if (stream.eat("/")) {
                    stream.skipToEnd();
                    return "comment";
                }
            }

            // go back one character
            stream.backUp(1);

            // update scope info
            var m = stream.match(/^(\w+)\s*\(/, false);
            if (m !== null && bodiedOps.hasOwnProperty(m[1]))
                state.scopes.push("bodied");

            var scope = currentScope(state);

            if (scope === "bodied" && ch === "[") state.scopes.pop();

            if (ch === "[" || ch === "{" || ch === "(") state.scopes.push(ch);

            scope = currentScope(state);

            if (
                (scope === "[" && ch === "]") ||
                (scope === "{" && ch === "}") ||
                (scope === "(" && ch === ")")
            )
                state.scopes.pop();

            if (ch === ";") {
                while (scope === "bodied") {
                    state.scopes.pop();
                    scope = currentScope(state);
                }
            }

            // look for ordered rules
            if (stream.match(/\d+ *#/, true, false)) {
                return "qualifier";
            }

            // look for numbers
            if (stream.match(reFloatForm, true, false)) {
                return "number";
            }

            // look for placeholders
            if (stream.match(rePattern, true, false)) {
                return "variableName.special";
            }

            // match all braces separately
            if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
                return "bracket";
            }

            // literals looking like function calls
            if (stream.match(reFunctionLike, true, false)) {
                stream.backUp(1);
                return "variableName.function";
            }

            // all other identifiers
            if (stream.match(reIdentifier, true, false)) {
                return "variable";
            }

            // operators; note that operators like @@ or /; are matched separately for each symbol.
            if (
                stream.match(
                    /(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/,
                    true,
                    false
                )
            ) {
                return "operator";
            }

            // everything else is an error
            return "error";
        }

        function tokenString(stream, state) {
            var next,
                end = false,
                escaped = false;
            while ((next = stream.next()) != null) {
                if (next === '"' && !escaped) {
                    end = true;
                    break;
                }
                escaped = !escaped && next === "\\";
            }
            if (end && !escaped) {
                state.tokenize = tokenBase;
            }
            return "string";
        }
        function tokenComment(stream, state) {
            var prev, next;
            while ((next = stream.next()) != null) {
                if (prev === "*" && next === "/") {
                    state.tokenize = tokenBase;
                    break;
                }
                prev = next;
            }
            return "comment";
        }

        function currentScope(state) {
            var scope = null;
            if (state.scopes.length > 0)
                scope = state.scopes[state.scopes.length - 1];
            return scope;
        }

        const yacas = {
            startState: function() {
                return {
                    tokenize: tokenBase,
                    scopes: [],
                };
            },
            token: function(stream, state) {
                if (stream.eatSpace()) return null;
                return state.tokenize(stream, state);
            },
            indent: function(state, textAfter, cx) {
                if (state.tokenize !== tokenBase && state.tokenize !== null)
                    return null;

                var delta = 0;
                if (
                    textAfter === "]" ||
                    textAfter === "];" ||
                    textAfter === "}" ||
                    textAfter === "};" ||
                    textAfter === ");"
                )
                    delta = -1;

                return (state.scopes.length + delta) * cx.unit;
            },

            languageData: {
                electricInput: /[{}\[\]()\;]/,
                commentTokens: {
                    line: "//",
                    block: { open: "/*", close: "*/" },
                },
            },
        };

        exports.yacas = yacas;
    }
    _M97();
    function _M98() {
        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });

        var cons = ["true", "false", "on", "off", "yes", "no"];
        var keywordRegex = new RegExp("\\b((" + cons.join(")|(") + "))$", "i");

        const yaml = {
            token: function(stream, state) {
                var ch = stream.peek();
                var esc = state.escaped;
                state.escaped = false;
                /* comments */
                if (
                    ch == "#" &&
                    (stream.pos == 0 ||
                        /\s/.test(stream.string.charAt(stream.pos - 1)))
                ) {
                    stream.skipToEnd();
                    return "comment";
                }

                if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
                    return "string";

                if (state.literal && stream.indentation() > state.keyCol) {
                    stream.skipToEnd();
                    return "string";
                } else if (state.literal) {
                    state.literal = false;
                }
                if (stream.sol()) {
                    state.keyCol = 0;
                    state.pair = false;
                    state.pairStart = false;
                    /* document start */
                    if (stream.match("---")) {
                        return "def";
                    }
                    /* document end */
                    if (stream.match("...")) {
                        return "def";
                    }
                    /* array list item */
                    if (stream.match(/^\s*-\s+/)) {
                        return "meta";
                    }
                }
                /* inline pairs/lists */
                if (stream.match(/^(\{|\}|\[|\])/)) {
                    if (ch == "{") state.inlinePairs++;
                    else if (ch == "}") state.inlinePairs--;
                    else if (ch == "[") state.inlineList++;
                    else state.inlineList--;
                    return "meta";
                }

                /* list separator */
                if (state.inlineList > 0 && !esc && ch == ",") {
                    stream.next();
                    return "meta";
                }
                /* pairs separator */
                if (state.inlinePairs > 0 && !esc && ch == ",") {
                    state.keyCol = 0;
                    state.pair = false;
                    state.pairStart = false;
                    stream.next();
                    return "meta";
                }

                /* start of value of a pair */
                if (state.pairStart) {
                    /* block literals */
                    if (stream.match(/^\s*(\||\>)\s*/)) {
                        state.literal = true;
                        return "meta";
                    } /* references */
                    if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) {
                        return "variable";
                    }
                    /* numbers */
                    if (
                        state.inlinePairs == 0 &&
                        stream.match(/^\s*-?[0-9\.\,]+\s?$/)
                    ) {
                        return "number";
                    }
                    if (
                        state.inlinePairs > 0 &&
                        stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)
                    ) {
                        return "number";
                    }
                    /* keywords */
                    if (stream.match(keywordRegex)) {
                        return "keyword";
                    }
                }

                /* pairs (associative arrays) -> key */
                if (
                    !state.pair &&
                    stream.match(
                        /^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/
                    )
                ) {
                    state.pair = true;
                    state.keyCol = stream.indentation();
                    return "atom";
                }
                if (state.pair && stream.match(/^:\s*/)) {
                    state.pairStart = true;
                    return "meta";
                }

                /* nothing found, continue */
                state.pairStart = false;
                state.escaped = ch == "\\";
                stream.next();
                return null;
            },
            startState: function() {
                return {
                    pair: false,
                    pairStart: false,
                    keyCol: 0,
                    inlinePairs: 0,
                    inlineList: 0,
                    literal: false,
                    escaped: false,
                };
            },
            languageData: {
                commentTokens: { line: "#" },
            },
        };

        exports.yaml = yaml;
    }
    _M98();
    function _M99() {
        function mkZ80(ez80) {
            var keywords1, keywords2;
            if (ez80) {
                keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
                keywords2 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
            } else {
                keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
                keywords2 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
            }

            var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
            var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
            var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
            var numbers = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;

            return {
                startState: function() {
                    return {
                        context: 0
                    };
                },
                token: function(stream, state) {
                    if (!stream.column())
                        state.context = 0;

                    if (stream.eatSpace())
                        return null;

                    var w;

                    if (stream.eatWhile(/\w/)) {
                        if (ez80 && stream.eat('.')) {
                            stream.eatWhile(/\w/);
                        }
                        w = stream.current();

                        if (stream.indentation()) {
                            if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
                                state.context = 4;
                                return 'variable';
                            }

                            if (state.context == 2 && variables2.test(w)) {
                                state.context = 4;
                                return 'variableName.special';
                            }

                            if (keywords1.test(w)) {
                                state.context = 1;
                                return 'keyword';
                            } else if (keywords2.test(w)) {
                                state.context = 2;
                                return 'keyword';
                            } else if (state.context == 4 && numbers.test(w)) {
                                return 'number';
                            }

                            if (errors.test(w))
                                return 'error';
                        } else if (stream.match(numbers)) {
                            return 'number';
                        } else {
                            return null;
                        }
                    } else if (stream.eat(';')) {
                        stream.skipToEnd();
                        return 'comment';
                    } else if (stream.eat('"')) {
                        while (w = stream.next()) {
                            if (w == '"')
                                break;

                            if (w == '\\')
                                stream.next();
                        }
                        return 'string';
                    } else if (stream.eat('\'')) {
                        if (stream.match(/\\?.'/))
                            return 'number';
                    } else if (stream.eat('.') || stream.sol() && stream.eat('#')) {
                        state.context = 5;

                        if (stream.eatWhile(/\w/))
                            return 'def';
                    } else if (stream.eat('$')) {
                        if (stream.eatWhile(/[\da-f]/i))
                            return 'number';
                    } else if (stream.eat('%')) {
                        if (stream.eatWhile(/[01]/))
                            return 'number';
                    } else {
                        stream.next();
                    }
                    return null;
                }
            };
        };
        exports.z80 = {
            z80: mkZ80(false),
            ez80: mkZ80(true)
        }
    }
    _M99();
    Object.entries(exports).forEach((entry) => {
        let [modn, v] = entry;
        let vl = {};
        vl[modn] = v
        require.addMod('@codemirror/legacy-modes/mode/' + modn.toLowerCase(), vl)
    })
})({});

