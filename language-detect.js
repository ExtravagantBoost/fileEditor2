//to avoid clouding up global namespace
let langd = ((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esmodule", { value: true });
    let langsv = {
        md: "markdown",
        js: "javascript",
        mjs: "nodejs",
        cjs: "nodejs",
        ts: "typescript",
        html: "html5",
        htm: "html5",
        css: "css3",
        java: "java",
        sh: "bash",
        c: "c",
        cpp: "cplusplus",
        cs: "csharp",
        h: "objectivec",
        m: "objectivec",
        less: "less",
        scss: "sass",
        sass: "sass",
        mpy: "python",
        py: "python",
        cli: "clojure",
        cljs: "clojurescript",
        cljc: "clojurescript",
        clj: "clojurescript",
        edn: "clojure",
        rb: "ruby",
        rs: "rust",
        rlib: "rust",
        php: "php",
        travis: "travis",
        yml: "travis",
        COFFEE: "coffescript",
        hs: "haskell",
        hx: "haxe",
        hxml: "haxe",
        json: "javascript",
        xml: "",
        nix: "nixos",
    };
    let langscm = {
        1: "Troff",
        2: "Troff",
        3: "Troff",
        4: "Troff",
        5: "Troff",
        6: "Troff",
        7: "Troff",
        8: "Troff",
        9: "Troff",
        c: "C",
        h: "C",
        ino: "C",
        cpp: "C++",
        "c++": "C++",
        cc: "C++",
        cxx: "C++",
        hpp: "C++",
        "h++": "C++",
        hh: "C++",
        hxx: "C++",
        cql: "CQL",
        css: "CSS",
        html: "HTML",
        htm: "HTML",
        handlebars: "HTML",
        hbs: "HTML",
        java: "Java",
        js: "JavaScript",
        mjs: "JavaScript",
        cjs: "JavaScript",
        json: "JSON",
        map: "JSON",
        jsx: "JSX",
        md: "Markdown",
        markdown: "Markdown",
        mkd: "Markdown",
        php: "PHP",
        php3: "PHP",
        php4: "PHP",
        php5: "PHP",
        php7: "PHP",
        phtml: "PHP",
        pls: "PLSQL",
        BUILD: "Python",
        bzl: "Python",
        py: "Python",
        pyw: "Python",
        rs: "Rust",
        sql: "SQL",
        tsx: "TSX",
        ts: "TypeScript",
        wat: "WebAssembly",
        wast: "WebAssembly",
        xml: "XML",
        xsl: "XML",
        xsd: "XML",
        svg: "XML",
        dyalog: "APL",
        apl: "APL",
        asc: "PGP",
        pgp: "PGP",
        sig: "SML",
        asn: "ASN.1",
        asn1: "ASN.1",
        b: "Brainfuck",
        bf: "Brainfuck",
        cob: "Cobol",
        cpy: "Cobol",
        cs: "C#",
        clj: "Clojure",
        cljc: "Clojure",
        cljx: "Clojure",
        cljs: "ClojureScript",
        gss: "Closure Stylesheets (GSS)",
        cmake: "CMake",
        "cmake.in": "CMake",
        coffee: "CoffeeScript",
        cl: "Common Lisp",
        lisp: "Common Lisp",
        el: "Common Lisp",
        cyp: "Cypher",
        cypher: "Cypher",
        pyx: "Cython",
        pxd: "Cython",
        pxi: "Cython",
        cr: "Crystal",
        d: "D",
        dart: "Dart",
        diff: "diff",
        patch: "diff",
        dtd: "DTD",
        dylan: "Dylan",
        dyl: "Dylan",
        intr: "Dylan",
        ecl: "ECL",
        edn: "edn",
        e: "Eiffel",
        elm: "Elm",
        erl: "Erlang",
        factor: "Factor",
        forth: "Forth",
        fth: "Forth",
        "4th": "Forth",
        f: "Fortran",
        for: "Fortran",
        f77: "Fortran",
        f90: "Fortran",
        f95: "Fortran",
        fs: "F#",
        s: "Gas",
        feature: "Gherkin",
        go: "Go",
        groovy: "Groovy",
        gradle: "Groovy",
        hs: "Haskell",
        hx: "Haxe",
        hxml: "HXML",
        pro: "IDL",
        jsonld: "JSON-LD",
        j2: "Jinja2",
        jinja: "Jinja2",
        jinja2: "Jinja2",
        jl: "Julia",
        kt: "Kotlin",
        less: "LESS",
        ls: "LiveScript",
        lua: "Lua",
        mrc: "mIRC",
        m: "Octave",
        nb: "Mathematica",
        wl: "Mathematica",
        wls: "Mathematica",
        mo: "Modelica",
        mps: "MUMPS",
        mbox: "Mbox",
        nsh: "NSIS",
        nsi: "NSIS",
        nt: "NTriples",
        nq: "NTriples",
        mm: "Objective-C++",
        ml: "OCaml",
        mli: "OCaml",
        mll: "OCaml",
        mly: "OCaml",
        oz: "Oz",
        p: "Pascal",
        pas: "Pascal",
        pl: "Perl",
        pm: "Perl",
        pig: "Pig",
        ps1: "PowerShell",
        psd1: "PowerShell",
        psm1: "PowerShell",
        properties: "Properties files",
        ini: "Properties files",
        in: "Properties files",
        proto: "ProtoBuf",
        pp: "Puppet",
        q: "Q",
        r: "R",
        R: "R",
        spec: "RPM Spec",
        rb: "Ruby",
        sas: "SAS",
        sass: "Sass",
        scala: "Scala",
        scm: "Scheme",
        ss: "Scheme",
        scss: "SCSS",
        sh: "Shell",
        ksh: "Shell",
        bash: "Shell",
        siv: "Sieve",
        sieve: "Sieve",
        st: "Smalltalk",
        sml: "SML",
        fun: "SML",
        smackspec: "SML",
        rq: "SPARQL",
        sparql: "SPARQL",
        nut: "Squirrel",
        styl: "Stylus",
        swift: "Swift",
        text: "LaTeX",
        ltx: "LaTeX",
        tex: "LaTeX",
        v: "Verilog",
        sv: "SystemVerilog",
        svh: "SystemVerilog",
        tcl: "Tcl",
        textile: "Textile",
        toml: "TOML",
        ttcn: "TTCN",
        ttcn3: "TTCN",
        ttcnpp: "TTCN",
        cfg: "TTCN_CFG",
        ttl: "Turtle",
        webidl: "Web IDL",
        vb: "VB.NET",
        vbs: "VBScript",
        vtl: "Velocity",
        vhd: "VHDL",
        vhdl: "VHDL",
        xy: "XQuery",
        xquery: "XQuery",
        ys: "Yacas",
        yaml: "YAML",
        yml: "YAML",
        z80: "Z80",
        mscgen: "MscGen",
        mscin: "MscGen",
        msc: "MscGen",
        xu: "XÃ¹",
        msgenny: "MsGenny",
    };
    exports.version = "0.0.1";
    exports = {
        detect(name) {
            let extension = name.split(".").reverse()[0];
            //build class via decicon db
            let cls = "";
            if (extension in langsv) {
                //if -original class doesnt exist then fallback to, plain/plain-wordmark
                cls = `devicon-${langsv[extension]}-original devicon-${langsv[extension]}-plain devicon-${langsv[extension]}-plain-wordmark`;
            } else {
            }
            return cls;
        },
        cmdetect(ext) {
            for(let vi in langscm) {
                if (ext.endsWith(vi)) return langscm[vi];//return codemirror Language Identifier
            }
        },
        langscm
    }
    return exports;
})({});

